// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_const_app_categories

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ConstAppCategoriesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"const_app_categories": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"display": schema.StringAttribute{
							Computed:            true,
							Description:         "Description of the app category",
							MarkdownDescription: "Description of the app category",
						},
						"filters": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"srx": schema.ListAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
								"ssr": schema.ListAttribute{
									ElementType: types.StringType,
									Computed:    true,
								},
							},
							CustomType: FiltersType{
								ObjectType: types.ObjectType{
									AttrTypes: FiltersValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"includes": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of other App Categories contained by this one",
							MarkdownDescription: "List of other App Categories contained by this one",
						},
						"key": schema.StringAttribute{
							Computed:            true,
							Description:         "Key name of the app category",
							MarkdownDescription: "Key name of the app category",
						},
					},
					CustomType: ConstAppCategoriesType{
						ObjectType: types.ObjectType{
							AttrTypes: ConstAppCategoriesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type ConstAppCategoriesModel struct {
	ConstAppCategories types.Set `tfsdk:"const_app_categories"`
}

var _ basetypes.ObjectTypable = ConstAppCategoriesType{}

type ConstAppCategoriesType struct {
	basetypes.ObjectType
}

func (t ConstAppCategoriesType) Equal(o attr.Type) bool {
	other, ok := o.(ConstAppCategoriesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConstAppCategoriesType) String() string {
	return "ConstAppCategoriesType"
}

func (t ConstAppCategoriesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return nil, diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return nil, diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ObjectValue, was: %T`, filtersAttribute))
	}

	includesAttribute, ok := attributes["includes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`includes is missing from object`)

		return nil, diags
	}

	includesVal, ok := includesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`includes expected to be basetypes.ListValue, was: %T`, includesAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConstAppCategoriesValue{
		Display:  displayVal,
		Filters:  filtersVal,
		Includes: includesVal,
		Key:      keyVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewConstAppCategoriesValueNull() ConstAppCategoriesValue {
	return ConstAppCategoriesValue{
		state: attr.ValueStateNull,
	}
}

func NewConstAppCategoriesValueUnknown() ConstAppCategoriesValue {
	return ConstAppCategoriesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConstAppCategoriesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConstAppCategoriesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConstAppCategoriesValue Attribute Value",
				"While creating a ConstAppCategoriesValue value, a missing attribute value was detected. "+
					"A ConstAppCategoriesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConstAppCategoriesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConstAppCategoriesValue Attribute Type",
				"While creating a ConstAppCategoriesValue value, an invalid attribute value was detected. "+
					"A ConstAppCategoriesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConstAppCategoriesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConstAppCategoriesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConstAppCategoriesValue Attribute Value",
				"While creating a ConstAppCategoriesValue value, an extra attribute value was detected. "+
					"A ConstAppCategoriesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConstAppCategoriesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConstAppCategoriesValueUnknown(), diags
	}

	displayAttribute, ok := attributes["display"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display is missing from object`)

		return NewConstAppCategoriesValueUnknown(), diags
	}

	displayVal, ok := displayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display expected to be basetypes.StringValue, was: %T`, displayAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return NewConstAppCategoriesValueUnknown(), diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ObjectValue, was: %T`, filtersAttribute))
	}

	includesAttribute, ok := attributes["includes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`includes is missing from object`)

		return NewConstAppCategoriesValueUnknown(), diags
	}

	includesVal, ok := includesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`includes expected to be basetypes.ListValue, was: %T`, includesAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewConstAppCategoriesValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	if diags.HasError() {
		return NewConstAppCategoriesValueUnknown(), diags
	}

	return ConstAppCategoriesValue{
		Display:  displayVal,
		Filters:  filtersVal,
		Includes: includesVal,
		Key:      keyVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewConstAppCategoriesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConstAppCategoriesValue {
	object, diags := NewConstAppCategoriesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConstAppCategoriesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConstAppCategoriesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConstAppCategoriesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConstAppCategoriesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConstAppCategoriesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConstAppCategoriesValueMust(ConstAppCategoriesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConstAppCategoriesType) ValueType(ctx context.Context) attr.Value {
	return ConstAppCategoriesValue{}
}

var _ basetypes.ObjectValuable = ConstAppCategoriesValue{}

type ConstAppCategoriesValue struct {
	Display  basetypes.StringValue `tfsdk:"display"`
	Filters  basetypes.ObjectValue `tfsdk:"filters"`
	Includes basetypes.ListValue   `tfsdk:"includes"`
	Key      basetypes.StringValue `tfsdk:"key"`
	state    attr.ValueState
}

func (v ConstAppCategoriesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["display"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["filters"] = basetypes.ObjectType{
		AttrTypes: FiltersValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["includes"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Display.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display"] = val

		val, err = v.Filters.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["filters"] = val

		val, err = v.Includes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["includes"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConstAppCategoriesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConstAppCategoriesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConstAppCategoriesValue) String() string {
	return "ConstAppCategoriesValue"
}

func (v ConstAppCategoriesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var filters basetypes.ObjectValue

	if v.Filters.IsNull() {
		filters = types.ObjectNull(
			FiltersValue{}.AttributeTypes(ctx),
		)
	}

	if v.Filters.IsUnknown() {
		filters = types.ObjectUnknown(
			FiltersValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Filters.IsNull() && !v.Filters.IsUnknown() {
		filters = types.ObjectValueMust(
			FiltersValue{}.AttributeTypes(ctx),
			v.Filters.Attributes(),
		)
	}

	includesVal, d := types.ListValue(types.StringType, v.Includes.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"display": basetypes.StringType{},
			"filters": basetypes.ObjectType{
				AttrTypes: FiltersValue{}.AttributeTypes(ctx),
			},
			"includes": basetypes.ListType{
				ElemType: types.StringType,
			},
			"key": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"display": basetypes.StringType{},
		"filters": basetypes.ObjectType{
			AttrTypes: FiltersValue{}.AttributeTypes(ctx),
		},
		"includes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"key": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"display":  v.Display,
			"filters":  filters,
			"includes": includesVal,
			"key":      v.Key,
		})

	return objVal, diags
}

func (v ConstAppCategoriesValue) Equal(o attr.Value) bool {
	other, ok := o.(ConstAppCategoriesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Display.Equal(other.Display) {
		return false
	}

	if !v.Filters.Equal(other.Filters) {
		return false
	}

	if !v.Includes.Equal(other.Includes) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	return true
}

func (v ConstAppCategoriesValue) Type(ctx context.Context) attr.Type {
	return ConstAppCategoriesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConstAppCategoriesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"display": basetypes.StringType{},
		"filters": basetypes.ObjectType{
			AttrTypes: FiltersValue{}.AttributeTypes(ctx),
		},
		"includes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"key": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = FiltersType{}

type FiltersType struct {
	basetypes.ObjectType
}

func (t FiltersType) Equal(o attr.Type) bool {
	other, ok := o.(FiltersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FiltersType) String() string {
	return "FiltersType"
}

func (t FiltersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	srxAttribute, ok := attributes["srx"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`srx is missing from object`)

		return nil, diags
	}

	srxVal, ok := srxAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`srx expected to be basetypes.ListValue, was: %T`, srxAttribute))
	}

	ssrAttribute, ok := attributes["ssr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssr is missing from object`)

		return nil, diags
	}

	ssrVal, ok := ssrAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssr expected to be basetypes.ListValue, was: %T`, ssrAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FiltersValue{
		Srx:   srxVal,
		Ssr:   ssrVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewFiltersValueNull() FiltersValue {
	return FiltersValue{
		state: attr.ValueStateNull,
	}
}

func NewFiltersValueUnknown() FiltersValue {
	return FiltersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFiltersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FiltersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FiltersValue Attribute Value",
				"While creating a FiltersValue value, a missing attribute value was detected. "+
					"A FiltersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FiltersValue Attribute Type",
				"While creating a FiltersValue value, an invalid attribute value was detected. "+
					"A FiltersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FiltersValue Attribute Value",
				"While creating a FiltersValue value, an extra attribute value was detected. "+
					"A FiltersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FiltersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFiltersValueUnknown(), diags
	}

	srxAttribute, ok := attributes["srx"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`srx is missing from object`)

		return NewFiltersValueUnknown(), diags
	}

	srxVal, ok := srxAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`srx expected to be basetypes.ListValue, was: %T`, srxAttribute))
	}

	ssrAttribute, ok := attributes["ssr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssr is missing from object`)

		return NewFiltersValueUnknown(), diags
	}

	ssrVal, ok := ssrAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssr expected to be basetypes.ListValue, was: %T`, ssrAttribute))
	}

	if diags.HasError() {
		return NewFiltersValueUnknown(), diags
	}

	return FiltersValue{
		Srx:   srxVal,
		Ssr:   ssrVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewFiltersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FiltersValue {
	object, diags := NewFiltersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFiltersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FiltersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFiltersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFiltersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFiltersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFiltersValueMust(FiltersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FiltersType) ValueType(ctx context.Context) attr.Value {
	return FiltersValue{}
}

var _ basetypes.ObjectValuable = FiltersValue{}

type FiltersValue struct {
	Srx   basetypes.ListValue `tfsdk:"srx"`
	Ssr   basetypes.ListValue `tfsdk:"ssr"`
	state attr.ValueState
}

func (v FiltersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["srx"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["ssr"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Srx.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["srx"] = val

		val, err = v.Ssr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ssr"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FiltersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FiltersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FiltersValue) String() string {
	return "FiltersValue"
}

func (v FiltersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	srxVal, d := types.ListValue(types.StringType, v.Srx.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"srx": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ssr": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	ssrVal, d := types.ListValue(types.StringType, v.Ssr.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"srx": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ssr": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"srx": basetypes.ListType{
			ElemType: types.StringType,
		},
		"ssr": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"srx": srxVal,
			"ssr": ssrVal,
		})

	return objVal, diags
}

func (v FiltersValue) Equal(o attr.Value) bool {
	other, ok := o.(FiltersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Srx.Equal(other.Srx) {
		return false
	}

	if !v.Ssr.Equal(other.Ssr) {
		return false
	}

	return true
}

func (v FiltersValue) Type(ctx context.Context) attr.Type {
	return FiltersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FiltersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"srx": basetypes.ListType{
			ElemType: types.StringType,
		},
		"ssr": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
