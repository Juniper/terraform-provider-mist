// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_const_applications

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ConstApplicationsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"const_applications": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.BoolAttribute{
							Computed: true,
						},
						"app_image_url": schema.StringAttribute{
							Computed: true,
						},
						"app_probe": schema.BoolAttribute{
							Computed: true,
						},
						"category": schema.StringAttribute{
							Computed: true,
						},
						"group": schema.StringAttribute{
							Computed: true,
						},
						"key": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"signature_based": schema.BoolAttribute{
							Computed: true,
						},
						"ssr_app_id": schema.BoolAttribute{
							Computed: true,
						},
					},
					CustomType: ConstApplicationsType{
						ObjectType: types.ObjectType{
							AttrTypes: ConstApplicationsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type ConstApplicationsModel struct {
	ConstApplications types.Set `tfsdk:"const_applications"`
}

var _ basetypes.ObjectTypable = ConstApplicationsType{}

type ConstApplicationsType struct {
	basetypes.ObjectType
}

func (t ConstApplicationsType) Equal(o attr.Type) bool {
	other, ok := o.(ConstApplicationsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConstApplicationsType) String() string {
	return "ConstApplicationsType"
}

func (t ConstApplicationsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.BoolValue, was: %T`, appIdAttribute))
	}

	appImageUrlAttribute, ok := attributes["app_image_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_image_url is missing from object`)

		return nil, diags
	}

	appImageUrlVal, ok := appImageUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_image_url expected to be basetypes.StringValue, was: %T`, appImageUrlAttribute))
	}

	appProbeAttribute, ok := attributes["app_probe"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_probe is missing from object`)

		return nil, diags
	}

	appProbeVal, ok := appProbeAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_probe expected to be basetypes.BoolValue, was: %T`, appProbeAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return nil, diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	signatureBasedAttribute, ok := attributes["signature_based"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`signature_based is missing from object`)

		return nil, diags
	}

	signatureBasedVal, ok := signatureBasedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`signature_based expected to be basetypes.BoolValue, was: %T`, signatureBasedAttribute))
	}

	ssrAppIdAttribute, ok := attributes["ssr_app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssr_app_id is missing from object`)

		return nil, diags
	}

	ssrAppIdVal, ok := ssrAppIdAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssr_app_id expected to be basetypes.BoolValue, was: %T`, ssrAppIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConstApplicationsValue{
		AppId:          appIdVal,
		AppImageUrl:    appImageUrlVal,
		AppProbe:       appProbeVal,
		Category:       categoryVal,
		Group:          groupVal,
		Key:            keyVal,
		Name:           nameVal,
		SignatureBased: signatureBasedVal,
		SsrAppId:       ssrAppIdVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewConstApplicationsValueNull() ConstApplicationsValue {
	return ConstApplicationsValue{
		state: attr.ValueStateNull,
	}
}

func NewConstApplicationsValueUnknown() ConstApplicationsValue {
	return ConstApplicationsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConstApplicationsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConstApplicationsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConstApplicationsValue Attribute Value",
				"While creating a ConstApplicationsValue value, a missing attribute value was detected. "+
					"A ConstApplicationsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConstApplicationsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConstApplicationsValue Attribute Type",
				"While creating a ConstApplicationsValue value, an invalid attribute value was detected. "+
					"A ConstApplicationsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConstApplicationsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConstApplicationsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConstApplicationsValue Attribute Value",
				"While creating a ConstApplicationsValue value, an extra attribute value was detected. "+
					"A ConstApplicationsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConstApplicationsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConstApplicationsValueUnknown(), diags
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.BoolValue, was: %T`, appIdAttribute))
	}

	appImageUrlAttribute, ok := attributes["app_image_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_image_url is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	appImageUrlVal, ok := appImageUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_image_url expected to be basetypes.StringValue, was: %T`, appImageUrlAttribute))
	}

	appProbeAttribute, ok := attributes["app_probe"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_probe is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	appProbeVal, ok := appProbeAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_probe expected to be basetypes.BoolValue, was: %T`, appProbeAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	signatureBasedAttribute, ok := attributes["signature_based"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`signature_based is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	signatureBasedVal, ok := signatureBasedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`signature_based expected to be basetypes.BoolValue, was: %T`, signatureBasedAttribute))
	}

	ssrAppIdAttribute, ok := attributes["ssr_app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssr_app_id is missing from object`)

		return NewConstApplicationsValueUnknown(), diags
	}

	ssrAppIdVal, ok := ssrAppIdAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssr_app_id expected to be basetypes.BoolValue, was: %T`, ssrAppIdAttribute))
	}

	if diags.HasError() {
		return NewConstApplicationsValueUnknown(), diags
	}

	return ConstApplicationsValue{
		AppId:          appIdVal,
		AppImageUrl:    appImageUrlVal,
		AppProbe:       appProbeVal,
		Category:       categoryVal,
		Group:          groupVal,
		Key:            keyVal,
		Name:           nameVal,
		SignatureBased: signatureBasedVal,
		SsrAppId:       ssrAppIdVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewConstApplicationsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConstApplicationsValue {
	object, diags := NewConstApplicationsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConstApplicationsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConstApplicationsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConstApplicationsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConstApplicationsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConstApplicationsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConstApplicationsValueMust(ConstApplicationsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConstApplicationsType) ValueType(ctx context.Context) attr.Value {
	return ConstApplicationsValue{}
}

var _ basetypes.ObjectValuable = ConstApplicationsValue{}

type ConstApplicationsValue struct {
	AppId          basetypes.BoolValue   `tfsdk:"app_id"`
	AppImageUrl    basetypes.StringValue `tfsdk:"app_image_url"`
	AppProbe       basetypes.BoolValue   `tfsdk:"app_probe"`
	Category       basetypes.StringValue `tfsdk:"category"`
	Group          basetypes.StringValue `tfsdk:"group"`
	Key            basetypes.StringValue `tfsdk:"key"`
	Name           basetypes.StringValue `tfsdk:"name"`
	SignatureBased basetypes.BoolValue   `tfsdk:"signature_based"`
	SsrAppId       basetypes.BoolValue   `tfsdk:"ssr_app_id"`
	state          attr.ValueState
}

func (v ConstApplicationsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["app_id"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["app_image_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["app_probe"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["signature_based"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["ssr_app_id"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.AppImageUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_image_url"] = val

		val, err = v.AppProbe.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_probe"] = val

		val, err = v.Category.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["category"] = val

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.SignatureBased.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["signature_based"] = val

		val, err = v.SsrAppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ssr_app_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConstApplicationsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConstApplicationsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConstApplicationsValue) String() string {
	return "ConstApplicationsValue"
}

func (v ConstApplicationsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"app_id":          basetypes.BoolType{},
		"app_image_url":   basetypes.StringType{},
		"app_probe":       basetypes.BoolType{},
		"category":        basetypes.StringType{},
		"group":           basetypes.StringType{},
		"key":             basetypes.StringType{},
		"name":            basetypes.StringType{},
		"signature_based": basetypes.BoolType{},
		"ssr_app_id":      basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"app_id":          v.AppId,
			"app_image_url":   v.AppImageUrl,
			"app_probe":       v.AppProbe,
			"category":        v.Category,
			"group":           v.Group,
			"key":             v.Key,
			"name":            v.Name,
			"signature_based": v.SignatureBased,
			"ssr_app_id":      v.SsrAppId,
		})

	return objVal, diags
}

func (v ConstApplicationsValue) Equal(o attr.Value) bool {
	other, ok := o.(ConstApplicationsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.AppImageUrl.Equal(other.AppImageUrl) {
		return false
	}

	if !v.AppProbe.Equal(other.AppProbe) {
		return false
	}

	if !v.Category.Equal(other.Category) {
		return false
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.SignatureBased.Equal(other.SignatureBased) {
		return false
	}

	if !v.SsrAppId.Equal(other.SsrAppId) {
		return false
	}

	return true
}

func (v ConstApplicationsValue) Type(ctx context.Context) attr.Type {
	return ConstApplicationsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConstApplicationsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"app_id":          basetypes.BoolType{},
		"app_image_url":   basetypes.StringType{},
		"app_probe":       basetypes.BoolType{},
		"category":        basetypes.StringType{},
		"group":           basetypes.StringType{},
		"key":             basetypes.StringType{},
		"name":            basetypes.StringType{},
		"signature_based": basetypes.BoolType{},
		"ssr_app_id":      basetypes.BoolType{},
	}
}
