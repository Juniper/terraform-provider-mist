// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_const_webhooks

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ConstWebhooksDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"const_webhooks": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"allows_single_event_per_message": schema.BoolAttribute{
							Computed:            true,
							Description:         "supports single event per message results",
							MarkdownDescription: "supports single event per message results",
						},
						"for_org": schema.BoolAttribute{
							Computed:            true,
							Description:         "Can be used in org webhooks, optional",
							MarkdownDescription: "Can be used in org webhooks, optional",
						},
						"has_delivery_results": schema.BoolAttribute{
							Computed:            true,
							Description:         "Supports webhook delivery results /api/v1/:scope/:scope_id/webhooks/:webhook_id/events/search",
							MarkdownDescription: "Supports webhook delivery results /api/v1/:scope/:scope_id/webhooks/:webhook_id/events/search",
						},
						"internal": schema.BoolAttribute{
							Computed:            true,
							Description:         "Internal topic (not selectable in site/org webhooks)",
							MarkdownDescription: "Internal topic (not selectable in site/org webhooks)",
						},
						"key": schema.StringAttribute{
							Computed:            true,
							Sensitive:           true,
							Description:         "Webhook topic name",
							MarkdownDescription: "Webhook topic name",
						},
					},
					CustomType: ConstWebhooksType{
						ObjectType: types.ObjectType{
							AttrTypes: ConstWebhooksValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type ConstWebhooksModel struct {
	ConstWebhooks types.Set `tfsdk:"const_webhooks"`
}

var _ basetypes.ObjectTypable = ConstWebhooksType{}

type ConstWebhooksType struct {
	basetypes.ObjectType
}

func (t ConstWebhooksType) Equal(o attr.Type) bool {
	other, ok := o.(ConstWebhooksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConstWebhooksType) String() string {
	return "ConstWebhooksType"
}

func (t ConstWebhooksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowsSingleEventPerMessageAttribute, ok := attributes["allows_single_event_per_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allows_single_event_per_message is missing from object`)

		return nil, diags
	}

	allowsSingleEventPerMessageVal, ok := allowsSingleEventPerMessageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allows_single_event_per_message expected to be basetypes.BoolValue, was: %T`, allowsSingleEventPerMessageAttribute))
	}

	forOrgAttribute, ok := attributes["for_org"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`for_org is missing from object`)

		return nil, diags
	}

	forOrgVal, ok := forOrgAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`for_org expected to be basetypes.BoolValue, was: %T`, forOrgAttribute))
	}

	hasDeliveryResultsAttribute, ok := attributes["has_delivery_results"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`has_delivery_results is missing from object`)

		return nil, diags
	}

	hasDeliveryResultsVal, ok := hasDeliveryResultsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`has_delivery_results expected to be basetypes.BoolValue, was: %T`, hasDeliveryResultsAttribute))
	}

	internalAttribute, ok := attributes["internal"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`internal is missing from object`)

		return nil, diags
	}

	internalVal, ok := internalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`internal expected to be basetypes.BoolValue, was: %T`, internalAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConstWebhooksValue{
		AllowsSingleEventPerMessage: allowsSingleEventPerMessageVal,
		ForOrg:                      forOrgVal,
		HasDeliveryResults:          hasDeliveryResultsVal,
		Internal:                    internalVal,
		Key:                         keyVal,
		state:                       attr.ValueStateKnown,
	}, diags
}

func NewConstWebhooksValueNull() ConstWebhooksValue {
	return ConstWebhooksValue{
		state: attr.ValueStateNull,
	}
}

func NewConstWebhooksValueUnknown() ConstWebhooksValue {
	return ConstWebhooksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConstWebhooksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConstWebhooksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConstWebhooksValue Attribute Value",
				"While creating a ConstWebhooksValue value, a missing attribute value was detected. "+
					"A ConstWebhooksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConstWebhooksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConstWebhooksValue Attribute Type",
				"While creating a ConstWebhooksValue value, an invalid attribute value was detected. "+
					"A ConstWebhooksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConstWebhooksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConstWebhooksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConstWebhooksValue Attribute Value",
				"While creating a ConstWebhooksValue value, an extra attribute value was detected. "+
					"A ConstWebhooksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConstWebhooksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConstWebhooksValueUnknown(), diags
	}

	allowsSingleEventPerMessageAttribute, ok := attributes["allows_single_event_per_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allows_single_event_per_message is missing from object`)

		return NewConstWebhooksValueUnknown(), diags
	}

	allowsSingleEventPerMessageVal, ok := allowsSingleEventPerMessageAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allows_single_event_per_message expected to be basetypes.BoolValue, was: %T`, allowsSingleEventPerMessageAttribute))
	}

	forOrgAttribute, ok := attributes["for_org"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`for_org is missing from object`)

		return NewConstWebhooksValueUnknown(), diags
	}

	forOrgVal, ok := forOrgAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`for_org expected to be basetypes.BoolValue, was: %T`, forOrgAttribute))
	}

	hasDeliveryResultsAttribute, ok := attributes["has_delivery_results"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`has_delivery_results is missing from object`)

		return NewConstWebhooksValueUnknown(), diags
	}

	hasDeliveryResultsVal, ok := hasDeliveryResultsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`has_delivery_results expected to be basetypes.BoolValue, was: %T`, hasDeliveryResultsAttribute))
	}

	internalAttribute, ok := attributes["internal"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`internal is missing from object`)

		return NewConstWebhooksValueUnknown(), diags
	}

	internalVal, ok := internalAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`internal expected to be basetypes.BoolValue, was: %T`, internalAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewConstWebhooksValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	if diags.HasError() {
		return NewConstWebhooksValueUnknown(), diags
	}

	return ConstWebhooksValue{
		AllowsSingleEventPerMessage: allowsSingleEventPerMessageVal,
		ForOrg:                      forOrgVal,
		HasDeliveryResults:          hasDeliveryResultsVal,
		Internal:                    internalVal,
		Key:                         keyVal,
		state:                       attr.ValueStateKnown,
	}, diags
}

func NewConstWebhooksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConstWebhooksValue {
	object, diags := NewConstWebhooksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConstWebhooksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConstWebhooksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConstWebhooksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConstWebhooksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConstWebhooksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConstWebhooksValueMust(ConstWebhooksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConstWebhooksType) ValueType(ctx context.Context) attr.Value {
	return ConstWebhooksValue{}
}

var _ basetypes.ObjectValuable = ConstWebhooksValue{}

type ConstWebhooksValue struct {
	AllowsSingleEventPerMessage basetypes.BoolValue   `tfsdk:"allows_single_event_per_message"`
	ForOrg                      basetypes.BoolValue   `tfsdk:"for_org"`
	HasDeliveryResults          basetypes.BoolValue   `tfsdk:"has_delivery_results"`
	Internal                    basetypes.BoolValue   `tfsdk:"internal"`
	Key                         basetypes.StringValue `tfsdk:"key"`
	state                       attr.ValueState
}

func (v ConstWebhooksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["allows_single_event_per_message"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["for_org"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["has_delivery_results"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["internal"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AllowsSingleEventPerMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allows_single_event_per_message"] = val

		val, err = v.ForOrg.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["for_org"] = val

		val, err = v.HasDeliveryResults.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["has_delivery_results"] = val

		val, err = v.Internal.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["internal"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConstWebhooksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConstWebhooksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConstWebhooksValue) String() string {
	return "ConstWebhooksValue"
}

func (v ConstWebhooksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"allows_single_event_per_message": basetypes.BoolType{},
		"for_org":                         basetypes.BoolType{},
		"has_delivery_results":            basetypes.BoolType{},
		"internal":                        basetypes.BoolType{},
		"key":                             basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allows_single_event_per_message": v.AllowsSingleEventPerMessage,
			"for_org":                         v.ForOrg,
			"has_delivery_results":            v.HasDeliveryResults,
			"internal":                        v.Internal,
			"key":                             v.Key,
		})

	return objVal, diags
}

func (v ConstWebhooksValue) Equal(o attr.Value) bool {
	other, ok := o.(ConstWebhooksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowsSingleEventPerMessage.Equal(other.AllowsSingleEventPerMessage) {
		return false
	}

	if !v.ForOrg.Equal(other.ForOrg) {
		return false
	}

	if !v.HasDeliveryResults.Equal(other.HasDeliveryResults) {
		return false
	}

	if !v.Internal.Equal(other.Internal) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	return true
}

func (v ConstWebhooksValue) Type(ctx context.Context) attr.Type {
	return ConstWebhooksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConstWebhooksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allows_single_event_per_message": basetypes.BoolType{},
		"for_org":                         basetypes.BoolType{},
		"has_delivery_results":            basetypes.BoolType{},
		"internal":                        basetypes.BoolType{},
		"key":                             basetypes.StringType{},
	}
}
