// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_avprofiles

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgAvprofilesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"org_avprofiles": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been created, in epoch",
							MarkdownDescription: "When the object has been created, in epoch",
						},
						"fallback_action": schema.StringAttribute{
							Computed:            true,
							Description:         "enum: `block`, `permit`",
							MarkdownDescription: "enum: `block`, `permit`",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique ID of the object instance in the Mist Organization",
							MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
						},
						"max_filesize": schema.Int64Attribute{
							Computed:            true,
							Description:         "In KB",
							MarkdownDescription: "In KB",
						},
						"mime_whitelist": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"modified_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been modified for the last time, in epoch",
							MarkdownDescription: "When the object has been modified for the last time, in epoch",
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"protocols": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`",
							MarkdownDescription: "List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`",
						},
						"url_whitelist": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
					},
					CustomType: OrgAvprofilesType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgAvprofilesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type OrgAvprofilesModel struct {
	OrgAvprofiles types.Set    `tfsdk:"org_avprofiles"`
	OrgId         types.String `tfsdk:"org_id"`
}

var _ basetypes.ObjectTypable = OrgAvprofilesType{}

type OrgAvprofilesType struct {
	basetypes.ObjectType
}

func (t OrgAvprofilesType) Equal(o attr.Type) bool {
	other, ok := o.(OrgAvprofilesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgAvprofilesType) String() string {
	return "OrgAvprofilesType"
}

func (t OrgAvprofilesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	fallbackActionAttribute, ok := attributes["fallback_action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fallback_action is missing from object`)

		return nil, diags
	}

	fallbackActionVal, ok := fallbackActionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fallback_action expected to be basetypes.StringValue, was: %T`, fallbackActionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	maxFilesizeAttribute, ok := attributes["max_filesize"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_filesize is missing from object`)

		return nil, diags
	}

	maxFilesizeVal, ok := maxFilesizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_filesize expected to be basetypes.Int64Value, was: %T`, maxFilesizeAttribute))
	}

	mimeWhitelistAttribute, ok := attributes["mime_whitelist"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mime_whitelist is missing from object`)

		return nil, diags
	}

	mimeWhitelistVal, ok := mimeWhitelistAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mime_whitelist expected to be basetypes.ListValue, was: %T`, mimeWhitelistAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	protocolsAttribute, ok := attributes["protocols"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocols is missing from object`)

		return nil, diags
	}

	protocolsVal, ok := protocolsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocols expected to be basetypes.ListValue, was: %T`, protocolsAttribute))
	}

	urlWhitelistAttribute, ok := attributes["url_whitelist"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url_whitelist is missing from object`)

		return nil, diags
	}

	urlWhitelistVal, ok := urlWhitelistAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url_whitelist expected to be basetypes.ListValue, was: %T`, urlWhitelistAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgAvprofilesValue{
		CreatedTime:    createdTimeVal,
		FallbackAction: fallbackActionVal,
		Id:             idVal,
		MaxFilesize:    maxFilesizeVal,
		MimeWhitelist:  mimeWhitelistVal,
		ModifiedTime:   modifiedTimeVal,
		Name:           nameVal,
		OrgId:          orgIdVal,
		Protocols:      protocolsVal,
		UrlWhitelist:   urlWhitelistVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewOrgAvprofilesValueNull() OrgAvprofilesValue {
	return OrgAvprofilesValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgAvprofilesValueUnknown() OrgAvprofilesValue {
	return OrgAvprofilesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgAvprofilesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgAvprofilesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgAvprofilesValue Attribute Value",
				"While creating a OrgAvprofilesValue value, a missing attribute value was detected. "+
					"A OrgAvprofilesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgAvprofilesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgAvprofilesValue Attribute Type",
				"While creating a OrgAvprofilesValue value, an invalid attribute value was detected. "+
					"A OrgAvprofilesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgAvprofilesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgAvprofilesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgAvprofilesValue Attribute Value",
				"While creating a OrgAvprofilesValue value, an extra attribute value was detected. "+
					"A OrgAvprofilesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgAvprofilesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgAvprofilesValueUnknown(), diags
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	fallbackActionAttribute, ok := attributes["fallback_action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fallback_action is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	fallbackActionVal, ok := fallbackActionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fallback_action expected to be basetypes.StringValue, was: %T`, fallbackActionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	maxFilesizeAttribute, ok := attributes["max_filesize"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_filesize is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	maxFilesizeVal, ok := maxFilesizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_filesize expected to be basetypes.Int64Value, was: %T`, maxFilesizeAttribute))
	}

	mimeWhitelistAttribute, ok := attributes["mime_whitelist"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mime_whitelist is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	mimeWhitelistVal, ok := mimeWhitelistAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mime_whitelist expected to be basetypes.ListValue, was: %T`, mimeWhitelistAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	protocolsAttribute, ok := attributes["protocols"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`protocols is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	protocolsVal, ok := protocolsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`protocols expected to be basetypes.ListValue, was: %T`, protocolsAttribute))
	}

	urlWhitelistAttribute, ok := attributes["url_whitelist"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url_whitelist is missing from object`)

		return NewOrgAvprofilesValueUnknown(), diags
	}

	urlWhitelistVal, ok := urlWhitelistAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url_whitelist expected to be basetypes.ListValue, was: %T`, urlWhitelistAttribute))
	}

	if diags.HasError() {
		return NewOrgAvprofilesValueUnknown(), diags
	}

	return OrgAvprofilesValue{
		CreatedTime:    createdTimeVal,
		FallbackAction: fallbackActionVal,
		Id:             idVal,
		MaxFilesize:    maxFilesizeVal,
		MimeWhitelist:  mimeWhitelistVal,
		ModifiedTime:   modifiedTimeVal,
		Name:           nameVal,
		OrgId:          orgIdVal,
		Protocols:      protocolsVal,
		UrlWhitelist:   urlWhitelistVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewOrgAvprofilesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgAvprofilesValue {
	object, diags := NewOrgAvprofilesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgAvprofilesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgAvprofilesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgAvprofilesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgAvprofilesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgAvprofilesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgAvprofilesValueMust(OrgAvprofilesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgAvprofilesType) ValueType(ctx context.Context) attr.Value {
	return OrgAvprofilesValue{}
}

var _ basetypes.ObjectValuable = OrgAvprofilesValue{}

type OrgAvprofilesValue struct {
	CreatedTime    basetypes.Float64Value `tfsdk:"created_time"`
	FallbackAction basetypes.StringValue  `tfsdk:"fallback_action"`
	Id             basetypes.StringValue  `tfsdk:"id"`
	MaxFilesize    basetypes.Int64Value   `tfsdk:"max_filesize"`
	MimeWhitelist  basetypes.ListValue    `tfsdk:"mime_whitelist"`
	ModifiedTime   basetypes.Float64Value `tfsdk:"modified_time"`
	Name           basetypes.StringValue  `tfsdk:"name"`
	OrgId          basetypes.StringValue  `tfsdk:"org_id"`
	Protocols      basetypes.ListValue    `tfsdk:"protocols"`
	UrlWhitelist   basetypes.ListValue    `tfsdk:"url_whitelist"`
	state          attr.ValueState
}

func (v OrgAvprofilesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["created_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["fallback_action"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["max_filesize"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["mime_whitelist"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["protocols"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["url_whitelist"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.FallbackAction.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fallback_action"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.MaxFilesize.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_filesize"] = val

		val, err = v.MimeWhitelist.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mime_whitelist"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.Protocols.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["protocols"] = val

		val, err = v.UrlWhitelist.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url_whitelist"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgAvprofilesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgAvprofilesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgAvprofilesValue) String() string {
	return "OrgAvprofilesValue"
}

func (v OrgAvprofilesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	mimeWhitelistVal, d := types.ListValue(types.StringType, v.MimeWhitelist.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_time":    basetypes.Float64Type{},
			"fallback_action": basetypes.StringType{},
			"id":              basetypes.StringType{},
			"max_filesize":    basetypes.Int64Type{},
			"mime_whitelist": basetypes.ListType{
				ElemType: types.StringType,
			},
			"modified_time": basetypes.Float64Type{},
			"name":          basetypes.StringType{},
			"org_id":        basetypes.StringType{},
			"protocols": basetypes.ListType{
				ElemType: types.StringType,
			},
			"url_whitelist": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	protocolsVal, d := types.ListValue(types.StringType, v.Protocols.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_time":    basetypes.Float64Type{},
			"fallback_action": basetypes.StringType{},
			"id":              basetypes.StringType{},
			"max_filesize":    basetypes.Int64Type{},
			"mime_whitelist": basetypes.ListType{
				ElemType: types.StringType,
			},
			"modified_time": basetypes.Float64Type{},
			"name":          basetypes.StringType{},
			"org_id":        basetypes.StringType{},
			"protocols": basetypes.ListType{
				ElemType: types.StringType,
			},
			"url_whitelist": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	urlWhitelistVal, d := types.ListValue(types.StringType, v.UrlWhitelist.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_time":    basetypes.Float64Type{},
			"fallback_action": basetypes.StringType{},
			"id":              basetypes.StringType{},
			"max_filesize":    basetypes.Int64Type{},
			"mime_whitelist": basetypes.ListType{
				ElemType: types.StringType,
			},
			"modified_time": basetypes.Float64Type{},
			"name":          basetypes.StringType{},
			"org_id":        basetypes.StringType{},
			"protocols": basetypes.ListType{
				ElemType: types.StringType,
			},
			"url_whitelist": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"created_time":    basetypes.Float64Type{},
		"fallback_action": basetypes.StringType{},
		"id":              basetypes.StringType{},
		"max_filesize":    basetypes.Int64Type{},
		"mime_whitelist": basetypes.ListType{
			ElemType: types.StringType,
		},
		"modified_time": basetypes.Float64Type{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"protocols": basetypes.ListType{
			ElemType: types.StringType,
		},
		"url_whitelist": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_time":    v.CreatedTime,
			"fallback_action": v.FallbackAction,
			"id":              v.Id,
			"max_filesize":    v.MaxFilesize,
			"mime_whitelist":  mimeWhitelistVal,
			"modified_time":   v.ModifiedTime,
			"name":            v.Name,
			"org_id":          v.OrgId,
			"protocols":       protocolsVal,
			"url_whitelist":   urlWhitelistVal,
		})

	return objVal, diags
}

func (v OrgAvprofilesValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgAvprofilesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.FallbackAction.Equal(other.FallbackAction) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.MaxFilesize.Equal(other.MaxFilesize) {
		return false
	}

	if !v.MimeWhitelist.Equal(other.MimeWhitelist) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.Protocols.Equal(other.Protocols) {
		return false
	}

	if !v.UrlWhitelist.Equal(other.UrlWhitelist) {
		return false
	}

	return true
}

func (v OrgAvprofilesValue) Type(ctx context.Context) attr.Type {
	return OrgAvprofilesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgAvprofilesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_time":    basetypes.Float64Type{},
		"fallback_action": basetypes.StringType{},
		"id":              basetypes.StringType{},
		"max_filesize":    basetypes.Int64Type{},
		"mime_whitelist": basetypes.ListType{
			ElemType: types.StringType,
		},
		"modified_time": basetypes.Float64Type{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"protocols": basetypes.ListType{
			ElemType: types.StringType,
		},
		"url_whitelist": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
