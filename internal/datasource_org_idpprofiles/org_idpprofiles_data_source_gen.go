// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_idpprofiles

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgIdpprofilesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"org_idpprofiles": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"base_profile": schema.StringAttribute{
							Computed:            true,
							Description:         "enum: `critical`, `standard`, `strict`",
							MarkdownDescription: "enum: `critical`, `standard`, `strict`",
						},
						"created_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been created, in epoch",
							MarkdownDescription: "When the object has been created, in epoch",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique ID of the object instance in the Mist Organization",
							MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
						},
						"modified_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been modified for the last time, in epoch",
							MarkdownDescription: "When the object has been modified for the last time, in epoch",
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"overwrites": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"action": schema.StringAttribute{
										Computed:            true,
										Description:         "enum:\n  * alert (default)\n  * drop: silently dropping packets\n  * close: notify client/server to close connection",
										MarkdownDescription: "enum:\n  * alert (default)\n  * drop: silently dropping packets\n  * close: notify client/server to close connection",
									},
									"matching": schema.SingleNestedAttribute{
										Attributes: map[string]schema.Attribute{
											"attack_name": schema.ListAttribute{
												ElementType: types.StringType,
												Computed:    true,
											},
											"dst_subnet": schema.ListAttribute{
												ElementType: types.StringType,
												Computed:    true,
											},
											"severity": schema.ListAttribute{
												ElementType: types.StringType,
												Computed:    true,
											},
										},
										CustomType: MatchingType{
											ObjectType: types.ObjectType{
												AttrTypes: MatchingValue{}.AttributeTypes(ctx),
											},
										},
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
								CustomType: OverwritesType{
									ObjectType: types.ObjectType{
										AttrTypes: OverwritesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
					},
					CustomType: OrgIdpprofilesType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgIdpprofilesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type OrgIdpprofilesModel struct {
	OrgId          types.String `tfsdk:"org_id"`
	OrgIdpprofiles types.Set    `tfsdk:"org_idpprofiles"`
}

var _ basetypes.ObjectTypable = OrgIdpprofilesType{}

type OrgIdpprofilesType struct {
	basetypes.ObjectType
}

func (t OrgIdpprofilesType) Equal(o attr.Type) bool {
	other, ok := o.(OrgIdpprofilesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgIdpprofilesType) String() string {
	return "OrgIdpprofilesType"
}

func (t OrgIdpprofilesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	baseProfileAttribute, ok := attributes["base_profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`base_profile is missing from object`)

		return nil, diags
	}

	baseProfileVal, ok := baseProfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`base_profile expected to be basetypes.StringValue, was: %T`, baseProfileAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	overwritesAttribute, ok := attributes["overwrites"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`overwrites is missing from object`)

		return nil, diags
	}

	overwritesVal, ok := overwritesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`overwrites expected to be basetypes.ListValue, was: %T`, overwritesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgIdpprofilesValue{
		BaseProfile:  baseProfileVal,
		CreatedTime:  createdTimeVal,
		Id:           idVal,
		ModifiedTime: modifiedTimeVal,
		Name:         nameVal,
		OrgId:        orgIdVal,
		Overwrites:   overwritesVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewOrgIdpprofilesValueNull() OrgIdpprofilesValue {
	return OrgIdpprofilesValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgIdpprofilesValueUnknown() OrgIdpprofilesValue {
	return OrgIdpprofilesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgIdpprofilesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgIdpprofilesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgIdpprofilesValue Attribute Value",
				"While creating a OrgIdpprofilesValue value, a missing attribute value was detected. "+
					"A OrgIdpprofilesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgIdpprofilesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgIdpprofilesValue Attribute Type",
				"While creating a OrgIdpprofilesValue value, an invalid attribute value was detected. "+
					"A OrgIdpprofilesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgIdpprofilesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgIdpprofilesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgIdpprofilesValue Attribute Value",
				"While creating a OrgIdpprofilesValue value, an extra attribute value was detected. "+
					"A OrgIdpprofilesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgIdpprofilesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgIdpprofilesValueUnknown(), diags
	}

	baseProfileAttribute, ok := attributes["base_profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`base_profile is missing from object`)

		return NewOrgIdpprofilesValueUnknown(), diags
	}

	baseProfileVal, ok := baseProfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`base_profile expected to be basetypes.StringValue, was: %T`, baseProfileAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgIdpprofilesValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgIdpprofilesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgIdpprofilesValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgIdpprofilesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgIdpprofilesValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	overwritesAttribute, ok := attributes["overwrites"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`overwrites is missing from object`)

		return NewOrgIdpprofilesValueUnknown(), diags
	}

	overwritesVal, ok := overwritesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`overwrites expected to be basetypes.ListValue, was: %T`, overwritesAttribute))
	}

	if diags.HasError() {
		return NewOrgIdpprofilesValueUnknown(), diags
	}

	return OrgIdpprofilesValue{
		BaseProfile:  baseProfileVal,
		CreatedTime:  createdTimeVal,
		Id:           idVal,
		ModifiedTime: modifiedTimeVal,
		Name:         nameVal,
		OrgId:        orgIdVal,
		Overwrites:   overwritesVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewOrgIdpprofilesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgIdpprofilesValue {
	object, diags := NewOrgIdpprofilesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgIdpprofilesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgIdpprofilesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgIdpprofilesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgIdpprofilesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgIdpprofilesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgIdpprofilesValueMust(OrgIdpprofilesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgIdpprofilesType) ValueType(ctx context.Context) attr.Value {
	return OrgIdpprofilesValue{}
}

var _ basetypes.ObjectValuable = OrgIdpprofilesValue{}

type OrgIdpprofilesValue struct {
	BaseProfile  basetypes.StringValue  `tfsdk:"base_profile"`
	CreatedTime  basetypes.Float64Value `tfsdk:"created_time"`
	Id           basetypes.StringValue  `tfsdk:"id"`
	ModifiedTime basetypes.Float64Value `tfsdk:"modified_time"`
	Name         basetypes.StringValue  `tfsdk:"name"`
	OrgId        basetypes.StringValue  `tfsdk:"org_id"`
	Overwrites   basetypes.ListValue    `tfsdk:"overwrites"`
	state        attr.ValueState
}

func (v OrgIdpprofilesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["base_profile"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["overwrites"] = basetypes.ListType{
		ElemType: OverwritesValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.BaseProfile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["base_profile"] = val

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.Overwrites.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["overwrites"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgIdpprofilesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgIdpprofilesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgIdpprofilesValue) String() string {
	return "OrgIdpprofilesValue"
}

func (v OrgIdpprofilesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	overwrites := types.ListValueMust(
		OverwritesType{
			basetypes.ObjectType{
				AttrTypes: OverwritesValue{}.AttributeTypes(ctx),
			},
		},
		v.Overwrites.Elements(),
	)

	if v.Overwrites.IsNull() {
		overwrites = types.ListNull(
			OverwritesType{
				basetypes.ObjectType{
					AttrTypes: OverwritesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Overwrites.IsUnknown() {
		overwrites = types.ListUnknown(
			OverwritesType{
				basetypes.ObjectType{
					AttrTypes: OverwritesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"base_profile":  basetypes.StringType{},
		"created_time":  basetypes.Float64Type{},
		"id":            basetypes.StringType{},
		"modified_time": basetypes.Float64Type{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"overwrites": basetypes.ListType{
			ElemType: OverwritesValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"base_profile":  v.BaseProfile,
			"created_time":  v.CreatedTime,
			"id":            v.Id,
			"modified_time": v.ModifiedTime,
			"name":          v.Name,
			"org_id":        v.OrgId,
			"overwrites":    overwrites,
		})

	return objVal, diags
}

func (v OrgIdpprofilesValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgIdpprofilesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BaseProfile.Equal(other.BaseProfile) {
		return false
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.Overwrites.Equal(other.Overwrites) {
		return false
	}

	return true
}

func (v OrgIdpprofilesValue) Type(ctx context.Context) attr.Type {
	return OrgIdpprofilesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgIdpprofilesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"base_profile":  basetypes.StringType{},
		"created_time":  basetypes.Float64Type{},
		"id":            basetypes.StringType{},
		"modified_time": basetypes.Float64Type{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"overwrites": basetypes.ListType{
			ElemType: OverwritesValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = OverwritesType{}

type OverwritesType struct {
	basetypes.ObjectType
}

func (t OverwritesType) Equal(o attr.Type) bool {
	other, ok := o.(OverwritesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OverwritesType) String() string {
	return "OverwritesType"
}

func (t OverwritesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return nil, diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	matchingAttribute, ok := attributes["matching"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`matching is missing from object`)

		return nil, diags
	}

	matchingVal, ok := matchingAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`matching expected to be basetypes.ObjectValue, was: %T`, matchingAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OverwritesValue{
		Action:   actionVal,
		Matching: matchingVal,
		Name:     nameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewOverwritesValueNull() OverwritesValue {
	return OverwritesValue{
		state: attr.ValueStateNull,
	}
}

func NewOverwritesValueUnknown() OverwritesValue {
	return OverwritesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOverwritesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OverwritesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OverwritesValue Attribute Value",
				"While creating a OverwritesValue value, a missing attribute value was detected. "+
					"A OverwritesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OverwritesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OverwritesValue Attribute Type",
				"While creating a OverwritesValue value, an invalid attribute value was detected. "+
					"A OverwritesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OverwritesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OverwritesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OverwritesValue Attribute Value",
				"While creating a OverwritesValue value, an extra attribute value was detected. "+
					"A OverwritesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OverwritesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOverwritesValueUnknown(), diags
	}

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return NewOverwritesValueUnknown(), diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	matchingAttribute, ok := attributes["matching"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`matching is missing from object`)

		return NewOverwritesValueUnknown(), diags
	}

	matchingVal, ok := matchingAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`matching expected to be basetypes.ObjectValue, was: %T`, matchingAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOverwritesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewOverwritesValueUnknown(), diags
	}

	return OverwritesValue{
		Action:   actionVal,
		Matching: matchingVal,
		Name:     nameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewOverwritesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OverwritesValue {
	object, diags := NewOverwritesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOverwritesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OverwritesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOverwritesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOverwritesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOverwritesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOverwritesValueMust(OverwritesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OverwritesType) ValueType(ctx context.Context) attr.Value {
	return OverwritesValue{}
}

var _ basetypes.ObjectValuable = OverwritesValue{}

type OverwritesValue struct {
	Action   basetypes.StringValue `tfsdk:"action"`
	Matching basetypes.ObjectValue `tfsdk:"matching"`
	Name     basetypes.StringValue `tfsdk:"name"`
	state    attr.ValueState
}

func (v OverwritesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["action"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["matching"] = basetypes.ObjectType{
		AttrTypes: MatchingValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Action.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["action"] = val

		val, err = v.Matching.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["matching"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OverwritesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OverwritesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OverwritesValue) String() string {
	return "OverwritesValue"
}

func (v OverwritesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var matching basetypes.ObjectValue

	if v.Matching.IsNull() {
		matching = types.ObjectNull(
			MatchingValue{}.AttributeTypes(ctx),
		)
	}

	if v.Matching.IsUnknown() {
		matching = types.ObjectUnknown(
			MatchingValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Matching.IsNull() && !v.Matching.IsUnknown() {
		matching = types.ObjectValueMust(
			MatchingValue{}.AttributeTypes(ctx),
			v.Matching.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"action": basetypes.StringType{},
		"matching": basetypes.ObjectType{
			AttrTypes: MatchingValue{}.AttributeTypes(ctx),
		},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"action":   v.Action,
			"matching": matching,
			"name":     v.Name,
		})

	return objVal, diags
}

func (v OverwritesValue) Equal(o attr.Value) bool {
	other, ok := o.(OverwritesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Action.Equal(other.Action) {
		return false
	}

	if !v.Matching.Equal(other.Matching) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v OverwritesValue) Type(ctx context.Context) attr.Type {
	return OverwritesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OverwritesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"action": basetypes.StringType{},
		"matching": basetypes.ObjectType{
			AttrTypes: MatchingValue{}.AttributeTypes(ctx),
		},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MatchingType{}

type MatchingType struct {
	basetypes.ObjectType
}

func (t MatchingType) Equal(o attr.Type) bool {
	other, ok := o.(MatchingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MatchingType) String() string {
	return "MatchingType"
}

func (t MatchingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	attackNameAttribute, ok := attributes["attack_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attack_name is missing from object`)

		return nil, diags
	}

	attackNameVal, ok := attackNameAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attack_name expected to be basetypes.ListValue, was: %T`, attackNameAttribute))
	}

	dstSubnetAttribute, ok := attributes["dst_subnet"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_subnet is missing from object`)

		return nil, diags
	}

	dstSubnetVal, ok := dstSubnetAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_subnet expected to be basetypes.ListValue, was: %T`, dstSubnetAttribute))
	}

	severityAttribute, ok := attributes["severity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`severity is missing from object`)

		return nil, diags
	}

	severityVal, ok := severityAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`severity expected to be basetypes.ListValue, was: %T`, severityAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MatchingValue{
		AttackName: attackNameVal,
		DstSubnet:  dstSubnetVal,
		Severity:   severityVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewMatchingValueNull() MatchingValue {
	return MatchingValue{
		state: attr.ValueStateNull,
	}
}

func NewMatchingValueUnknown() MatchingValue {
	return MatchingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMatchingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MatchingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MatchingValue Attribute Value",
				"While creating a MatchingValue value, a missing attribute value was detected. "+
					"A MatchingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MatchingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MatchingValue Attribute Type",
				"While creating a MatchingValue value, an invalid attribute value was detected. "+
					"A MatchingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MatchingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MatchingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MatchingValue Attribute Value",
				"While creating a MatchingValue value, an extra attribute value was detected. "+
					"A MatchingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MatchingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMatchingValueUnknown(), diags
	}

	attackNameAttribute, ok := attributes["attack_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`attack_name is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	attackNameVal, ok := attackNameAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`attack_name expected to be basetypes.ListValue, was: %T`, attackNameAttribute))
	}

	dstSubnetAttribute, ok := attributes["dst_subnet"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst_subnet is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	dstSubnetVal, ok := dstSubnetAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst_subnet expected to be basetypes.ListValue, was: %T`, dstSubnetAttribute))
	}

	severityAttribute, ok := attributes["severity"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`severity is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	severityVal, ok := severityAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`severity expected to be basetypes.ListValue, was: %T`, severityAttribute))
	}

	if diags.HasError() {
		return NewMatchingValueUnknown(), diags
	}

	return MatchingValue{
		AttackName: attackNameVal,
		DstSubnet:  dstSubnetVal,
		Severity:   severityVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewMatchingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MatchingValue {
	object, diags := NewMatchingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMatchingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MatchingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMatchingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMatchingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMatchingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMatchingValueMust(MatchingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MatchingType) ValueType(ctx context.Context) attr.Value {
	return MatchingValue{}
}

var _ basetypes.ObjectValuable = MatchingValue{}

type MatchingValue struct {
	AttackName basetypes.ListValue `tfsdk:"attack_name"`
	DstSubnet  basetypes.ListValue `tfsdk:"dst_subnet"`
	Severity   basetypes.ListValue `tfsdk:"severity"`
	state      attr.ValueState
}

func (v MatchingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["attack_name"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["dst_subnet"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["severity"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AttackName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["attack_name"] = val

		val, err = v.DstSubnet.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst_subnet"] = val

		val, err = v.Severity.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["severity"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MatchingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MatchingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MatchingValue) String() string {
	return "MatchingValue"
}

func (v MatchingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attackNameVal, d := types.ListValue(types.StringType, v.AttackName.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"attack_name": basetypes.ListType{
				ElemType: types.StringType,
			},
			"dst_subnet": basetypes.ListType{
				ElemType: types.StringType,
			},
			"severity": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	dstSubnetVal, d := types.ListValue(types.StringType, v.DstSubnet.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"attack_name": basetypes.ListType{
				ElemType: types.StringType,
			},
			"dst_subnet": basetypes.ListType{
				ElemType: types.StringType,
			},
			"severity": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	severityVal, d := types.ListValue(types.StringType, v.Severity.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"attack_name": basetypes.ListType{
				ElemType: types.StringType,
			},
			"dst_subnet": basetypes.ListType{
				ElemType: types.StringType,
			},
			"severity": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"attack_name": basetypes.ListType{
			ElemType: types.StringType,
		},
		"dst_subnet": basetypes.ListType{
			ElemType: types.StringType,
		},
		"severity": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"attack_name": attackNameVal,
			"dst_subnet":  dstSubnetVal,
			"severity":    severityVal,
		})

	return objVal, diags
}

func (v MatchingValue) Equal(o attr.Value) bool {
	other, ok := o.(MatchingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AttackName.Equal(other.AttackName) {
		return false
	}

	if !v.DstSubnet.Equal(other.DstSubnet) {
		return false
	}

	if !v.Severity.Equal(other.Severity) {
		return false
	}

	return true
}

func (v MatchingValue) Type(ctx context.Context) attr.Type {
	return MatchingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MatchingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"attack_name": basetypes.ListType{
			ElemType: types.StringType,
		},
		"dst_subnet": basetypes.ListType{
			ElemType: types.StringType,
		},
		"severity": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
