// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_inventory

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgInventoryDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"mac": schema.StringAttribute{
				Optional:            true,
				Description:         "MAC address",
				MarkdownDescription: "MAC address",
			},
			"model": schema.StringAttribute{
				Optional:            true,
				Description:         "device model",
				MarkdownDescription: "device model",
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"org_inventory": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"adopted": schema.BoolAttribute{
							Computed:            true,
							Description:         "only if `type`==`switch` or `type`==`gateway`\nwhether the switch/gateway is adopted",
							MarkdownDescription: "only if `type`==`switch` or `type`==`gateway`\nwhether the switch/gateway is adopted",
						},
						"claim_code": schema.StringAttribute{
							Computed:            true,
							Description:         "device claim code",
							MarkdownDescription: "device claim code",
						},
						"connected": schema.BoolAttribute{
							Computed:            true,
							Description:         "whether the device is connected",
							MarkdownDescription: "whether the device is connected",
						},
						"created_time": schema.Int64Attribute{
							Computed:            true,
							Description:         "inventory created time, in epoch",
							MarkdownDescription: "inventory created time, in epoch",
						},
						"deviceprofile_id": schema.StringAttribute{
							Computed:            true,
							Description:         "deviceprofile id if assigned, null if not assigned",
							MarkdownDescription: "deviceprofile id if assigned, null if not assigned",
						},
						"hostname": schema.StringAttribute{
							Computed:            true,
							Description:         "hostname reported by the device",
							MarkdownDescription: "hostname reported by the device",
						},
						"hw_rev": schema.StringAttribute{
							Computed:            true,
							Description:         "device hardware revision number",
							MarkdownDescription: "device hardware revision number",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "device id",
							MarkdownDescription: "device id",
						},
						"jsi": schema.BoolAttribute{
							Computed: true,
						},
						"mac": schema.StringAttribute{
							Computed:            true,
							Description:         "device MAC address",
							MarkdownDescription: "device MAC address",
						},
						"model": schema.StringAttribute{
							Computed:            true,
							Description:         "device model",
							MarkdownDescription: "device model",
						},
						"modified_time": schema.Int64Attribute{
							Computed:            true,
							Description:         "inventory last modified time, in epoch",
							MarkdownDescription: "inventory last modified time, in epoch",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "device name if configured",
							MarkdownDescription: "device name if configured",
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"serial": schema.StringAttribute{
							Computed:            true,
							Description:         "device serial",
							MarkdownDescription: "device serial",
						},
						"site_id": schema.StringAttribute{
							Computed: true,
						},
						"sku": schema.StringAttribute{
							Computed:            true,
							Description:         "device stock keeping unit",
							MarkdownDescription: "device stock keeping unit",
						},
						"vc_mac": schema.StringAttribute{
							Computed:            true,
							Description:         "only if `type`==`switch`, MAC Address of the Virtual Chassis",
							MarkdownDescription: "only if `type`==`switch`, MAC Address of the Virtual Chassis",
						},
					},
					CustomType: OrgInventoryType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgInventoryValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"serial": schema.StringAttribute{
				Optional:            true,
				Description:         "device serial",
				MarkdownDescription: "device serial",
			},
			"site_id": schema.StringAttribute{
				Optional:            true,
				Description:         "site id if assigned, null if not assigned",
				MarkdownDescription: "site id if assigned, null if not assigned",
			},
			"unassigned": schema.BoolAttribute{
				Optional:            true,
				Description:         "to display Unassigned devices",
				MarkdownDescription: "to display Unassigned devices",
			},
			"vc": schema.BoolAttribute{
				Optional:            true,
				Description:         "To display Virtual Chassis members",
				MarkdownDescription: "To display Virtual Chassis members",
			},
			"vc_mac": schema.StringAttribute{
				Optional:            true,
				Description:         "Virtual Chassis MAC Address",
				MarkdownDescription: "Virtual Chassis MAC Address",
			},
		},
	}
}

type OrgInventoryModel struct {
	Mac          types.String `tfsdk:"mac"`
	Model        types.String `tfsdk:"model"`
	OrgId        types.String `tfsdk:"org_id"`
	OrgInventory types.Set    `tfsdk:"org_inventory"`
	Serial       types.String `tfsdk:"serial"`
	SiteId       types.String `tfsdk:"site_id"`
	Unassigned   types.Bool   `tfsdk:"unassigned"`
	Vc           types.Bool   `tfsdk:"vc"`
	VcMac        types.String `tfsdk:"vc_mac"`
}

var _ basetypes.ObjectTypable = OrgInventoryType{}

type OrgInventoryType struct {
	basetypes.ObjectType
}

func (t OrgInventoryType) Equal(o attr.Type) bool {
	other, ok := o.(OrgInventoryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgInventoryType) String() string {
	return "OrgInventoryType"
}

func (t OrgInventoryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	adoptedAttribute, ok := attributes["adopted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`adopted is missing from object`)

		return nil, diags
	}

	adoptedVal, ok := adoptedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`adopted expected to be basetypes.BoolValue, was: %T`, adoptedAttribute))
	}

	claimCodeAttribute, ok := attributes["claim_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`claim_code is missing from object`)

		return nil, diags
	}

	claimCodeVal, ok := claimCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`claim_code expected to be basetypes.StringValue, was: %T`, claimCodeAttribute))
	}

	connectedAttribute, ok := attributes["connected"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connected is missing from object`)

		return nil, diags
	}

	connectedVal, ok := connectedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connected expected to be basetypes.BoolValue, was: %T`, connectedAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Int64Value, was: %T`, createdTimeAttribute))
	}

	deviceprofileIdAttribute, ok := attributes["deviceprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deviceprofile_id is missing from object`)

		return nil, diags
	}

	deviceprofileIdVal, ok := deviceprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deviceprofile_id expected to be basetypes.StringValue, was: %T`, deviceprofileIdAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return nil, diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	hwRevAttribute, ok := attributes["hw_rev"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hw_rev is missing from object`)

		return nil, diags
	}

	hwRevVal, ok := hwRevAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hw_rev expected to be basetypes.StringValue, was: %T`, hwRevAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	jsiAttribute, ok := attributes["jsi"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`jsi is missing from object`)

		return nil, diags
	}

	jsiVal, ok := jsiAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`jsi expected to be basetypes.BoolValue, was: %T`, jsiAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return nil, diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return nil, diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Int64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	serialAttribute, ok := attributes["serial"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial is missing from object`)

		return nil, diags
	}

	serialVal, ok := serialAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial expected to be basetypes.StringValue, was: %T`, serialAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return nil, diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	skuAttribute, ok := attributes["sku"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sku is missing from object`)

		return nil, diags
	}

	skuVal, ok := skuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sku expected to be basetypes.StringValue, was: %T`, skuAttribute))
	}

	vcMacAttribute, ok := attributes["vc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vc_mac is missing from object`)

		return nil, diags
	}

	vcMacVal, ok := vcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vc_mac expected to be basetypes.StringValue, was: %T`, vcMacAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgInventoryValue{
		Adopted:         adoptedVal,
		ClaimCode:       claimCodeVal,
		Connected:       connectedVal,
		CreatedTime:     createdTimeVal,
		DeviceprofileId: deviceprofileIdVal,
		Hostname:        hostnameVal,
		HwRev:           hwRevVal,
		Id:              idVal,
		Jsi:             jsiVal,
		Mac:             macVal,
		Model:           modelVal,
		ModifiedTime:    modifiedTimeVal,
		Name:            nameVal,
		OrgId:           orgIdVal,
		Serial:          serialVal,
		SiteId:          siteIdVal,
		Sku:             skuVal,
		VcMac:           vcMacVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewOrgInventoryValueNull() OrgInventoryValue {
	return OrgInventoryValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgInventoryValueUnknown() OrgInventoryValue {
	return OrgInventoryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgInventoryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgInventoryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgInventoryValue Attribute Value",
				"While creating a OrgInventoryValue value, a missing attribute value was detected. "+
					"A OrgInventoryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgInventoryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgInventoryValue Attribute Type",
				"While creating a OrgInventoryValue value, an invalid attribute value was detected. "+
					"A OrgInventoryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgInventoryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgInventoryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgInventoryValue Attribute Value",
				"While creating a OrgInventoryValue value, an extra attribute value was detected. "+
					"A OrgInventoryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgInventoryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgInventoryValueUnknown(), diags
	}

	adoptedAttribute, ok := attributes["adopted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`adopted is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	adoptedVal, ok := adoptedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`adopted expected to be basetypes.BoolValue, was: %T`, adoptedAttribute))
	}

	claimCodeAttribute, ok := attributes["claim_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`claim_code is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	claimCodeVal, ok := claimCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`claim_code expected to be basetypes.StringValue, was: %T`, claimCodeAttribute))
	}

	connectedAttribute, ok := attributes["connected"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connected is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	connectedVal, ok := connectedAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connected expected to be basetypes.BoolValue, was: %T`, connectedAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Int64Value, was: %T`, createdTimeAttribute))
	}

	deviceprofileIdAttribute, ok := attributes["deviceprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deviceprofile_id is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	deviceprofileIdVal, ok := deviceprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deviceprofile_id expected to be basetypes.StringValue, was: %T`, deviceprofileIdAttribute))
	}

	hostnameAttribute, ok := attributes["hostname"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hostname is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	hostnameVal, ok := hostnameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hostname expected to be basetypes.StringValue, was: %T`, hostnameAttribute))
	}

	hwRevAttribute, ok := attributes["hw_rev"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hw_rev is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	hwRevVal, ok := hwRevAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hw_rev expected to be basetypes.StringValue, was: %T`, hwRevAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	jsiAttribute, ok := attributes["jsi"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`jsi is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	jsiVal, ok := jsiAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`jsi expected to be basetypes.BoolValue, was: %T`, jsiAttribute))
	}

	macAttribute, ok := attributes["mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mac is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	macVal, ok := macAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mac expected to be basetypes.StringValue, was: %T`, macAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	modelVal, ok := modelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.StringValue, was: %T`, modelAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Int64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	serialAttribute, ok := attributes["serial"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`serial is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	serialVal, ok := serialAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`serial expected to be basetypes.StringValue, was: %T`, serialAttribute))
	}

	siteIdAttribute, ok := attributes["site_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_id is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	siteIdVal, ok := siteIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_id expected to be basetypes.StringValue, was: %T`, siteIdAttribute))
	}

	skuAttribute, ok := attributes["sku"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sku is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	skuVal, ok := skuAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sku expected to be basetypes.StringValue, was: %T`, skuAttribute))
	}

	vcMacAttribute, ok := attributes["vc_mac"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vc_mac is missing from object`)

		return NewOrgInventoryValueUnknown(), diags
	}

	vcMacVal, ok := vcMacAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vc_mac expected to be basetypes.StringValue, was: %T`, vcMacAttribute))
	}

	if diags.HasError() {
		return NewOrgInventoryValueUnknown(), diags
	}

	return OrgInventoryValue{
		Adopted:         adoptedVal,
		ClaimCode:       claimCodeVal,
		Connected:       connectedVal,
		CreatedTime:     createdTimeVal,
		DeviceprofileId: deviceprofileIdVal,
		Hostname:        hostnameVal,
		HwRev:           hwRevVal,
		Id:              idVal,
		Jsi:             jsiVal,
		Mac:             macVal,
		Model:           modelVal,
		ModifiedTime:    modifiedTimeVal,
		Name:            nameVal,
		OrgId:           orgIdVal,
		Serial:          serialVal,
		SiteId:          siteIdVal,
		Sku:             skuVal,
		VcMac:           vcMacVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewOrgInventoryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgInventoryValue {
	object, diags := NewOrgInventoryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgInventoryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgInventoryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgInventoryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgInventoryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgInventoryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgInventoryValueMust(OrgInventoryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgInventoryType) ValueType(ctx context.Context) attr.Value {
	return OrgInventoryValue{}
}

var _ basetypes.ObjectValuable = OrgInventoryValue{}

type OrgInventoryValue struct {
	Adopted         basetypes.BoolValue   `tfsdk:"adopted"`
	ClaimCode       basetypes.StringValue `tfsdk:"claim_code"`
	Connected       basetypes.BoolValue   `tfsdk:"connected"`
	CreatedTime     basetypes.Int64Value  `tfsdk:"created_time"`
	DeviceprofileId basetypes.StringValue `tfsdk:"deviceprofile_id"`
	Hostname        basetypes.StringValue `tfsdk:"hostname"`
	HwRev           basetypes.StringValue `tfsdk:"hw_rev"`
	Id              basetypes.StringValue `tfsdk:"id"`
	Jsi             basetypes.BoolValue   `tfsdk:"jsi"`
	Mac             basetypes.StringValue `tfsdk:"mac"`
	Model           basetypes.StringValue `tfsdk:"model"`
	ModifiedTime    basetypes.Int64Value  `tfsdk:"modified_time"`
	Name            basetypes.StringValue `tfsdk:"name"`
	OrgId           basetypes.StringValue `tfsdk:"org_id"`
	Serial          basetypes.StringValue `tfsdk:"serial"`
	SiteId          basetypes.StringValue `tfsdk:"site_id"`
	Sku             basetypes.StringValue `tfsdk:"sku"`
	VcMac           basetypes.StringValue `tfsdk:"vc_mac"`
	state           attr.ValueState
}

func (v OrgInventoryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 18)

	var val tftypes.Value
	var err error

	attrTypes["adopted"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["claim_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["connected"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["created_time"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["deviceprofile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hostname"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hw_rev"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["jsi"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["mac"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["model"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["serial"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sku"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["vc_mac"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 18)

		val, err = v.Adopted.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["adopted"] = val

		val, err = v.ClaimCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["claim_code"] = val

		val, err = v.Connected.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["connected"] = val

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.DeviceprofileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deviceprofile_id"] = val

		val, err = v.Hostname.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hostname"] = val

		val, err = v.HwRev.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hw_rev"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Jsi.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["jsi"] = val

		val, err = v.Mac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mac"] = val

		val, err = v.Model.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["model"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.Serial.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["serial"] = val

		val, err = v.SiteId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_id"] = val

		val, err = v.Sku.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sku"] = val

		val, err = v.VcMac.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vc_mac"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgInventoryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgInventoryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgInventoryValue) String() string {
	return "OrgInventoryValue"
}

func (v OrgInventoryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"adopted":          basetypes.BoolType{},
		"claim_code":       basetypes.StringType{},
		"connected":        basetypes.BoolType{},
		"created_time":     basetypes.Int64Type{},
		"deviceprofile_id": basetypes.StringType{},
		"hostname":         basetypes.StringType{},
		"hw_rev":           basetypes.StringType{},
		"id":               basetypes.StringType{},
		"jsi":              basetypes.BoolType{},
		"mac":              basetypes.StringType{},
		"model":            basetypes.StringType{},
		"modified_time":    basetypes.Int64Type{},
		"name":             basetypes.StringType{},
		"org_id":           basetypes.StringType{},
		"serial":           basetypes.StringType{},
		"site_id":          basetypes.StringType{},
		"sku":              basetypes.StringType{},
		"vc_mac":           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"adopted":          v.Adopted,
			"claim_code":       v.ClaimCode,
			"connected":        v.Connected,
			"created_time":     v.CreatedTime,
			"deviceprofile_id": v.DeviceprofileId,
			"hostname":         v.Hostname,
			"hw_rev":           v.HwRev,
			"id":               v.Id,
			"jsi":              v.Jsi,
			"mac":              v.Mac,
			"model":            v.Model,
			"modified_time":    v.ModifiedTime,
			"name":             v.Name,
			"org_id":           v.OrgId,
			"serial":           v.Serial,
			"site_id":          v.SiteId,
			"sku":              v.Sku,
			"vc_mac":           v.VcMac,
		})

	return objVal, diags
}

func (v OrgInventoryValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgInventoryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Adopted.Equal(other.Adopted) {
		return false
	}

	if !v.ClaimCode.Equal(other.ClaimCode) {
		return false
	}

	if !v.Connected.Equal(other.Connected) {
		return false
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.DeviceprofileId.Equal(other.DeviceprofileId) {
		return false
	}

	if !v.Hostname.Equal(other.Hostname) {
		return false
	}

	if !v.HwRev.Equal(other.HwRev) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Jsi.Equal(other.Jsi) {
		return false
	}

	if !v.Mac.Equal(other.Mac) {
		return false
	}

	if !v.Model.Equal(other.Model) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.Serial.Equal(other.Serial) {
		return false
	}

	if !v.SiteId.Equal(other.SiteId) {
		return false
	}

	if !v.Sku.Equal(other.Sku) {
		return false
	}

	if !v.VcMac.Equal(other.VcMac) {
		return false
	}

	return true
}

func (v OrgInventoryValue) Type(ctx context.Context) attr.Type {
	return OrgInventoryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgInventoryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"adopted":          basetypes.BoolType{},
		"claim_code":       basetypes.StringType{},
		"connected":        basetypes.BoolType{},
		"created_time":     basetypes.Int64Type{},
		"deviceprofile_id": basetypes.StringType{},
		"hostname":         basetypes.StringType{},
		"hw_rev":           basetypes.StringType{},
		"id":               basetypes.StringType{},
		"jsi":              basetypes.BoolType{},
		"mac":              basetypes.StringType{},
		"model":            basetypes.StringType{},
		"modified_time":    basetypes.Int64Type{},
		"name":             basetypes.StringType{},
		"org_id":           basetypes.StringType{},
		"serial":           basetypes.StringType{},
		"site_id":          basetypes.StringType{},
		"sku":              basetypes.StringType{},
		"vc_mac":           basetypes.StringType{},
	}
}
