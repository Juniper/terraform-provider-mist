// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_nactags

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgNactagsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"match": schema.StringAttribute{
				Optional:            true,
				Description:         "if `type`==`match`, Type of NAC Tag. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `cert_template`, `client_mac`, `idp_role`, `ingress_vlan`, `mdm_status`, `nas_ip`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`",
				MarkdownDescription: "if `type`==`match`, Type of NAC Tag. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `cert_template`, `client_mac`, `idp_role`, `ingress_vlan`, `mdm_status`, `nas_ip`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"cert_cn",
						"cert_issuer",
						"cert_san",
						"cert_serial",
						"cert_sub",
						"cert_template",
						"client_mac",
						"idp_role",
						"ingress_vlan",
						"mdm_status",
						"nas_ip",
						"radius_group",
						"realm",
						"ssid",
						"user_name",
						"usermac_label",
					),
					stringvalidator.LengthAtLeast(1),
				},
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Description:         "Name of NAC Tag",
				MarkdownDescription: "Name of NAC Tag",
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"org_nactags": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"allow_usermac_override": schema.BoolAttribute{
							Computed:            true,
							Description:         "Can be set to true to allow the override by usermac result",
							MarkdownDescription: "Can be set to true to allow the override by usermac result",
						},
						"created_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been created, in epoch",
							MarkdownDescription: "When the object has been created, in epoch",
						},
						"egress_vlan_names": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "If `type`==`egress_vlan_names`, list of egress vlans to return",
							MarkdownDescription: "If `type`==`egress_vlan_names`, list of egress vlans to return",
						},
						"gbp_tag": schema.Int64Attribute{
							Computed:            true,
							Description:         "If `type`==`gbp_tag`",
							MarkdownDescription: "If `type`==`gbp_tag`",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique ID of the object instance in the Mist Organization",
							MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
						},
						"match": schema.StringAttribute{
							Computed:            true,
							Description:         "if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `cert_template`, `client_mac`, `idp_role`, `ingress_vlan`, `mdm_status`, `nas_ip`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`",
							MarkdownDescription: "if `type`==`match`. enum: `cert_cn`, `cert_issuer`, `cert_san`, `cert_serial`, `cert_sub`, `cert_template`, `client_mac`, `idp_role`, `ingress_vlan`, `mdm_status`, `nas_ip`, `radius_group`, `realm`, `ssid`, `user_name`, `usermac_label`",
						},
						"match_all": schema.BoolAttribute{
							Computed:            true,
							Description:         "This field is applicable only when `type`==`match`\n  * `false`: means it is sufficient to match any of the values (i.e., match-any behavior)\n  * `true`: means all values should be matched (i.e., match-all behavior)\n\n\nCurrently it makes sense to set this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`",
							MarkdownDescription: "This field is applicable only when `type`==`match`\n  * `false`: means it is sufficient to match any of the values (i.e., match-any behavior)\n  * `true`: means all values should be matched (i.e., match-all behavior)\n\n\nCurrently it makes sense to set this field to `true` only if the `match`==`idp_role` or `match`==`usermac_label`",
						},
						"modified_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been modified for the last time, in epoch",
							MarkdownDescription: "When the object has been modified for the last time, in epoch",
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"radius_attrs": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "If `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field \"radius_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_attrs in the result of a given rule.",
							MarkdownDescription: "If `type`==`radius_attrs`, user can specify a list of one or more standard attributes in the field \"radius_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_attrs in the result of a given rule.",
						},
						"radius_group": schema.StringAttribute{
							Computed:            true,
							Description:         "If `type`==`radius_group`",
							MarkdownDescription: "If `type`==`radius_group`",
						},
						"radius_vendor_attrs": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "If `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field \"radius_vendor_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.",
							MarkdownDescription: "If `type`==`radius_vendor_attrs`, user can specify a list of one or more vendor-specific attributes in the field \"radius_vendor_attrs\". \nIt is the responsibility of the user to provide a syntactically correct string, otherwise it may not work as expected.\nNote that it is allowed to have more than one radius_vendor_attrs in the result of a given rule.",
						},
						"session_timeout": schema.Int64Attribute{
							Computed:            true,
							Description:         "If `type`==`session_timeout, in seconds",
							MarkdownDescription: "If `type`==`session_timeout, in seconds",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`, `username_attr`, `vlan`",
							MarkdownDescription: "enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`, `username_attr`, `vlan`",
						},
						"username_attr": schema.StringAttribute{
							Computed:            true,
							Description:         "enum: `automatic`, `cn`, `dns`, `email`, `upn`",
							MarkdownDescription: "enum: `automatic`, `cn`, `dns`, `email`, `upn`",
						},
						"values": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "If `type`==`match`",
							MarkdownDescription: "If `type`==`match`",
						},
						"vlan": schema.StringAttribute{
							Computed:            true,
							Description:         "If `type`==`vlan`",
							MarkdownDescription: "If `type`==`vlan`",
						},
					},
					CustomType: OrgNactagsType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgNactagsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"type": schema.StringAttribute{
				Optional:            true,
				Description:         "Type of NAC Tag. enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`, `username_attr`, `vlan`",
				MarkdownDescription: "Type of NAC Tag. enum: `egress_vlan_names`, `gbp_tag`, `match`, `radius_attrs`, `radius_group`, `radius_vendor_attrs`, `session_timeout`, `username_attr`, `vlan`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"egress_vlan_names",
						"gbp_tag",
						"match",
						"radius_attrs",
						"radius_group",
						"radius_vendor_attrs",
						"session_timeout",
						"username_attr",
						"vlan",
					),
					stringvalidator.LengthAtLeast(1),
				},
			},
		},
	}
}

type OrgNactagsModel struct {
	Match      types.String `tfsdk:"match"`
	Name       types.String `tfsdk:"name"`
	OrgId      types.String `tfsdk:"org_id"`
	OrgNactags types.Set    `tfsdk:"org_nactags"`
	Type       types.String `tfsdk:"type"`
}

var _ basetypes.ObjectTypable = OrgNactagsType{}

type OrgNactagsType struct {
	basetypes.ObjectType
}

func (t OrgNactagsType) Equal(o attr.Type) bool {
	other, ok := o.(OrgNactagsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgNactagsType) String() string {
	return "OrgNactagsType"
}

func (t OrgNactagsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowUsermacOverrideAttribute, ok := attributes["allow_usermac_override"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_usermac_override is missing from object`)

		return nil, diags
	}

	allowUsermacOverrideVal, ok := allowUsermacOverrideAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_usermac_override expected to be basetypes.BoolValue, was: %T`, allowUsermacOverrideAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	egressVlanNamesAttribute, ok := attributes["egress_vlan_names"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`egress_vlan_names is missing from object`)

		return nil, diags
	}

	egressVlanNamesVal, ok := egressVlanNamesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`egress_vlan_names expected to be basetypes.ListValue, was: %T`, egressVlanNamesAttribute))
	}

	gbpTagAttribute, ok := attributes["gbp_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gbp_tag is missing from object`)

		return nil, diags
	}

	gbpTagVal, ok := gbpTagAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gbp_tag expected to be basetypes.Int64Value, was: %T`, gbpTagAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	matchAttribute, ok := attributes["match"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`match is missing from object`)

		return nil, diags
	}

	matchVal, ok := matchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`match expected to be basetypes.StringValue, was: %T`, matchAttribute))
	}

	matchAllAttribute, ok := attributes["match_all"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`match_all is missing from object`)

		return nil, diags
	}

	matchAllVal, ok := matchAllAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`match_all expected to be basetypes.BoolValue, was: %T`, matchAllAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	radiusAttrsAttribute, ok := attributes["radius_attrs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_attrs is missing from object`)

		return nil, diags
	}

	radiusAttrsVal, ok := radiusAttrsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_attrs expected to be basetypes.ListValue, was: %T`, radiusAttrsAttribute))
	}

	radiusGroupAttribute, ok := attributes["radius_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_group is missing from object`)

		return nil, diags
	}

	radiusGroupVal, ok := radiusGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_group expected to be basetypes.StringValue, was: %T`, radiusGroupAttribute))
	}

	radiusVendorAttrsAttribute, ok := attributes["radius_vendor_attrs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_vendor_attrs is missing from object`)

		return nil, diags
	}

	radiusVendorAttrsVal, ok := radiusVendorAttrsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_vendor_attrs expected to be basetypes.ListValue, was: %T`, radiusVendorAttrsAttribute))
	}

	sessionTimeoutAttribute, ok := attributes["session_timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`session_timeout is missing from object`)

		return nil, diags
	}

	sessionTimeoutVal, ok := sessionTimeoutAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`session_timeout expected to be basetypes.Int64Value, was: %T`, sessionTimeoutAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	usernameAttrAttribute, ok := attributes["username_attr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username_attr is missing from object`)

		return nil, diags
	}

	usernameAttrVal, ok := usernameAttrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username_attr expected to be basetypes.StringValue, was: %T`, usernameAttrAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return nil, diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return nil, diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.StringValue, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgNactagsValue{
		AllowUsermacOverride: allowUsermacOverrideVal,
		CreatedTime:          createdTimeVal,
		EgressVlanNames:      egressVlanNamesVal,
		GbpTag:               gbpTagVal,
		Id:                   idVal,
		Match:                matchVal,
		MatchAll:             matchAllVal,
		ModifiedTime:         modifiedTimeVal,
		Name:                 nameVal,
		OrgId:                orgIdVal,
		RadiusAttrs:          radiusAttrsVal,
		RadiusGroup:          radiusGroupVal,
		RadiusVendorAttrs:    radiusVendorAttrsVal,
		SessionTimeout:       sessionTimeoutVal,
		OrgNactagsType:       typeVal,
		UsernameAttr:         usernameAttrVal,
		Values:               valuesVal,
		Vlan:                 vlanVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewOrgNactagsValueNull() OrgNactagsValue {
	return OrgNactagsValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgNactagsValueUnknown() OrgNactagsValue {
	return OrgNactagsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgNactagsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgNactagsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgNactagsValue Attribute Value",
				"While creating a OrgNactagsValue value, a missing attribute value was detected. "+
					"A OrgNactagsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgNactagsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgNactagsValue Attribute Type",
				"While creating a OrgNactagsValue value, an invalid attribute value was detected. "+
					"A OrgNactagsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgNactagsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgNactagsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgNactagsValue Attribute Value",
				"While creating a OrgNactagsValue value, an extra attribute value was detected. "+
					"A OrgNactagsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgNactagsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgNactagsValueUnknown(), diags
	}

	allowUsermacOverrideAttribute, ok := attributes["allow_usermac_override"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_usermac_override is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	allowUsermacOverrideVal, ok := allowUsermacOverrideAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_usermac_override expected to be basetypes.BoolValue, was: %T`, allowUsermacOverrideAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	egressVlanNamesAttribute, ok := attributes["egress_vlan_names"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`egress_vlan_names is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	egressVlanNamesVal, ok := egressVlanNamesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`egress_vlan_names expected to be basetypes.ListValue, was: %T`, egressVlanNamesAttribute))
	}

	gbpTagAttribute, ok := attributes["gbp_tag"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gbp_tag is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	gbpTagVal, ok := gbpTagAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gbp_tag expected to be basetypes.Int64Value, was: %T`, gbpTagAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	matchAttribute, ok := attributes["match"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`match is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	matchVal, ok := matchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`match expected to be basetypes.StringValue, was: %T`, matchAttribute))
	}

	matchAllAttribute, ok := attributes["match_all"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`match_all is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	matchAllVal, ok := matchAllAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`match_all expected to be basetypes.BoolValue, was: %T`, matchAllAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	radiusAttrsAttribute, ok := attributes["radius_attrs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_attrs is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	radiusAttrsVal, ok := radiusAttrsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_attrs expected to be basetypes.ListValue, was: %T`, radiusAttrsAttribute))
	}

	radiusGroupAttribute, ok := attributes["radius_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_group is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	radiusGroupVal, ok := radiusGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_group expected to be basetypes.StringValue, was: %T`, radiusGroupAttribute))
	}

	radiusVendorAttrsAttribute, ok := attributes["radius_vendor_attrs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`radius_vendor_attrs is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	radiusVendorAttrsVal, ok := radiusVendorAttrsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`radius_vendor_attrs expected to be basetypes.ListValue, was: %T`, radiusVendorAttrsAttribute))
	}

	sessionTimeoutAttribute, ok := attributes["session_timeout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`session_timeout is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	sessionTimeoutVal, ok := sessionTimeoutAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`session_timeout expected to be basetypes.Int64Value, was: %T`, sessionTimeoutAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	usernameAttrAttribute, ok := attributes["username_attr"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username_attr is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	usernameAttrVal, ok := usernameAttrAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username_attr expected to be basetypes.StringValue, was: %T`, usernameAttrAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	vlanAttribute, ok := attributes["vlan"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vlan is missing from object`)

		return NewOrgNactagsValueUnknown(), diags
	}

	vlanVal, ok := vlanAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vlan expected to be basetypes.StringValue, was: %T`, vlanAttribute))
	}

	if diags.HasError() {
		return NewOrgNactagsValueUnknown(), diags
	}

	return OrgNactagsValue{
		AllowUsermacOverride: allowUsermacOverrideVal,
		CreatedTime:          createdTimeVal,
		EgressVlanNames:      egressVlanNamesVal,
		GbpTag:               gbpTagVal,
		Id:                   idVal,
		Match:                matchVal,
		MatchAll:             matchAllVal,
		ModifiedTime:         modifiedTimeVal,
		Name:                 nameVal,
		OrgId:                orgIdVal,
		RadiusAttrs:          radiusAttrsVal,
		RadiusGroup:          radiusGroupVal,
		RadiusVendorAttrs:    radiusVendorAttrsVal,
		SessionTimeout:       sessionTimeoutVal,
		OrgNactagsType:       typeVal,
		UsernameAttr:         usernameAttrVal,
		Values:               valuesVal,
		Vlan:                 vlanVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewOrgNactagsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgNactagsValue {
	object, diags := NewOrgNactagsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgNactagsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgNactagsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgNactagsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgNactagsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgNactagsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgNactagsValueMust(OrgNactagsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgNactagsType) ValueType(ctx context.Context) attr.Value {
	return OrgNactagsValue{}
}

var _ basetypes.ObjectValuable = OrgNactagsValue{}

type OrgNactagsValue struct {
	AllowUsermacOverride basetypes.BoolValue    `tfsdk:"allow_usermac_override"`
	CreatedTime          basetypes.Float64Value `tfsdk:"created_time"`
	EgressVlanNames      basetypes.ListValue    `tfsdk:"egress_vlan_names"`
	GbpTag               basetypes.Int64Value   `tfsdk:"gbp_tag"`
	Id                   basetypes.StringValue  `tfsdk:"id"`
	Match                basetypes.StringValue  `tfsdk:"match"`
	MatchAll             basetypes.BoolValue    `tfsdk:"match_all"`
	ModifiedTime         basetypes.Float64Value `tfsdk:"modified_time"`
	Name                 basetypes.StringValue  `tfsdk:"name"`
	OrgId                basetypes.StringValue  `tfsdk:"org_id"`
	RadiusAttrs          basetypes.ListValue    `tfsdk:"radius_attrs"`
	RadiusGroup          basetypes.StringValue  `tfsdk:"radius_group"`
	RadiusVendorAttrs    basetypes.ListValue    `tfsdk:"radius_vendor_attrs"`
	SessionTimeout       basetypes.Int64Value   `tfsdk:"session_timeout"`
	OrgNactagsType       basetypes.StringValue  `tfsdk:"type"`
	UsernameAttr         basetypes.StringValue  `tfsdk:"username_attr"`
	Values               basetypes.ListValue    `tfsdk:"values"`
	Vlan                 basetypes.StringValue  `tfsdk:"vlan"`
	state                attr.ValueState
}

func (v OrgNactagsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 18)

	var val tftypes.Value
	var err error

	attrTypes["allow_usermac_override"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["created_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["egress_vlan_names"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["gbp_tag"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["match"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["match_all"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["radius_attrs"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["radius_group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["radius_vendor_attrs"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["session_timeout"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username_attr"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["values"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["vlan"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 18)

		val, err = v.AllowUsermacOverride.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allow_usermac_override"] = val

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.EgressVlanNames.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["egress_vlan_names"] = val

		val, err = v.GbpTag.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gbp_tag"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Match.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["match"] = val

		val, err = v.MatchAll.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["match_all"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.RadiusAttrs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["radius_attrs"] = val

		val, err = v.RadiusGroup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["radius_group"] = val

		val, err = v.RadiusVendorAttrs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["radius_vendor_attrs"] = val

		val, err = v.SessionTimeout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["session_timeout"] = val

		val, err = v.OrgNactagsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.UsernameAttr.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username_attr"] = val

		val, err = v.Values.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["values"] = val

		val, err = v.Vlan.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vlan"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgNactagsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgNactagsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgNactagsValue) String() string {
	return "OrgNactagsValue"
}

func (v OrgNactagsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	egressVlanNamesVal, d := types.ListValue(types.StringType, v.EgressVlanNames.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allow_usermac_override": basetypes.BoolType{},
			"created_time":           basetypes.Float64Type{},
			"egress_vlan_names": basetypes.ListType{
				ElemType: types.StringType,
			},
			"gbp_tag":       basetypes.Int64Type{},
			"id":            basetypes.StringType{},
			"match":         basetypes.StringType{},
			"match_all":     basetypes.BoolType{},
			"modified_time": basetypes.Float64Type{},
			"name":          basetypes.StringType{},
			"org_id":        basetypes.StringType{},
			"radius_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"radius_group": basetypes.StringType{},
			"radius_vendor_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"session_timeout": basetypes.Int64Type{},
			"type":            basetypes.StringType{},
			"username_attr":   basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vlan": basetypes.StringType{},
		}), diags
	}

	radiusAttrsVal, d := types.ListValue(types.StringType, v.RadiusAttrs.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allow_usermac_override": basetypes.BoolType{},
			"created_time":           basetypes.Float64Type{},
			"egress_vlan_names": basetypes.ListType{
				ElemType: types.StringType,
			},
			"gbp_tag":       basetypes.Int64Type{},
			"id":            basetypes.StringType{},
			"match":         basetypes.StringType{},
			"match_all":     basetypes.BoolType{},
			"modified_time": basetypes.Float64Type{},
			"name":          basetypes.StringType{},
			"org_id":        basetypes.StringType{},
			"radius_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"radius_group": basetypes.StringType{},
			"radius_vendor_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"session_timeout": basetypes.Int64Type{},
			"type":            basetypes.StringType{},
			"username_attr":   basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vlan": basetypes.StringType{},
		}), diags
	}

	radiusVendorAttrsVal, d := types.ListValue(types.StringType, v.RadiusVendorAttrs.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allow_usermac_override": basetypes.BoolType{},
			"created_time":           basetypes.Float64Type{},
			"egress_vlan_names": basetypes.ListType{
				ElemType: types.StringType,
			},
			"gbp_tag":       basetypes.Int64Type{},
			"id":            basetypes.StringType{},
			"match":         basetypes.StringType{},
			"match_all":     basetypes.BoolType{},
			"modified_time": basetypes.Float64Type{},
			"name":          basetypes.StringType{},
			"org_id":        basetypes.StringType{},
			"radius_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"radius_group": basetypes.StringType{},
			"radius_vendor_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"session_timeout": basetypes.Int64Type{},
			"type":            basetypes.StringType{},
			"username_attr":   basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vlan": basetypes.StringType{},
		}), diags
	}

	valuesVal, d := types.ListValue(types.StringType, v.Values.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allow_usermac_override": basetypes.BoolType{},
			"created_time":           basetypes.Float64Type{},
			"egress_vlan_names": basetypes.ListType{
				ElemType: types.StringType,
			},
			"gbp_tag":       basetypes.Int64Type{},
			"id":            basetypes.StringType{},
			"match":         basetypes.StringType{},
			"match_all":     basetypes.BoolType{},
			"modified_time": basetypes.Float64Type{},
			"name":          basetypes.StringType{},
			"org_id":        basetypes.StringType{},
			"radius_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"radius_group": basetypes.StringType{},
			"radius_vendor_attrs": basetypes.ListType{
				ElemType: types.StringType,
			},
			"session_timeout": basetypes.Int64Type{},
			"type":            basetypes.StringType{},
			"username_attr":   basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vlan": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"allow_usermac_override": basetypes.BoolType{},
		"created_time":           basetypes.Float64Type{},
		"egress_vlan_names": basetypes.ListType{
			ElemType: types.StringType,
		},
		"gbp_tag":       basetypes.Int64Type{},
		"id":            basetypes.StringType{},
		"match":         basetypes.StringType{},
		"match_all":     basetypes.BoolType{},
		"modified_time": basetypes.Float64Type{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"radius_attrs": basetypes.ListType{
			ElemType: types.StringType,
		},
		"radius_group": basetypes.StringType{},
		"radius_vendor_attrs": basetypes.ListType{
			ElemType: types.StringType,
		},
		"session_timeout": basetypes.Int64Type{},
		"type":            basetypes.StringType{},
		"username_attr":   basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
		"vlan": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allow_usermac_override": v.AllowUsermacOverride,
			"created_time":           v.CreatedTime,
			"egress_vlan_names":      egressVlanNamesVal,
			"gbp_tag":                v.GbpTag,
			"id":                     v.Id,
			"match":                  v.Match,
			"match_all":              v.MatchAll,
			"modified_time":          v.ModifiedTime,
			"name":                   v.Name,
			"org_id":                 v.OrgId,
			"radius_attrs":           radiusAttrsVal,
			"radius_group":           v.RadiusGroup,
			"radius_vendor_attrs":    radiusVendorAttrsVal,
			"session_timeout":        v.SessionTimeout,
			"type":                   v.OrgNactagsType,
			"username_attr":          v.UsernameAttr,
			"values":                 valuesVal,
			"vlan":                   v.Vlan,
		})

	return objVal, diags
}

func (v OrgNactagsValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgNactagsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowUsermacOverride.Equal(other.AllowUsermacOverride) {
		return false
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.EgressVlanNames.Equal(other.EgressVlanNames) {
		return false
	}

	if !v.GbpTag.Equal(other.GbpTag) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Match.Equal(other.Match) {
		return false
	}

	if !v.MatchAll.Equal(other.MatchAll) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.RadiusAttrs.Equal(other.RadiusAttrs) {
		return false
	}

	if !v.RadiusGroup.Equal(other.RadiusGroup) {
		return false
	}

	if !v.RadiusVendorAttrs.Equal(other.RadiusVendorAttrs) {
		return false
	}

	if !v.SessionTimeout.Equal(other.SessionTimeout) {
		return false
	}

	if !v.OrgNactagsType.Equal(other.OrgNactagsType) {
		return false
	}

	if !v.UsernameAttr.Equal(other.UsernameAttr) {
		return false
	}

	if !v.Values.Equal(other.Values) {
		return false
	}

	if !v.Vlan.Equal(other.Vlan) {
		return false
	}

	return true
}

func (v OrgNactagsValue) Type(ctx context.Context) attr.Type {
	return OrgNactagsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgNactagsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allow_usermac_override": basetypes.BoolType{},
		"created_time":           basetypes.Float64Type{},
		"egress_vlan_names": basetypes.ListType{
			ElemType: types.StringType,
		},
		"gbp_tag":       basetypes.Int64Type{},
		"id":            basetypes.StringType{},
		"match":         basetypes.StringType{},
		"match_all":     basetypes.BoolType{},
		"modified_time": basetypes.Float64Type{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"radius_attrs": basetypes.ListType{
			ElemType: types.StringType,
		},
		"radius_group": basetypes.StringType{},
		"radius_vendor_attrs": basetypes.ListType{
			ElemType: types.StringType,
		},
		"session_timeout": basetypes.Int64Type{},
		"type":            basetypes.StringType{},
		"username_attr":   basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
		"vlan": basetypes.StringType{},
	}
}
