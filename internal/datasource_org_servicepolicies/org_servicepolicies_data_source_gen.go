// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_servicepolicies

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgServicepoliciesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"org_servicepolicies": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"aamw": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"aamwprofile_id": schema.StringAttribute{
									Computed:            true,
									Description:         "org-level Advanced Advance Anti Malware Profile (SkyAtp) Profile can be used, this takes precedence over 'profile'",
									MarkdownDescription: "org-level Advanced Advance Anti Malware Profile (SkyAtp) Profile can be used, this takes precedence over 'profile'",
								},
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
								"profile": schema.StringAttribute{
									Computed:            true,
									Description:         "enum: `docsonly`, `executables`, `standard`",
									MarkdownDescription: "enum: `docsonly`, `executables`, `standard`",
								},
							},
							CustomType: AamwType{
								ObjectType: types.ObjectType{
									AttrTypes: AamwValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "For SRX Only",
							MarkdownDescription: "For SRX Only",
						},
						"action": schema.StringAttribute{
							Computed:            true,
							Description:         "enum: `allow`, `deny`",
							MarkdownDescription: "enum: `allow`, `deny`",
						},
						"antivirus": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"avprofile_id": schema.StringAttribute{
									Computed:            true,
									Description:         "org-level AV Profile can be used, this takes precedence over 'profile'",
									MarkdownDescription: "org-level AV Profile can be used, this takes precedence over 'profile'",
								},
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
								"profile": schema.StringAttribute{
									Computed:            true,
									Description:         "Default / noftp / httponly / or keys from av_profiles",
									MarkdownDescription: "Default / noftp / httponly / or keys from av_profiles",
								},
							},
							CustomType: AntivirusType{
								ObjectType: types.ObjectType{
									AttrTypes: AntivirusValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "For SRX-only",
							MarkdownDescription: "For SRX-only",
						},
						"appqoe": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
							},
							CustomType: AppqoeType{
								ObjectType: types.ObjectType{
									AttrTypes: AppqoeValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "For SRX Only",
							MarkdownDescription: "For SRX Only",
						},
						"created_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been created, in epoch",
							MarkdownDescription: "When the object has been created, in epoch",
						},
						"ewf": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"alert_only": schema.BoolAttribute{
										Computed: true,
									},
									"block_message": schema.StringAttribute{
										Computed: true,
									},
									"enabled": schema.BoolAttribute{
										Computed: true,
									},
									"profile": schema.StringAttribute{
										Computed:            true,
										Description:         "enum: `critical`, `standard`, `strict`",
										MarkdownDescription: "enum: `critical`, `standard`, `strict`",
									},
								},
								CustomType: EwfType{
									ObjectType: types.ObjectType{
										AttrTypes: EwfValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique ID of the object instance in the Mist Organization",
							MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
						},
						"idp": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"alert_only": schema.BoolAttribute{
									Computed: true,
								},
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
								"idpprofile_id": schema.StringAttribute{
									Computed:            true,
									Description:         "org_level IDP Profile can be used, this takes precedence over `profile`",
									MarkdownDescription: "org_level IDP Profile can be used, this takes precedence over `profile`",
								},
								"profile": schema.StringAttribute{
									Computed:            true,
									Description:         "enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles",
									MarkdownDescription: "enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles",
								},
							},
							CustomType: IdpType{
								ObjectType: types.ObjectType{
									AttrTypes: IdpValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"local_routing": schema.BoolAttribute{
							Computed:            true,
							Description:         "access within the same VRF",
							MarkdownDescription: "access within the same VRF",
						},
						"modified_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been modified for the last time, in epoch",
							MarkdownDescription: "When the object has been modified for the last time, in epoch",
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"path_preference": schema.StringAttribute{
							Computed:            true,
							Description:         "By default, we derive all paths available and use them, optionally, you can customize by using `path_preference`",
							MarkdownDescription: "By default, we derive all paths available and use them, optionally, you can customize by using `path_preference`",
						},
						"services": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"ssl_proxy": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"ciphers_category": schema.StringAttribute{
									Computed:            true,
									Description:         "enum: `medium`, `strong`, `weak`",
									MarkdownDescription: "enum: `medium`, `strong`, `weak`",
								},
								"enabled": schema.BoolAttribute{
									Computed: true,
								},
							},
							CustomType: SslProxyType{
								ObjectType: types.ObjectType{
									AttrTypes: SslProxyValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "For SRX-only",
							MarkdownDescription: "For SRX-only",
						},
						"tenants": schema.ListAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
					},
					CustomType: OrgServicepoliciesType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgServicepoliciesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type OrgServicepoliciesModel struct {
	OrgId              types.String `tfsdk:"org_id"`
	OrgServicepolicies types.Set    `tfsdk:"org_servicepolicies"`
}

var _ basetypes.ObjectTypable = OrgServicepoliciesType{}

type OrgServicepoliciesType struct {
	basetypes.ObjectType
}

func (t OrgServicepoliciesType) Equal(o attr.Type) bool {
	other, ok := o.(OrgServicepoliciesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgServicepoliciesType) String() string {
	return "OrgServicepoliciesType"
}

func (t OrgServicepoliciesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aamwAttribute, ok := attributes["aamw"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aamw is missing from object`)

		return nil, diags
	}

	aamwVal, ok := aamwAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aamw expected to be basetypes.ObjectValue, was: %T`, aamwAttribute))
	}

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return nil, diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	antivirusAttribute, ok := attributes["antivirus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`antivirus is missing from object`)

		return nil, diags
	}

	antivirusVal, ok := antivirusAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`antivirus expected to be basetypes.ObjectValue, was: %T`, antivirusAttribute))
	}

	appqoeAttribute, ok := attributes["appqoe"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`appqoe is missing from object`)

		return nil, diags
	}

	appqoeVal, ok := appqoeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`appqoe expected to be basetypes.ObjectValue, was: %T`, appqoeAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	ewfAttribute, ok := attributes["ewf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ewf is missing from object`)

		return nil, diags
	}

	ewfVal, ok := ewfAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ewf expected to be basetypes.ListValue, was: %T`, ewfAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	idpAttribute, ok := attributes["idp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`idp is missing from object`)

		return nil, diags
	}

	idpVal, ok := idpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`idp expected to be basetypes.ObjectValue, was: %T`, idpAttribute))
	}

	localRoutingAttribute, ok := attributes["local_routing"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`local_routing is missing from object`)

		return nil, diags
	}

	localRoutingVal, ok := localRoutingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`local_routing expected to be basetypes.BoolValue, was: %T`, localRoutingAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	pathPreferenceAttribute, ok := attributes["path_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path_preference is missing from object`)

		return nil, diags
	}

	pathPreferenceVal, ok := pathPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path_preference expected to be basetypes.StringValue, was: %T`, pathPreferenceAttribute))
	}

	servicesAttribute, ok := attributes["services"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`services is missing from object`)

		return nil, diags
	}

	servicesVal, ok := servicesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`services expected to be basetypes.ListValue, was: %T`, servicesAttribute))
	}

	sslProxyAttribute, ok := attributes["ssl_proxy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssl_proxy is missing from object`)

		return nil, diags
	}

	sslProxyVal, ok := sslProxyAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssl_proxy expected to be basetypes.ObjectValue, was: %T`, sslProxyAttribute))
	}

	tenantsAttribute, ok := attributes["tenants"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenants is missing from object`)

		return nil, diags
	}

	tenantsVal, ok := tenantsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenants expected to be basetypes.ListValue, was: %T`, tenantsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgServicepoliciesValue{
		Aamw:           aamwVal,
		Action:         actionVal,
		Antivirus:      antivirusVal,
		Appqoe:         appqoeVal,
		CreatedTime:    createdTimeVal,
		Ewf:            ewfVal,
		Id:             idVal,
		Idp:            idpVal,
		LocalRouting:   localRoutingVal,
		ModifiedTime:   modifiedTimeVal,
		Name:           nameVal,
		OrgId:          orgIdVal,
		PathPreference: pathPreferenceVal,
		Services:       servicesVal,
		SslProxy:       sslProxyVal,
		Tenants:        tenantsVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewOrgServicepoliciesValueNull() OrgServicepoliciesValue {
	return OrgServicepoliciesValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgServicepoliciesValueUnknown() OrgServicepoliciesValue {
	return OrgServicepoliciesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgServicepoliciesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgServicepoliciesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgServicepoliciesValue Attribute Value",
				"While creating a OrgServicepoliciesValue value, a missing attribute value was detected. "+
					"A OrgServicepoliciesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgServicepoliciesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgServicepoliciesValue Attribute Type",
				"While creating a OrgServicepoliciesValue value, an invalid attribute value was detected. "+
					"A OrgServicepoliciesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgServicepoliciesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgServicepoliciesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgServicepoliciesValue Attribute Value",
				"While creating a OrgServicepoliciesValue value, an extra attribute value was detected. "+
					"A OrgServicepoliciesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgServicepoliciesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgServicepoliciesValueUnknown(), diags
	}

	aamwAttribute, ok := attributes["aamw"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aamw is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	aamwVal, ok := aamwAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aamw expected to be basetypes.ObjectValue, was: %T`, aamwAttribute))
	}

	actionAttribute, ok := attributes["action"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`action is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	actionVal, ok := actionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`action expected to be basetypes.StringValue, was: %T`, actionAttribute))
	}

	antivirusAttribute, ok := attributes["antivirus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`antivirus is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	antivirusVal, ok := antivirusAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`antivirus expected to be basetypes.ObjectValue, was: %T`, antivirusAttribute))
	}

	appqoeAttribute, ok := attributes["appqoe"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`appqoe is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	appqoeVal, ok := appqoeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`appqoe expected to be basetypes.ObjectValue, was: %T`, appqoeAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	ewfAttribute, ok := attributes["ewf"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ewf is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	ewfVal, ok := ewfAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ewf expected to be basetypes.ListValue, was: %T`, ewfAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	idpAttribute, ok := attributes["idp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`idp is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	idpVal, ok := idpAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`idp expected to be basetypes.ObjectValue, was: %T`, idpAttribute))
	}

	localRoutingAttribute, ok := attributes["local_routing"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`local_routing is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	localRoutingVal, ok := localRoutingAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`local_routing expected to be basetypes.BoolValue, was: %T`, localRoutingAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	pathPreferenceAttribute, ok := attributes["path_preference"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path_preference is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	pathPreferenceVal, ok := pathPreferenceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path_preference expected to be basetypes.StringValue, was: %T`, pathPreferenceAttribute))
	}

	servicesAttribute, ok := attributes["services"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`services is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	servicesVal, ok := servicesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`services expected to be basetypes.ListValue, was: %T`, servicesAttribute))
	}

	sslProxyAttribute, ok := attributes["ssl_proxy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ssl_proxy is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	sslProxyVal, ok := sslProxyAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ssl_proxy expected to be basetypes.ObjectValue, was: %T`, sslProxyAttribute))
	}

	tenantsAttribute, ok := attributes["tenants"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenants is missing from object`)

		return NewOrgServicepoliciesValueUnknown(), diags
	}

	tenantsVal, ok := tenantsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenants expected to be basetypes.ListValue, was: %T`, tenantsAttribute))
	}

	if diags.HasError() {
		return NewOrgServicepoliciesValueUnknown(), diags
	}

	return OrgServicepoliciesValue{
		Aamw:           aamwVal,
		Action:         actionVal,
		Antivirus:      antivirusVal,
		Appqoe:         appqoeVal,
		CreatedTime:    createdTimeVal,
		Ewf:            ewfVal,
		Id:             idVal,
		Idp:            idpVal,
		LocalRouting:   localRoutingVal,
		ModifiedTime:   modifiedTimeVal,
		Name:           nameVal,
		OrgId:          orgIdVal,
		PathPreference: pathPreferenceVal,
		Services:       servicesVal,
		SslProxy:       sslProxyVal,
		Tenants:        tenantsVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewOrgServicepoliciesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgServicepoliciesValue {
	object, diags := NewOrgServicepoliciesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgServicepoliciesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgServicepoliciesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgServicepoliciesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgServicepoliciesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgServicepoliciesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgServicepoliciesValueMust(OrgServicepoliciesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgServicepoliciesType) ValueType(ctx context.Context) attr.Value {
	return OrgServicepoliciesValue{}
}

var _ basetypes.ObjectValuable = OrgServicepoliciesValue{}

type OrgServicepoliciesValue struct {
	Aamw           basetypes.ObjectValue  `tfsdk:"aamw"`
	Action         basetypes.StringValue  `tfsdk:"action"`
	Antivirus      basetypes.ObjectValue  `tfsdk:"antivirus"`
	Appqoe         basetypes.ObjectValue  `tfsdk:"appqoe"`
	CreatedTime    basetypes.Float64Value `tfsdk:"created_time"`
	Ewf            basetypes.ListValue    `tfsdk:"ewf"`
	Id             basetypes.StringValue  `tfsdk:"id"`
	Idp            basetypes.ObjectValue  `tfsdk:"idp"`
	LocalRouting   basetypes.BoolValue    `tfsdk:"local_routing"`
	ModifiedTime   basetypes.Float64Value `tfsdk:"modified_time"`
	Name           basetypes.StringValue  `tfsdk:"name"`
	OrgId          basetypes.StringValue  `tfsdk:"org_id"`
	PathPreference basetypes.StringValue  `tfsdk:"path_preference"`
	Services       basetypes.ListValue    `tfsdk:"services"`
	SslProxy       basetypes.ObjectValue  `tfsdk:"ssl_proxy"`
	Tenants        basetypes.ListValue    `tfsdk:"tenants"`
	state          attr.ValueState
}

func (v OrgServicepoliciesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 16)

	var val tftypes.Value
	var err error

	attrTypes["aamw"] = basetypes.ObjectType{
		AttrTypes: AamwValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["action"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["antivirus"] = basetypes.ObjectType{
		AttrTypes: AntivirusValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["appqoe"] = basetypes.ObjectType{
		AttrTypes: AppqoeValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["created_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["ewf"] = basetypes.ListType{
		ElemType: EwfValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["idp"] = basetypes.ObjectType{
		AttrTypes: IdpValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["local_routing"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["path_preference"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["services"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["ssl_proxy"] = basetypes.ObjectType{
		AttrTypes: SslProxyValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["tenants"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 16)

		val, err = v.Aamw.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["aamw"] = val

		val, err = v.Action.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["action"] = val

		val, err = v.Antivirus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["antivirus"] = val

		val, err = v.Appqoe.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["appqoe"] = val

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.Ewf.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ewf"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Idp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["idp"] = val

		val, err = v.LocalRouting.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["local_routing"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.PathPreference.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path_preference"] = val

		val, err = v.Services.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["services"] = val

		val, err = v.SslProxy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ssl_proxy"] = val

		val, err = v.Tenants.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tenants"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgServicepoliciesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgServicepoliciesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgServicepoliciesValue) String() string {
	return "OrgServicepoliciesValue"
}

func (v OrgServicepoliciesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var aamw basetypes.ObjectValue

	if v.Aamw.IsNull() {
		aamw = types.ObjectNull(
			AamwValue{}.AttributeTypes(ctx),
		)
	}

	if v.Aamw.IsUnknown() {
		aamw = types.ObjectUnknown(
			AamwValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Aamw.IsNull() && !v.Aamw.IsUnknown() {
		aamw = types.ObjectValueMust(
			AamwValue{}.AttributeTypes(ctx),
			v.Aamw.Attributes(),
		)
	}

	var antivirus basetypes.ObjectValue

	if v.Antivirus.IsNull() {
		antivirus = types.ObjectNull(
			AntivirusValue{}.AttributeTypes(ctx),
		)
	}

	if v.Antivirus.IsUnknown() {
		antivirus = types.ObjectUnknown(
			AntivirusValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Antivirus.IsNull() && !v.Antivirus.IsUnknown() {
		antivirus = types.ObjectValueMust(
			AntivirusValue{}.AttributeTypes(ctx),
			v.Antivirus.Attributes(),
		)
	}

	var appqoe basetypes.ObjectValue

	if v.Appqoe.IsNull() {
		appqoe = types.ObjectNull(
			AppqoeValue{}.AttributeTypes(ctx),
		)
	}

	if v.Appqoe.IsUnknown() {
		appqoe = types.ObjectUnknown(
			AppqoeValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Appqoe.IsNull() && !v.Appqoe.IsUnknown() {
		appqoe = types.ObjectValueMust(
			AppqoeValue{}.AttributeTypes(ctx),
			v.Appqoe.Attributes(),
		)
	}

	ewf := types.ListValueMust(
		EwfType{
			basetypes.ObjectType{
				AttrTypes: EwfValue{}.AttributeTypes(ctx),
			},
		},
		v.Ewf.Elements(),
	)

	if v.Ewf.IsNull() {
		ewf = types.ListNull(
			EwfType{
				basetypes.ObjectType{
					AttrTypes: EwfValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Ewf.IsUnknown() {
		ewf = types.ListUnknown(
			EwfType{
				basetypes.ObjectType{
					AttrTypes: EwfValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var idp basetypes.ObjectValue

	if v.Idp.IsNull() {
		idp = types.ObjectNull(
			IdpValue{}.AttributeTypes(ctx),
		)
	}

	if v.Idp.IsUnknown() {
		idp = types.ObjectUnknown(
			IdpValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Idp.IsNull() && !v.Idp.IsUnknown() {
		idp = types.ObjectValueMust(
			IdpValue{}.AttributeTypes(ctx),
			v.Idp.Attributes(),
		)
	}

	var sslProxy basetypes.ObjectValue

	if v.SslProxy.IsNull() {
		sslProxy = types.ObjectNull(
			SslProxyValue{}.AttributeTypes(ctx),
		)
	}

	if v.SslProxy.IsUnknown() {
		sslProxy = types.ObjectUnknown(
			SslProxyValue{}.AttributeTypes(ctx),
		)
	}

	if !v.SslProxy.IsNull() && !v.SslProxy.IsUnknown() {
		sslProxy = types.ObjectValueMust(
			SslProxyValue{}.AttributeTypes(ctx),
			v.SslProxy.Attributes(),
		)
	}

	servicesVal, d := types.ListValue(types.StringType, v.Services.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"aamw": basetypes.ObjectType{
				AttrTypes: AamwValue{}.AttributeTypes(ctx),
			},
			"action": basetypes.StringType{},
			"antivirus": basetypes.ObjectType{
				AttrTypes: AntivirusValue{}.AttributeTypes(ctx),
			},
			"appqoe": basetypes.ObjectType{
				AttrTypes: AppqoeValue{}.AttributeTypes(ctx),
			},
			"created_time": basetypes.Float64Type{},
			"ewf": basetypes.ListType{
				ElemType: EwfValue{}.Type(ctx),
			},
			"id": basetypes.StringType{},
			"idp": basetypes.ObjectType{
				AttrTypes: IdpValue{}.AttributeTypes(ctx),
			},
			"local_routing":   basetypes.BoolType{},
			"modified_time":   basetypes.Float64Type{},
			"name":            basetypes.StringType{},
			"org_id":          basetypes.StringType{},
			"path_preference": basetypes.StringType{},
			"services": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ssl_proxy": basetypes.ObjectType{
				AttrTypes: SslProxyValue{}.AttributeTypes(ctx),
			},
			"tenants": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	tenantsVal, d := types.ListValue(types.StringType, v.Tenants.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"aamw": basetypes.ObjectType{
				AttrTypes: AamwValue{}.AttributeTypes(ctx),
			},
			"action": basetypes.StringType{},
			"antivirus": basetypes.ObjectType{
				AttrTypes: AntivirusValue{}.AttributeTypes(ctx),
			},
			"appqoe": basetypes.ObjectType{
				AttrTypes: AppqoeValue{}.AttributeTypes(ctx),
			},
			"created_time": basetypes.Float64Type{},
			"ewf": basetypes.ListType{
				ElemType: EwfValue{}.Type(ctx),
			},
			"id": basetypes.StringType{},
			"idp": basetypes.ObjectType{
				AttrTypes: IdpValue{}.AttributeTypes(ctx),
			},
			"local_routing":   basetypes.BoolType{},
			"modified_time":   basetypes.Float64Type{},
			"name":            basetypes.StringType{},
			"org_id":          basetypes.StringType{},
			"path_preference": basetypes.StringType{},
			"services": basetypes.ListType{
				ElemType: types.StringType,
			},
			"ssl_proxy": basetypes.ObjectType{
				AttrTypes: SslProxyValue{}.AttributeTypes(ctx),
			},
			"tenants": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"aamw": basetypes.ObjectType{
			AttrTypes: AamwValue{}.AttributeTypes(ctx),
		},
		"action": basetypes.StringType{},
		"antivirus": basetypes.ObjectType{
			AttrTypes: AntivirusValue{}.AttributeTypes(ctx),
		},
		"appqoe": basetypes.ObjectType{
			AttrTypes: AppqoeValue{}.AttributeTypes(ctx),
		},
		"created_time": basetypes.Float64Type{},
		"ewf": basetypes.ListType{
			ElemType: EwfValue{}.Type(ctx),
		},
		"id": basetypes.StringType{},
		"idp": basetypes.ObjectType{
			AttrTypes: IdpValue{}.AttributeTypes(ctx),
		},
		"local_routing":   basetypes.BoolType{},
		"modified_time":   basetypes.Float64Type{},
		"name":            basetypes.StringType{},
		"org_id":          basetypes.StringType{},
		"path_preference": basetypes.StringType{},
		"services": basetypes.ListType{
			ElemType: types.StringType,
		},
		"ssl_proxy": basetypes.ObjectType{
			AttrTypes: SslProxyValue{}.AttributeTypes(ctx),
		},
		"tenants": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"aamw":            aamw,
			"action":          v.Action,
			"antivirus":       antivirus,
			"appqoe":          appqoe,
			"created_time":    v.CreatedTime,
			"ewf":             ewf,
			"id":              v.Id,
			"idp":             idp,
			"local_routing":   v.LocalRouting,
			"modified_time":   v.ModifiedTime,
			"name":            v.Name,
			"org_id":          v.OrgId,
			"path_preference": v.PathPreference,
			"services":        servicesVal,
			"ssl_proxy":       sslProxy,
			"tenants":         tenantsVal,
		})

	return objVal, diags
}

func (v OrgServicepoliciesValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgServicepoliciesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Aamw.Equal(other.Aamw) {
		return false
	}

	if !v.Action.Equal(other.Action) {
		return false
	}

	if !v.Antivirus.Equal(other.Antivirus) {
		return false
	}

	if !v.Appqoe.Equal(other.Appqoe) {
		return false
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.Ewf.Equal(other.Ewf) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Idp.Equal(other.Idp) {
		return false
	}

	if !v.LocalRouting.Equal(other.LocalRouting) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.PathPreference.Equal(other.PathPreference) {
		return false
	}

	if !v.Services.Equal(other.Services) {
		return false
	}

	if !v.SslProxy.Equal(other.SslProxy) {
		return false
	}

	if !v.Tenants.Equal(other.Tenants) {
		return false
	}

	return true
}

func (v OrgServicepoliciesValue) Type(ctx context.Context) attr.Type {
	return OrgServicepoliciesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgServicepoliciesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"aamw": basetypes.ObjectType{
			AttrTypes: AamwValue{}.AttributeTypes(ctx),
		},
		"action": basetypes.StringType{},
		"antivirus": basetypes.ObjectType{
			AttrTypes: AntivirusValue{}.AttributeTypes(ctx),
		},
		"appqoe": basetypes.ObjectType{
			AttrTypes: AppqoeValue{}.AttributeTypes(ctx),
		},
		"created_time": basetypes.Float64Type{},
		"ewf": basetypes.ListType{
			ElemType: EwfValue{}.Type(ctx),
		},
		"id": basetypes.StringType{},
		"idp": basetypes.ObjectType{
			AttrTypes: IdpValue{}.AttributeTypes(ctx),
		},
		"local_routing":   basetypes.BoolType{},
		"modified_time":   basetypes.Float64Type{},
		"name":            basetypes.StringType{},
		"org_id":          basetypes.StringType{},
		"path_preference": basetypes.StringType{},
		"services": basetypes.ListType{
			ElemType: types.StringType,
		},
		"ssl_proxy": basetypes.ObjectType{
			AttrTypes: SslProxyValue{}.AttributeTypes(ctx),
		},
		"tenants": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = AamwType{}

type AamwType struct {
	basetypes.ObjectType
}

func (t AamwType) Equal(o attr.Type) bool {
	other, ok := o.(AamwType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AamwType) String() string {
	return "AamwType"
}

func (t AamwType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aamwprofileIdAttribute, ok := attributes["aamwprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aamwprofile_id is missing from object`)

		return nil, diags
	}

	aamwprofileIdVal, ok := aamwprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aamwprofile_id expected to be basetypes.StringValue, was: %T`, aamwprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AamwValue{
		AamwprofileId: aamwprofileIdVal,
		Enabled:       enabledVal,
		Profile:       profileVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAamwValueNull() AamwValue {
	return AamwValue{
		state: attr.ValueStateNull,
	}
}

func NewAamwValueUnknown() AamwValue {
	return AamwValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAamwValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AamwValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AamwValue Attribute Value",
				"While creating a AamwValue value, a missing attribute value was detected. "+
					"A AamwValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AamwValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AamwValue Attribute Type",
				"While creating a AamwValue value, an invalid attribute value was detected. "+
					"A AamwValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AamwValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AamwValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AamwValue Attribute Value",
				"While creating a AamwValue value, an extra attribute value was detected. "+
					"A AamwValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AamwValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAamwValueUnknown(), diags
	}

	aamwprofileIdAttribute, ok := attributes["aamwprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aamwprofile_id is missing from object`)

		return NewAamwValueUnknown(), diags
	}

	aamwprofileIdVal, ok := aamwprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aamwprofile_id expected to be basetypes.StringValue, was: %T`, aamwprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewAamwValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewAamwValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewAamwValueUnknown(), diags
	}

	return AamwValue{
		AamwprofileId: aamwprofileIdVal,
		Enabled:       enabledVal,
		Profile:       profileVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAamwValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AamwValue {
	object, diags := NewAamwValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAamwValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AamwType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAamwValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAamwValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAamwValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAamwValueMust(AamwValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AamwType) ValueType(ctx context.Context) attr.Value {
	return AamwValue{}
}

var _ basetypes.ObjectValuable = AamwValue{}

type AamwValue struct {
	AamwprofileId basetypes.StringValue `tfsdk:"aamwprofile_id"`
	Enabled       basetypes.BoolValue   `tfsdk:"enabled"`
	Profile       basetypes.StringValue `tfsdk:"profile"`
	state         attr.ValueState
}

func (v AamwValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["aamwprofile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AamwprofileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["aamwprofile_id"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AamwValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AamwValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AamwValue) String() string {
	return "AamwValue"
}

func (v AamwValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"aamwprofile_id": basetypes.StringType{},
		"enabled":        basetypes.BoolType{},
		"profile":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"aamwprofile_id": v.AamwprofileId,
			"enabled":        v.Enabled,
			"profile":        v.Profile,
		})

	return objVal, diags
}

func (v AamwValue) Equal(o attr.Value) bool {
	other, ok := o.(AamwValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AamwprofileId.Equal(other.AamwprofileId) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v AamwValue) Type(ctx context.Context) attr.Type {
	return AamwType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AamwValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"aamwprofile_id": basetypes.StringType{},
		"enabled":        basetypes.BoolType{},
		"profile":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AntivirusType{}

type AntivirusType struct {
	basetypes.ObjectType
}

func (t AntivirusType) Equal(o attr.Type) bool {
	other, ok := o.(AntivirusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AntivirusType) String() string {
	return "AntivirusType"
}

func (t AntivirusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	avprofileIdAttribute, ok := attributes["avprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`avprofile_id is missing from object`)

		return nil, diags
	}

	avprofileIdVal, ok := avprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`avprofile_id expected to be basetypes.StringValue, was: %T`, avprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AntivirusValue{
		AvprofileId: avprofileIdVal,
		Enabled:     enabledVal,
		Profile:     profileVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewAntivirusValueNull() AntivirusValue {
	return AntivirusValue{
		state: attr.ValueStateNull,
	}
}

func NewAntivirusValueUnknown() AntivirusValue {
	return AntivirusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAntivirusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AntivirusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AntivirusValue Attribute Value",
				"While creating a AntivirusValue value, a missing attribute value was detected. "+
					"A AntivirusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AntivirusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AntivirusValue Attribute Type",
				"While creating a AntivirusValue value, an invalid attribute value was detected. "+
					"A AntivirusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AntivirusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AntivirusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AntivirusValue Attribute Value",
				"While creating a AntivirusValue value, an extra attribute value was detected. "+
					"A AntivirusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AntivirusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAntivirusValueUnknown(), diags
	}

	avprofileIdAttribute, ok := attributes["avprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`avprofile_id is missing from object`)

		return NewAntivirusValueUnknown(), diags
	}

	avprofileIdVal, ok := avprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`avprofile_id expected to be basetypes.StringValue, was: %T`, avprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewAntivirusValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewAntivirusValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewAntivirusValueUnknown(), diags
	}

	return AntivirusValue{
		AvprofileId: avprofileIdVal,
		Enabled:     enabledVal,
		Profile:     profileVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewAntivirusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AntivirusValue {
	object, diags := NewAntivirusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAntivirusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AntivirusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAntivirusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAntivirusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAntivirusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAntivirusValueMust(AntivirusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AntivirusType) ValueType(ctx context.Context) attr.Value {
	return AntivirusValue{}
}

var _ basetypes.ObjectValuable = AntivirusValue{}

type AntivirusValue struct {
	AvprofileId basetypes.StringValue `tfsdk:"avprofile_id"`
	Enabled     basetypes.BoolValue   `tfsdk:"enabled"`
	Profile     basetypes.StringValue `tfsdk:"profile"`
	state       attr.ValueState
}

func (v AntivirusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["avprofile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AvprofileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["avprofile_id"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AntivirusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AntivirusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AntivirusValue) String() string {
	return "AntivirusValue"
}

func (v AntivirusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"avprofile_id": basetypes.StringType{},
		"enabled":      basetypes.BoolType{},
		"profile":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"avprofile_id": v.AvprofileId,
			"enabled":      v.Enabled,
			"profile":      v.Profile,
		})

	return objVal, diags
}

func (v AntivirusValue) Equal(o attr.Value) bool {
	other, ok := o.(AntivirusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AvprofileId.Equal(other.AvprofileId) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v AntivirusValue) Type(ctx context.Context) attr.Type {
	return AntivirusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AntivirusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"avprofile_id": basetypes.StringType{},
		"enabled":      basetypes.BoolType{},
		"profile":      basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AppqoeType{}

type AppqoeType struct {
	basetypes.ObjectType
}

func (t AppqoeType) Equal(o attr.Type) bool {
	other, ok := o.(AppqoeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AppqoeType) String() string {
	return "AppqoeType"
}

func (t AppqoeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AppqoeValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAppqoeValueNull() AppqoeValue {
	return AppqoeValue{
		state: attr.ValueStateNull,
	}
}

func NewAppqoeValueUnknown() AppqoeValue {
	return AppqoeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAppqoeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AppqoeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AppqoeValue Attribute Value",
				"While creating a AppqoeValue value, a missing attribute value was detected. "+
					"A AppqoeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppqoeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AppqoeValue Attribute Type",
				"While creating a AppqoeValue value, an invalid attribute value was detected. "+
					"A AppqoeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppqoeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AppqoeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AppqoeValue Attribute Value",
				"While creating a AppqoeValue value, an extra attribute value was detected. "+
					"A AppqoeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AppqoeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAppqoeValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewAppqoeValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewAppqoeValueUnknown(), diags
	}

	return AppqoeValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAppqoeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AppqoeValue {
	object, diags := NewAppqoeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAppqoeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AppqoeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAppqoeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAppqoeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAppqoeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAppqoeValueMust(AppqoeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AppqoeType) ValueType(ctx context.Context) attr.Value {
	return AppqoeValue{}
}

var _ basetypes.ObjectValuable = AppqoeValue{}

type AppqoeValue struct {
	Enabled basetypes.BoolValue `tfsdk:"enabled"`
	state   attr.ValueState
}

func (v AppqoeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AppqoeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AppqoeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AppqoeValue) String() string {
	return "AppqoeValue"
}

func (v AppqoeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled": v.Enabled,
		})

	return objVal, diags
}

func (v AppqoeValue) Equal(o attr.Value) bool {
	other, ok := o.(AppqoeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v AppqoeValue) Type(ctx context.Context) attr.Type {
	return AppqoeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AppqoeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = EwfType{}

type EwfType struct {
	basetypes.ObjectType
}

func (t EwfType) Equal(o attr.Type) bool {
	other, ok := o.(EwfType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EwfType) String() string {
	return "EwfType"
}

func (t EwfType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return nil, diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	blockMessageAttribute, ok := attributes["block_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`block_message is missing from object`)

		return nil, diags
	}

	blockMessageVal, ok := blockMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`block_message expected to be basetypes.StringValue, was: %T`, blockMessageAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EwfValue{
		AlertOnly:    alertOnlyVal,
		BlockMessage: blockMessageVal,
		Enabled:      enabledVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewEwfValueNull() EwfValue {
	return EwfValue{
		state: attr.ValueStateNull,
	}
}

func NewEwfValueUnknown() EwfValue {
	return EwfValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEwfValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EwfValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EwfValue Attribute Value",
				"While creating a EwfValue value, a missing attribute value was detected. "+
					"A EwfValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EwfValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EwfValue Attribute Type",
				"While creating a EwfValue value, an invalid attribute value was detected. "+
					"A EwfValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EwfValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EwfValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EwfValue Attribute Value",
				"While creating a EwfValue value, an extra attribute value was detected. "+
					"A EwfValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EwfValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEwfValueUnknown(), diags
	}

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	blockMessageAttribute, ok := attributes["block_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`block_message is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	blockMessageVal, ok := blockMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`block_message expected to be basetypes.StringValue, was: %T`, blockMessageAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewEwfValueUnknown(), diags
	}

	return EwfValue{
		AlertOnly:    alertOnlyVal,
		BlockMessage: blockMessageVal,
		Enabled:      enabledVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewEwfValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EwfValue {
	object, diags := NewEwfValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEwfValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EwfType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEwfValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEwfValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEwfValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEwfValueMust(EwfValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EwfType) ValueType(ctx context.Context) attr.Value {
	return EwfValue{}
}

var _ basetypes.ObjectValuable = EwfValue{}

type EwfValue struct {
	AlertOnly    basetypes.BoolValue   `tfsdk:"alert_only"`
	BlockMessage basetypes.StringValue `tfsdk:"block_message"`
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	Profile      basetypes.StringValue `tfsdk:"profile"`
	state        attr.ValueState
}

func (v EwfValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["alert_only"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["block_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AlertOnly.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alert_only"] = val

		val, err = v.BlockMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["block_message"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EwfValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EwfValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EwfValue) String() string {
	return "EwfValue"
}

func (v EwfValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"block_message": basetypes.StringType{},
		"enabled":       basetypes.BoolType{},
		"profile":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alert_only":    v.AlertOnly,
			"block_message": v.BlockMessage,
			"enabled":       v.Enabled,
			"profile":       v.Profile,
		})

	return objVal, diags
}

func (v EwfValue) Equal(o attr.Value) bool {
	other, ok := o.(EwfValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AlertOnly.Equal(other.AlertOnly) {
		return false
	}

	if !v.BlockMessage.Equal(other.BlockMessage) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v EwfValue) Type(ctx context.Context) attr.Type {
	return EwfType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EwfValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"block_message": basetypes.StringType{},
		"enabled":       basetypes.BoolType{},
		"profile":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = IdpType{}

type IdpType struct {
	basetypes.ObjectType
}

func (t IdpType) Equal(o attr.Type) bool {
	other, ok := o.(IdpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IdpType) String() string {
	return "IdpType"
}

func (t IdpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return nil, diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	idpprofileIdAttribute, ok := attributes["idpprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`idpprofile_id is missing from object`)

		return nil, diags
	}

	idpprofileIdVal, ok := idpprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`idpprofile_id expected to be basetypes.StringValue, was: %T`, idpprofileIdAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IdpValue{
		AlertOnly:    alertOnlyVal,
		Enabled:      enabledVal,
		IdpprofileId: idpprofileIdVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewIdpValueNull() IdpValue {
	return IdpValue{
		state: attr.ValueStateNull,
	}
}

func NewIdpValueUnknown() IdpValue {
	return IdpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIdpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IdpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IdpValue Attribute Value",
				"While creating a IdpValue value, a missing attribute value was detected. "+
					"A IdpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IdpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IdpValue Attribute Type",
				"While creating a IdpValue value, an invalid attribute value was detected. "+
					"A IdpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IdpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IdpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IdpValue Attribute Value",
				"While creating a IdpValue value, an extra attribute value was detected. "+
					"A IdpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IdpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIdpValueUnknown(), diags
	}

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	idpprofileIdAttribute, ok := attributes["idpprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`idpprofile_id is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	idpprofileIdVal, ok := idpprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`idpprofile_id expected to be basetypes.StringValue, was: %T`, idpprofileIdAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewIdpValueUnknown(), diags
	}

	return IdpValue{
		AlertOnly:    alertOnlyVal,
		Enabled:      enabledVal,
		IdpprofileId: idpprofileIdVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewIdpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IdpValue {
	object, diags := NewIdpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIdpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IdpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIdpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIdpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIdpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIdpValueMust(IdpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IdpType) ValueType(ctx context.Context) attr.Value {
	return IdpValue{}
}

var _ basetypes.ObjectValuable = IdpValue{}

type IdpValue struct {
	AlertOnly    basetypes.BoolValue   `tfsdk:"alert_only"`
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	IdpprofileId basetypes.StringValue `tfsdk:"idpprofile_id"`
	Profile      basetypes.StringValue `tfsdk:"profile"`
	state        attr.ValueState
}

func (v IdpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["alert_only"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["idpprofile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AlertOnly.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alert_only"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.IdpprofileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["idpprofile_id"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IdpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IdpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IdpValue) String() string {
	return "IdpValue"
}

func (v IdpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"enabled":       basetypes.BoolType{},
		"idpprofile_id": basetypes.StringType{},
		"profile":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alert_only":    v.AlertOnly,
			"enabled":       v.Enabled,
			"idpprofile_id": v.IdpprofileId,
			"profile":       v.Profile,
		})

	return objVal, diags
}

func (v IdpValue) Equal(o attr.Value) bool {
	other, ok := o.(IdpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AlertOnly.Equal(other.AlertOnly) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.IdpprofileId.Equal(other.IdpprofileId) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v IdpValue) Type(ctx context.Context) attr.Type {
	return IdpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IdpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"enabled":       basetypes.BoolType{},
		"idpprofile_id": basetypes.StringType{},
		"profile":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SslProxyType{}

type SslProxyType struct {
	basetypes.ObjectType
}

func (t SslProxyType) Equal(o attr.Type) bool {
	other, ok := o.(SslProxyType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SslProxyType) String() string {
	return "SslProxyType"
}

func (t SslProxyType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ciphersCategoryAttribute, ok := attributes["ciphers_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ciphers_category is missing from object`)

		return nil, diags
	}

	ciphersCategoryVal, ok := ciphersCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ciphers_category expected to be basetypes.StringValue, was: %T`, ciphersCategoryAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SslProxyValue{
		CiphersCategory: ciphersCategoryVal,
		Enabled:         enabledVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSslProxyValueNull() SslProxyValue {
	return SslProxyValue{
		state: attr.ValueStateNull,
	}
}

func NewSslProxyValueUnknown() SslProxyValue {
	return SslProxyValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSslProxyValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SslProxyValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SslProxyValue Attribute Value",
				"While creating a SslProxyValue value, a missing attribute value was detected. "+
					"A SslProxyValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SslProxyValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SslProxyValue Attribute Type",
				"While creating a SslProxyValue value, an invalid attribute value was detected. "+
					"A SslProxyValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SslProxyValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SslProxyValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SslProxyValue Attribute Value",
				"While creating a SslProxyValue value, an extra attribute value was detected. "+
					"A SslProxyValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SslProxyValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSslProxyValueUnknown(), diags
	}

	ciphersCategoryAttribute, ok := attributes["ciphers_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ciphers_category is missing from object`)

		return NewSslProxyValueUnknown(), diags
	}

	ciphersCategoryVal, ok := ciphersCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ciphers_category expected to be basetypes.StringValue, was: %T`, ciphersCategoryAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewSslProxyValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewSslProxyValueUnknown(), diags
	}

	return SslProxyValue{
		CiphersCategory: ciphersCategoryVal,
		Enabled:         enabledVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSslProxyValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SslProxyValue {
	object, diags := NewSslProxyValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSslProxyValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SslProxyType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSslProxyValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSslProxyValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSslProxyValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSslProxyValueMust(SslProxyValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SslProxyType) ValueType(ctx context.Context) attr.Value {
	return SslProxyValue{}
}

var _ basetypes.ObjectValuable = SslProxyValue{}

type SslProxyValue struct {
	CiphersCategory basetypes.StringValue `tfsdk:"ciphers_category"`
	Enabled         basetypes.BoolValue   `tfsdk:"enabled"`
	state           attr.ValueState
}

func (v SslProxyValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["ciphers_category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.CiphersCategory.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ciphers_category"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SslProxyValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SslProxyValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SslProxyValue) String() string {
	return "SslProxyValue"
}

func (v SslProxyValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"ciphers_category": basetypes.StringType{},
		"enabled":          basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ciphers_category": v.CiphersCategory,
			"enabled":          v.Enabled,
		})

	return objVal, diags
}

func (v SslProxyValue) Equal(o attr.Value) bool {
	other, ok := o.(SslProxyValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CiphersCategory.Equal(other.CiphersCategory) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v SslProxyValue) Type(ctx context.Context) attr.Type {
	return SslProxyType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SslProxyValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ciphers_category": basetypes.StringType{},
		"enabled":          basetypes.BoolType{},
	}
}
