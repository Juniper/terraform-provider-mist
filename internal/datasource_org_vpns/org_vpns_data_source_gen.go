// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_vpns

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgVpnsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"org_vpns": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_time": schema.NumberAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"modified_time": schema.NumberAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"paths": schema.MapNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"bfd_profile": schema.StringAttribute{
										Computed:            true,
										Description:         "enum: `broadband`, `lte`",
										MarkdownDescription: "enum: `broadband`, `lte`",
									},
									"ip": schema.StringAttribute{
										Computed:            true,
										Description:         "if different from the wan port",
										MarkdownDescription: "if different from the wan port",
									},
									"pod": schema.Int64Attribute{
										Computed: true,
									},
								},
								CustomType: PathsType{
									ObjectType: types.ObjectType{
										AttrTypes: PathsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed: true,
							Validators: []validator.Map{
								mapvalidator.SizeAtLeast(1),
							},
						},
					},
					CustomType: OrgVpnsType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgVpnsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type OrgVpnsModel struct {
	OrgId   types.String `tfsdk:"org_id"`
	OrgVpns types.Set    `tfsdk:"org_vpns"`
}

var _ basetypes.ObjectTypable = OrgVpnsType{}

type OrgVpnsType struct {
	basetypes.ObjectType
}

func (t OrgVpnsType) Equal(o attr.Type) bool {
	other, ok := o.(OrgVpnsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgVpnsType) String() string {
	return "OrgVpnsType"
}

func (t OrgVpnsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.NumberValue, was: %T`, createdTimeAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.NumberValue, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	pathsAttribute, ok := attributes["paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paths is missing from object`)

		return nil, diags
	}

	pathsVal, ok := pathsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paths expected to be basetypes.MapValue, was: %T`, pathsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgVpnsValue{
		CreatedTime:  createdTimeVal,
		Id:           idVal,
		ModifiedTime: modifiedTimeVal,
		Name:         nameVal,
		OrgId:        orgIdVal,
		Paths:        pathsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewOrgVpnsValueNull() OrgVpnsValue {
	return OrgVpnsValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgVpnsValueUnknown() OrgVpnsValue {
	return OrgVpnsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgVpnsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgVpnsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgVpnsValue Attribute Value",
				"While creating a OrgVpnsValue value, a missing attribute value was detected. "+
					"A OrgVpnsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgVpnsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgVpnsValue Attribute Type",
				"While creating a OrgVpnsValue value, an invalid attribute value was detected. "+
					"A OrgVpnsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgVpnsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgVpnsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgVpnsValue Attribute Value",
				"While creating a OrgVpnsValue value, an extra attribute value was detected. "+
					"A OrgVpnsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgVpnsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgVpnsValueUnknown(), diags
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgVpnsValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.NumberValue, was: %T`, createdTimeAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgVpnsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgVpnsValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.NumberValue, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgVpnsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgVpnsValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	pathsAttribute, ok := attributes["paths"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paths is missing from object`)

		return NewOrgVpnsValueUnknown(), diags
	}

	pathsVal, ok := pathsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paths expected to be basetypes.MapValue, was: %T`, pathsAttribute))
	}

	if diags.HasError() {
		return NewOrgVpnsValueUnknown(), diags
	}

	return OrgVpnsValue{
		CreatedTime:  createdTimeVal,
		Id:           idVal,
		ModifiedTime: modifiedTimeVal,
		Name:         nameVal,
		OrgId:        orgIdVal,
		Paths:        pathsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewOrgVpnsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgVpnsValue {
	object, diags := NewOrgVpnsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgVpnsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgVpnsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgVpnsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgVpnsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgVpnsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgVpnsValueMust(OrgVpnsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgVpnsType) ValueType(ctx context.Context) attr.Value {
	return OrgVpnsValue{}
}

var _ basetypes.ObjectValuable = OrgVpnsValue{}

type OrgVpnsValue struct {
	CreatedTime  basetypes.NumberValue `tfsdk:"created_time"`
	Id           basetypes.StringValue `tfsdk:"id"`
	ModifiedTime basetypes.NumberValue `tfsdk:"modified_time"`
	Name         basetypes.StringValue `tfsdk:"name"`
	OrgId        basetypes.StringValue `tfsdk:"org_id"`
	Paths        basetypes.MapValue    `tfsdk:"paths"`
	state        attr.ValueState
}

func (v OrgVpnsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["created_time"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["paths"] = basetypes.MapType{
		ElemType: PathsValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.Paths.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["paths"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgVpnsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgVpnsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgVpnsValue) String() string {
	return "OrgVpnsValue"
}

func (v OrgVpnsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paths := types.MapValueMust(
		PathsType{
			basetypes.ObjectType{
				AttrTypes: PathsValue{}.AttributeTypes(ctx),
			},
		},
		v.Paths.Elements(),
	)

	if v.Paths.IsNull() {
		paths = types.MapNull(
			PathsType{
				basetypes.ObjectType{
					AttrTypes: PathsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Paths.IsUnknown() {
		paths = types.MapUnknown(
			PathsType{
				basetypes.ObjectType{
					AttrTypes: PathsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"created_time":  basetypes.NumberType{},
		"id":            basetypes.StringType{},
		"modified_time": basetypes.NumberType{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"paths": basetypes.MapType{
			ElemType: PathsValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_time":  v.CreatedTime,
			"id":            v.Id,
			"modified_time": v.ModifiedTime,
			"name":          v.Name,
			"org_id":        v.OrgId,
			"paths":         paths,
		})

	return objVal, diags
}

func (v OrgVpnsValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgVpnsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.Paths.Equal(other.Paths) {
		return false
	}

	return true
}

func (v OrgVpnsValue) Type(ctx context.Context) attr.Type {
	return OrgVpnsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgVpnsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_time":  basetypes.NumberType{},
		"id":            basetypes.StringType{},
		"modified_time": basetypes.NumberType{},
		"name":          basetypes.StringType{},
		"org_id":        basetypes.StringType{},
		"paths": basetypes.MapType{
			ElemType: PathsValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = PathsType{}

type PathsType struct {
	basetypes.ObjectType
}

func (t PathsType) Equal(o attr.Type) bool {
	other, ok := o.(PathsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PathsType) String() string {
	return "PathsType"
}

func (t PathsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	bfdProfileAttribute, ok := attributes["bfd_profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bfd_profile is missing from object`)

		return nil, diags
	}

	bfdProfileVal, ok := bfdProfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bfd_profile expected to be basetypes.StringValue, was: %T`, bfdProfileAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return nil, diags
	}

	ipVal, ok := ipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be basetypes.StringValue, was: %T`, ipAttribute))
	}

	podAttribute, ok := attributes["pod"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pod is missing from object`)

		return nil, diags
	}

	podVal, ok := podAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pod expected to be basetypes.Int64Value, was: %T`, podAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PathsValue{
		BfdProfile: bfdProfileVal,
		Ip:         ipVal,
		Pod:        podVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPathsValueNull() PathsValue {
	return PathsValue{
		state: attr.ValueStateNull,
	}
}

func NewPathsValueUnknown() PathsValue {
	return PathsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPathsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PathsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PathsValue Attribute Value",
				"While creating a PathsValue value, a missing attribute value was detected. "+
					"A PathsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PathsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PathsValue Attribute Type",
				"While creating a PathsValue value, an invalid attribute value was detected. "+
					"A PathsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PathsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PathsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PathsValue Attribute Value",
				"While creating a PathsValue value, an extra attribute value was detected. "+
					"A PathsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PathsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPathsValueUnknown(), diags
	}

	bfdProfileAttribute, ok := attributes["bfd_profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`bfd_profile is missing from object`)

		return NewPathsValueUnknown(), diags
	}

	bfdProfileVal, ok := bfdProfileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`bfd_profile expected to be basetypes.StringValue, was: %T`, bfdProfileAttribute))
	}

	ipAttribute, ok := attributes["ip"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip is missing from object`)

		return NewPathsValueUnknown(), diags
	}

	ipVal, ok := ipAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip expected to be basetypes.StringValue, was: %T`, ipAttribute))
	}

	podAttribute, ok := attributes["pod"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pod is missing from object`)

		return NewPathsValueUnknown(), diags
	}

	podVal, ok := podAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pod expected to be basetypes.Int64Value, was: %T`, podAttribute))
	}

	if diags.HasError() {
		return NewPathsValueUnknown(), diags
	}

	return PathsValue{
		BfdProfile: bfdProfileVal,
		Ip:         ipVal,
		Pod:        podVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPathsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PathsValue {
	object, diags := NewPathsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPathsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PathsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPathsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPathsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPathsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPathsValueMust(PathsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PathsType) ValueType(ctx context.Context) attr.Value {
	return PathsValue{}
}

var _ basetypes.ObjectValuable = PathsValue{}

type PathsValue struct {
	BfdProfile basetypes.StringValue `tfsdk:"bfd_profile"`
	Ip         basetypes.StringValue `tfsdk:"ip"`
	Pod        basetypes.Int64Value  `tfsdk:"pod"`
	state      attr.ValueState
}

func (v PathsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["bfd_profile"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["ip"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["pod"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.BfdProfile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["bfd_profile"] = val

		val, err = v.Ip.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip"] = val

		val, err = v.Pod.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["pod"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PathsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PathsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PathsValue) String() string {
	return "PathsValue"
}

func (v PathsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"bfd_profile": basetypes.StringType{},
		"ip":          basetypes.StringType{},
		"pod":         basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"bfd_profile": v.BfdProfile,
			"ip":          v.Ip,
			"pod":         v.Pod,
		})

	return objVal, diags
}

func (v PathsValue) Equal(o attr.Value) bool {
	other, ok := o.(PathsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BfdProfile.Equal(other.BfdProfile) {
		return false
	}

	if !v.Ip.Equal(other.Ip) {
		return false
	}

	if !v.Pod.Equal(other.Pod) {
		return false
	}

	return true
}

func (v PathsValue) Type(ctx context.Context) attr.Type {
	return PathsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PathsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"bfd_profile": basetypes.StringType{},
		"ip":          basetypes.StringType{},
		"pod":         basetypes.Int64Type{},
	}
}
