// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_webhooks

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgWebhooksDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"org_webhooks": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been created, in epoch",
							MarkdownDescription: "When the object has been created, in epoch",
						},
						"enabled": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether webhook is enabled",
							MarkdownDescription: "Whether webhook is enabled",
						},
						"headers": schema.MapAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000",
							MarkdownDescription: "If `type`=`http-post`, additional custom HTTP headers to add. The headers name and value must be string, total bytes of headers name and value must be less than 1000",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique ID of the object instance in the Mist Organnization",
							MarkdownDescription: "Unique ID of the object instance in the Mist Organnization",
						},
						"modified_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been modified for the last time, in epoch",
							MarkdownDescription: "When the object has been modified for the last time, in epoch",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the webhook",
							MarkdownDescription: "Name of the webhook",
						},
						"oauth2_client_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Required when `oauth2_grant_type`==`client_credentials`",
							MarkdownDescription: "Required when `oauth2_grant_type`==`client_credentials`",
						},
						"oauth2_client_secret": schema.StringAttribute{
							Computed:            true,
							Sensitive:           true,
							Description:         "Required when `oauth2_grant_type`==`client_credentials`",
							MarkdownDescription: "Required when `oauth2_grant_type`==`client_credentials`",
						},
						"oauth2_grant_type": schema.StringAttribute{
							Computed:            true,
							Description:         "required when `type`==`oauth2`. enum: `client_credentials`, `password`",
							MarkdownDescription: "required when `type`==`oauth2`. enum: `client_credentials`, `password`",
						},
						"oauth2_password": schema.StringAttribute{
							Computed:            true,
							Sensitive:           true,
							Description:         "Required when `oauth2_grant_type`==`password`",
							MarkdownDescription: "Required when `oauth2_grant_type`==`password`",
						},
						"oauth2_scopes": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "Required when `type`==`oauth2`, if provided, will be used in the token request",
							MarkdownDescription: "Required when `type`==`oauth2`, if provided, will be used in the token request",
						},
						"oauth2_token_url": schema.StringAttribute{
							Computed:            true,
							Description:         "Required when `type`==`oauth2`",
							MarkdownDescription: "Required when `type`==`oauth2`",
						},
						"oauth2_username": schema.StringAttribute{
							Computed:            true,
							Description:         "Required when `oauth2_grant_type`==`password`",
							MarkdownDescription: "Required when `oauth2_grant_type`==`password`",
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"secret": schema.StringAttribute{
							Computed:            true,
							Sensitive:           true,
							Description:         "Only if `type`=`http-post` \n\nwhen `secret` is provided, two  HTTP headers will be added: \n  * X-Mist-Signature-v2: HMAC_SHA256(secret, body)\n  * X-Mist-Signature: HMAC_SHA1(secret, body)",
							MarkdownDescription: "Only if `type`=`http-post` \n\nwhen `secret` is provided, two  HTTP headers will be added: \n  * X-Mist-Signature-v2: HMAC_SHA256(secret, body)\n  * X-Mist-Signature: HMAC_SHA1(secret, body)",
						},
						"splunk_token": schema.StringAttribute{
							Computed:            true,
							Sensitive:           true,
							Description:         "Required if `type`=`splunk`. If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.",
							MarkdownDescription: "Required if `type`=`splunk`. If splunk_token is not defined for a type Splunk webhook, it will not send, regardless if the webhook receiver is configured to accept it.",
						},
						"topics": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of supported webhook topics available with the API Call [List Webhook Topics]($e/Constants%20Definitions/listWebhookTopics)",
							MarkdownDescription: "List of supported webhook topics available with the API Call [List Webhook Topics]($e/Constants%20Definitions/listWebhookTopics)",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`",
							MarkdownDescription: "enum: `aws-sns`, `google-pubsub`, `http-post`, `oauth2`, `splunk`",
						},
						"url": schema.StringAttribute{
							Computed: true,
						},
						"verify_cert": schema.BoolAttribute{
							Computed:            true,
							Description:         "When url uses HTTPS, whether to verify the certificate",
							MarkdownDescription: "When url uses HTTPS, whether to verify the certificate",
						},
					},
					CustomType: OrgWebhooksType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgWebhooksValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type OrgWebhooksModel struct {
	OrgId       types.String `tfsdk:"org_id"`
	OrgWebhooks types.Set    `tfsdk:"org_webhooks"`
}

var _ basetypes.ObjectTypable = OrgWebhooksType{}

type OrgWebhooksType struct {
	basetypes.ObjectType
}

func (t OrgWebhooksType) Equal(o attr.Type) bool {
	other, ok := o.(OrgWebhooksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgWebhooksType) String() string {
	return "OrgWebhooksType"
}

func (t OrgWebhooksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	headersAttribute, ok := attributes["headers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`headers is missing from object`)

		return nil, diags
	}

	headersVal, ok := headersAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`headers expected to be basetypes.MapValue, was: %T`, headersAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	oauth2ClientIdAttribute, ok := attributes["oauth2_client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_client_id is missing from object`)

		return nil, diags
	}

	oauth2ClientIdVal, ok := oauth2ClientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_client_id expected to be basetypes.StringValue, was: %T`, oauth2ClientIdAttribute))
	}

	oauth2ClientSecretAttribute, ok := attributes["oauth2_client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_client_secret is missing from object`)

		return nil, diags
	}

	oauth2ClientSecretVal, ok := oauth2ClientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_client_secret expected to be basetypes.StringValue, was: %T`, oauth2ClientSecretAttribute))
	}

	oauth2GrantTypeAttribute, ok := attributes["oauth2_grant_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_grant_type is missing from object`)

		return nil, diags
	}

	oauth2GrantTypeVal, ok := oauth2GrantTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_grant_type expected to be basetypes.StringValue, was: %T`, oauth2GrantTypeAttribute))
	}

	oauth2PasswordAttribute, ok := attributes["oauth2_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_password is missing from object`)

		return nil, diags
	}

	oauth2PasswordVal, ok := oauth2PasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_password expected to be basetypes.StringValue, was: %T`, oauth2PasswordAttribute))
	}

	oauth2ScopesAttribute, ok := attributes["oauth2_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_scopes is missing from object`)

		return nil, diags
	}

	oauth2ScopesVal, ok := oauth2ScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_scopes expected to be basetypes.ListValue, was: %T`, oauth2ScopesAttribute))
	}

	oauth2TokenUrlAttribute, ok := attributes["oauth2_token_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_token_url is missing from object`)

		return nil, diags
	}

	oauth2TokenUrlVal, ok := oauth2TokenUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_token_url expected to be basetypes.StringValue, was: %T`, oauth2TokenUrlAttribute))
	}

	oauth2UsernameAttribute, ok := attributes["oauth2_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_username is missing from object`)

		return nil, diags
	}

	oauth2UsernameVal, ok := oauth2UsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_username expected to be basetypes.StringValue, was: %T`, oauth2UsernameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	secretAttribute, ok := attributes["secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret is missing from object`)

		return nil, diags
	}

	secretVal, ok := secretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret expected to be basetypes.StringValue, was: %T`, secretAttribute))
	}

	splunkTokenAttribute, ok := attributes["splunk_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`splunk_token is missing from object`)

		return nil, diags
	}

	splunkTokenVal, ok := splunkTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`splunk_token expected to be basetypes.StringValue, was: %T`, splunkTokenAttribute))
	}

	topicsAttribute, ok := attributes["topics"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topics is missing from object`)

		return nil, diags
	}

	topicsVal, ok := topicsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topics expected to be basetypes.ListValue, was: %T`, topicsAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	verifyCertAttribute, ok := attributes["verify_cert"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`verify_cert is missing from object`)

		return nil, diags
	}

	verifyCertVal, ok := verifyCertAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`verify_cert expected to be basetypes.BoolValue, was: %T`, verifyCertAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgWebhooksValue{
		CreatedTime:        createdTimeVal,
		Enabled:            enabledVal,
		Headers:            headersVal,
		Id:                 idVal,
		ModifiedTime:       modifiedTimeVal,
		Name:               nameVal,
		Oauth2ClientId:     oauth2ClientIdVal,
		Oauth2ClientSecret: oauth2ClientSecretVal,
		Oauth2GrantType:    oauth2GrantTypeVal,
		Oauth2Password:     oauth2PasswordVal,
		Oauth2Scopes:       oauth2ScopesVal,
		Oauth2TokenUrl:     oauth2TokenUrlVal,
		Oauth2Username:     oauth2UsernameVal,
		OrgId:              orgIdVal,
		Secret:             secretVal,
		SplunkToken:        splunkTokenVal,
		Topics:             topicsVal,
		OrgWebhooksType:    typeVal,
		Url:                urlVal,
		VerifyCert:         verifyCertVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewOrgWebhooksValueNull() OrgWebhooksValue {
	return OrgWebhooksValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgWebhooksValueUnknown() OrgWebhooksValue {
	return OrgWebhooksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgWebhooksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgWebhooksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgWebhooksValue Attribute Value",
				"While creating a OrgWebhooksValue value, a missing attribute value was detected. "+
					"A OrgWebhooksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgWebhooksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgWebhooksValue Attribute Type",
				"While creating a OrgWebhooksValue value, an invalid attribute value was detected. "+
					"A OrgWebhooksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgWebhooksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgWebhooksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgWebhooksValue Attribute Value",
				"While creating a OrgWebhooksValue value, an extra attribute value was detected. "+
					"A OrgWebhooksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgWebhooksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgWebhooksValueUnknown(), diags
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	headersAttribute, ok := attributes["headers"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`headers is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	headersVal, ok := headersAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`headers expected to be basetypes.MapValue, was: %T`, headersAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	oauth2ClientIdAttribute, ok := attributes["oauth2_client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_client_id is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	oauth2ClientIdVal, ok := oauth2ClientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_client_id expected to be basetypes.StringValue, was: %T`, oauth2ClientIdAttribute))
	}

	oauth2ClientSecretAttribute, ok := attributes["oauth2_client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_client_secret is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	oauth2ClientSecretVal, ok := oauth2ClientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_client_secret expected to be basetypes.StringValue, was: %T`, oauth2ClientSecretAttribute))
	}

	oauth2GrantTypeAttribute, ok := attributes["oauth2_grant_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_grant_type is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	oauth2GrantTypeVal, ok := oauth2GrantTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_grant_type expected to be basetypes.StringValue, was: %T`, oauth2GrantTypeAttribute))
	}

	oauth2PasswordAttribute, ok := attributes["oauth2_password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_password is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	oauth2PasswordVal, ok := oauth2PasswordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_password expected to be basetypes.StringValue, was: %T`, oauth2PasswordAttribute))
	}

	oauth2ScopesAttribute, ok := attributes["oauth2_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_scopes is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	oauth2ScopesVal, ok := oauth2ScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_scopes expected to be basetypes.ListValue, was: %T`, oauth2ScopesAttribute))
	}

	oauth2TokenUrlAttribute, ok := attributes["oauth2_token_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_token_url is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	oauth2TokenUrlVal, ok := oauth2TokenUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_token_url expected to be basetypes.StringValue, was: %T`, oauth2TokenUrlAttribute))
	}

	oauth2UsernameAttribute, ok := attributes["oauth2_username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`oauth2_username is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	oauth2UsernameVal, ok := oauth2UsernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`oauth2_username expected to be basetypes.StringValue, was: %T`, oauth2UsernameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	secretAttribute, ok := attributes["secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secret is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	secretVal, ok := secretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secret expected to be basetypes.StringValue, was: %T`, secretAttribute))
	}

	splunkTokenAttribute, ok := attributes["splunk_token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`splunk_token is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	splunkTokenVal, ok := splunkTokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`splunk_token expected to be basetypes.StringValue, was: %T`, splunkTokenAttribute))
	}

	topicsAttribute, ok := attributes["topics"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topics is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	topicsVal, ok := topicsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topics expected to be basetypes.ListValue, was: %T`, topicsAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	verifyCertAttribute, ok := attributes["verify_cert"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`verify_cert is missing from object`)

		return NewOrgWebhooksValueUnknown(), diags
	}

	verifyCertVal, ok := verifyCertAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`verify_cert expected to be basetypes.BoolValue, was: %T`, verifyCertAttribute))
	}

	if diags.HasError() {
		return NewOrgWebhooksValueUnknown(), diags
	}

	return OrgWebhooksValue{
		CreatedTime:        createdTimeVal,
		Enabled:            enabledVal,
		Headers:            headersVal,
		Id:                 idVal,
		ModifiedTime:       modifiedTimeVal,
		Name:               nameVal,
		Oauth2ClientId:     oauth2ClientIdVal,
		Oauth2ClientSecret: oauth2ClientSecretVal,
		Oauth2GrantType:    oauth2GrantTypeVal,
		Oauth2Password:     oauth2PasswordVal,
		Oauth2Scopes:       oauth2ScopesVal,
		Oauth2TokenUrl:     oauth2TokenUrlVal,
		Oauth2Username:     oauth2UsernameVal,
		OrgId:              orgIdVal,
		Secret:             secretVal,
		SplunkToken:        splunkTokenVal,
		Topics:             topicsVal,
		OrgWebhooksType:    typeVal,
		Url:                urlVal,
		VerifyCert:         verifyCertVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewOrgWebhooksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgWebhooksValue {
	object, diags := NewOrgWebhooksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgWebhooksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgWebhooksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgWebhooksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgWebhooksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgWebhooksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgWebhooksValueMust(OrgWebhooksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgWebhooksType) ValueType(ctx context.Context) attr.Value {
	return OrgWebhooksValue{}
}

var _ basetypes.ObjectValuable = OrgWebhooksValue{}

type OrgWebhooksValue struct {
	CreatedTime        basetypes.Float64Value `tfsdk:"created_time"`
	Enabled            basetypes.BoolValue    `tfsdk:"enabled"`
	Headers            basetypes.MapValue     `tfsdk:"headers"`
	Id                 basetypes.StringValue  `tfsdk:"id"`
	ModifiedTime       basetypes.Float64Value `tfsdk:"modified_time"`
	Name               basetypes.StringValue  `tfsdk:"name"`
	Oauth2ClientId     basetypes.StringValue  `tfsdk:"oauth2_client_id"`
	Oauth2ClientSecret basetypes.StringValue  `tfsdk:"oauth2_client_secret"`
	Oauth2GrantType    basetypes.StringValue  `tfsdk:"oauth2_grant_type"`
	Oauth2Password     basetypes.StringValue  `tfsdk:"oauth2_password"`
	Oauth2Scopes       basetypes.ListValue    `tfsdk:"oauth2_scopes"`
	Oauth2TokenUrl     basetypes.StringValue  `tfsdk:"oauth2_token_url"`
	Oauth2Username     basetypes.StringValue  `tfsdk:"oauth2_username"`
	OrgId              basetypes.StringValue  `tfsdk:"org_id"`
	Secret             basetypes.StringValue  `tfsdk:"secret"`
	SplunkToken        basetypes.StringValue  `tfsdk:"splunk_token"`
	Topics             basetypes.ListValue    `tfsdk:"topics"`
	OrgWebhooksType    basetypes.StringValue  `tfsdk:"type"`
	Url                basetypes.StringValue  `tfsdk:"url"`
	VerifyCert         basetypes.BoolValue    `tfsdk:"verify_cert"`
	state              attr.ValueState
}

func (v OrgWebhooksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 20)

	var val tftypes.Value
	var err error

	attrTypes["created_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["headers"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oauth2_client_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oauth2_client_secret"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oauth2_grant_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oauth2_password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oauth2_scopes"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["oauth2_token_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["oauth2_username"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["secret"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["splunk_token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["topics"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["verify_cert"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 20)

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Headers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["headers"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Oauth2ClientId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oauth2_client_id"] = val

		val, err = v.Oauth2ClientSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oauth2_client_secret"] = val

		val, err = v.Oauth2GrantType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oauth2_grant_type"] = val

		val, err = v.Oauth2Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oauth2_password"] = val

		val, err = v.Oauth2Scopes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oauth2_scopes"] = val

		val, err = v.Oauth2TokenUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oauth2_token_url"] = val

		val, err = v.Oauth2Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["oauth2_username"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.Secret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["secret"] = val

		val, err = v.SplunkToken.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["splunk_token"] = val

		val, err = v.Topics.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["topics"] = val

		val, err = v.OrgWebhooksType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		val, err = v.VerifyCert.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["verify_cert"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgWebhooksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgWebhooksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgWebhooksValue) String() string {
	return "OrgWebhooksValue"
}

func (v OrgWebhooksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	headersVal, d := types.MapValue(types.StringType, v.Headers.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_time": basetypes.Float64Type{},
			"enabled":      basetypes.BoolType{},
			"headers": basetypes.MapType{
				ElemType: types.StringType,
			},
			"id":                   basetypes.StringType{},
			"modified_time":        basetypes.Float64Type{},
			"name":                 basetypes.StringType{},
			"oauth2_client_id":     basetypes.StringType{},
			"oauth2_client_secret": basetypes.StringType{},
			"oauth2_grant_type":    basetypes.StringType{},
			"oauth2_password":      basetypes.StringType{},
			"oauth2_scopes": basetypes.ListType{
				ElemType: types.StringType,
			},
			"oauth2_token_url": basetypes.StringType{},
			"oauth2_username":  basetypes.StringType{},
			"org_id":           basetypes.StringType{},
			"secret":           basetypes.StringType{},
			"splunk_token":     basetypes.StringType{},
			"topics": basetypes.ListType{
				ElemType: types.StringType,
			},
			"type":        basetypes.StringType{},
			"url":         basetypes.StringType{},
			"verify_cert": basetypes.BoolType{},
		}), diags
	}

	oauth2ScopesVal, d := types.ListValue(types.StringType, v.Oauth2Scopes.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_time": basetypes.Float64Type{},
			"enabled":      basetypes.BoolType{},
			"headers": basetypes.MapType{
				ElemType: types.StringType,
			},
			"id":                   basetypes.StringType{},
			"modified_time":        basetypes.Float64Type{},
			"name":                 basetypes.StringType{},
			"oauth2_client_id":     basetypes.StringType{},
			"oauth2_client_secret": basetypes.StringType{},
			"oauth2_grant_type":    basetypes.StringType{},
			"oauth2_password":      basetypes.StringType{},
			"oauth2_scopes": basetypes.ListType{
				ElemType: types.StringType,
			},
			"oauth2_token_url": basetypes.StringType{},
			"oauth2_username":  basetypes.StringType{},
			"org_id":           basetypes.StringType{},
			"secret":           basetypes.StringType{},
			"splunk_token":     basetypes.StringType{},
			"topics": basetypes.ListType{
				ElemType: types.StringType,
			},
			"type":        basetypes.StringType{},
			"url":         basetypes.StringType{},
			"verify_cert": basetypes.BoolType{},
		}), diags
	}

	topicsVal, d := types.ListValue(types.StringType, v.Topics.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_time": basetypes.Float64Type{},
			"enabled":      basetypes.BoolType{},
			"headers": basetypes.MapType{
				ElemType: types.StringType,
			},
			"id":                   basetypes.StringType{},
			"modified_time":        basetypes.Float64Type{},
			"name":                 basetypes.StringType{},
			"oauth2_client_id":     basetypes.StringType{},
			"oauth2_client_secret": basetypes.StringType{},
			"oauth2_grant_type":    basetypes.StringType{},
			"oauth2_password":      basetypes.StringType{},
			"oauth2_scopes": basetypes.ListType{
				ElemType: types.StringType,
			},
			"oauth2_token_url": basetypes.StringType{},
			"oauth2_username":  basetypes.StringType{},
			"org_id":           basetypes.StringType{},
			"secret":           basetypes.StringType{},
			"splunk_token":     basetypes.StringType{},
			"topics": basetypes.ListType{
				ElemType: types.StringType,
			},
			"type":        basetypes.StringType{},
			"url":         basetypes.StringType{},
			"verify_cert": basetypes.BoolType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"created_time": basetypes.Float64Type{},
		"enabled":      basetypes.BoolType{},
		"headers": basetypes.MapType{
			ElemType: types.StringType,
		},
		"id":                   basetypes.StringType{},
		"modified_time":        basetypes.Float64Type{},
		"name":                 basetypes.StringType{},
		"oauth2_client_id":     basetypes.StringType{},
		"oauth2_client_secret": basetypes.StringType{},
		"oauth2_grant_type":    basetypes.StringType{},
		"oauth2_password":      basetypes.StringType{},
		"oauth2_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"oauth2_token_url": basetypes.StringType{},
		"oauth2_username":  basetypes.StringType{},
		"org_id":           basetypes.StringType{},
		"secret":           basetypes.StringType{},
		"splunk_token":     basetypes.StringType{},
		"topics": basetypes.ListType{
			ElemType: types.StringType,
		},
		"type":        basetypes.StringType{},
		"url":         basetypes.StringType{},
		"verify_cert": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_time":         v.CreatedTime,
			"enabled":              v.Enabled,
			"headers":              headersVal,
			"id":                   v.Id,
			"modified_time":        v.ModifiedTime,
			"name":                 v.Name,
			"oauth2_client_id":     v.Oauth2ClientId,
			"oauth2_client_secret": v.Oauth2ClientSecret,
			"oauth2_grant_type":    v.Oauth2GrantType,
			"oauth2_password":      v.Oauth2Password,
			"oauth2_scopes":        oauth2ScopesVal,
			"oauth2_token_url":     v.Oauth2TokenUrl,
			"oauth2_username":      v.Oauth2Username,
			"org_id":               v.OrgId,
			"secret":               v.Secret,
			"splunk_token":         v.SplunkToken,
			"topics":               topicsVal,
			"type":                 v.OrgWebhooksType,
			"url":                  v.Url,
			"verify_cert":          v.VerifyCert,
		})

	return objVal, diags
}

func (v OrgWebhooksValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgWebhooksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Headers.Equal(other.Headers) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Oauth2ClientId.Equal(other.Oauth2ClientId) {
		return false
	}

	if !v.Oauth2ClientSecret.Equal(other.Oauth2ClientSecret) {
		return false
	}

	if !v.Oauth2GrantType.Equal(other.Oauth2GrantType) {
		return false
	}

	if !v.Oauth2Password.Equal(other.Oauth2Password) {
		return false
	}

	if !v.Oauth2Scopes.Equal(other.Oauth2Scopes) {
		return false
	}

	if !v.Oauth2TokenUrl.Equal(other.Oauth2TokenUrl) {
		return false
	}

	if !v.Oauth2Username.Equal(other.Oauth2Username) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.Secret.Equal(other.Secret) {
		return false
	}

	if !v.SplunkToken.Equal(other.SplunkToken) {
		return false
	}

	if !v.Topics.Equal(other.Topics) {
		return false
	}

	if !v.OrgWebhooksType.Equal(other.OrgWebhooksType) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	if !v.VerifyCert.Equal(other.VerifyCert) {
		return false
	}

	return true
}

func (v OrgWebhooksValue) Type(ctx context.Context) attr.Type {
	return OrgWebhooksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgWebhooksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_time": basetypes.Float64Type{},
		"enabled":      basetypes.BoolType{},
		"headers": basetypes.MapType{
			ElemType: types.StringType,
		},
		"id":                   basetypes.StringType{},
		"modified_time":        basetypes.Float64Type{},
		"name":                 basetypes.StringType{},
		"oauth2_client_id":     basetypes.StringType{},
		"oauth2_client_secret": basetypes.StringType{},
		"oauth2_grant_type":    basetypes.StringType{},
		"oauth2_password":      basetypes.StringType{},
		"oauth2_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"oauth2_token_url": basetypes.StringType{},
		"oauth2_username":  basetypes.StringType{},
		"org_id":           basetypes.StringType{},
		"secret":           basetypes.StringType{},
		"splunk_token":     basetypes.StringType{},
		"topics": basetypes.ListType{
			ElemType: types.StringType,
		},
		"type":        basetypes.StringType{},
		"url":         basetypes.StringType{},
		"verify_cert": basetypes.BoolType{},
	}
}
