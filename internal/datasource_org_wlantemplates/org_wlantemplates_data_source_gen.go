// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_org_wlantemplates

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func OrgWlantemplatesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"org_wlantemplates": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"applies": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"org_id": schema.StringAttribute{
									Computed: true,
								},
								"site_ids": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "List of site ids",
									MarkdownDescription: "List of site ids",
								},
								"sitegroup_ids": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "List of sitegroup ids",
									MarkdownDescription: "List of sitegroup ids",
								},
							},
							CustomType: AppliesType{
								ObjectType: types.ObjectType{
									AttrTypes: AppliesValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Where this template should be applied to, can be org_id, site_ids, sitegroup_ids",
							MarkdownDescription: "Where this template should be applied to, can be org_id, site_ids, sitegroup_ids",
						},
						"created_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been created, in epoch",
							MarkdownDescription: "When the object has been created, in epoch",
						},
						"deviceprofile_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "List of Device Profile ids",
							MarkdownDescription: "List of Device Profile ids",
						},
						"exceptions": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"site_ids": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "List of site ids",
									MarkdownDescription: "List of site ids",
								},
								"sitegroup_ids": schema.ListAttribute{
									ElementType:         types.StringType,
									Computed:            true,
									Description:         "List of sitegroup ids",
									MarkdownDescription: "List of sitegroup ids",
								},
							},
							CustomType: ExceptionsType{
								ObjectType: types.ObjectType{
									AttrTypes: ExceptionsValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Where this template should not be applied to (takes precedence)",
							MarkdownDescription: "Where this template should not be applied to (takes precedence)",
						},
						"filter_by_deviceprofile": schema.BoolAttribute{
							Computed:            true,
							Description:         "Whether to further filter by Device Profile",
							MarkdownDescription: "Whether to further filter by Device Profile",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique ID of the object instance in the Mist Organization",
							MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
						},
						"modified_time": schema.Float64Attribute{
							Computed:            true,
							Description:         "When the object has been modified for the last time, in epoch",
							MarkdownDescription: "When the object has been modified for the last time, in epoch",
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: OrgWlantemplatesType{
						ObjectType: types.ObjectType{
							AttrTypes: OrgWlantemplatesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type OrgWlantemplatesModel struct {
	OrgId            types.String `tfsdk:"org_id"`
	OrgWlantemplates types.Set    `tfsdk:"org_wlantemplates"`
}

var _ basetypes.ObjectTypable = OrgWlantemplatesType{}

type OrgWlantemplatesType struct {
	basetypes.ObjectType
}

func (t OrgWlantemplatesType) Equal(o attr.Type) bool {
	other, ok := o.(OrgWlantemplatesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrgWlantemplatesType) String() string {
	return "OrgWlantemplatesType"
}

func (t OrgWlantemplatesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appliesAttribute, ok := attributes["applies"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`applies is missing from object`)

		return nil, diags
	}

	appliesVal, ok := appliesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`applies expected to be basetypes.ObjectValue, was: %T`, appliesAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	deviceprofileIdsAttribute, ok := attributes["deviceprofile_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deviceprofile_ids is missing from object`)

		return nil, diags
	}

	deviceprofileIdsVal, ok := deviceprofileIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deviceprofile_ids expected to be basetypes.ListValue, was: %T`, deviceprofileIdsAttribute))
	}

	exceptionsAttribute, ok := attributes["exceptions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exceptions is missing from object`)

		return nil, diags
	}

	exceptionsVal, ok := exceptionsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exceptions expected to be basetypes.ObjectValue, was: %T`, exceptionsAttribute))
	}

	filterByDeviceprofileAttribute, ok := attributes["filter_by_deviceprofile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filter_by_deviceprofile is missing from object`)

		return nil, diags
	}

	filterByDeviceprofileVal, ok := filterByDeviceprofileAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filter_by_deviceprofile expected to be basetypes.BoolValue, was: %T`, filterByDeviceprofileAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrgWlantemplatesValue{
		Applies:               appliesVal,
		CreatedTime:           createdTimeVal,
		DeviceprofileIds:      deviceprofileIdsVal,
		Exceptions:            exceptionsVal,
		FilterByDeviceprofile: filterByDeviceprofileVal,
		Id:                    idVal,
		ModifiedTime:          modifiedTimeVal,
		Name:                  nameVal,
		OrgId:                 orgIdVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewOrgWlantemplatesValueNull() OrgWlantemplatesValue {
	return OrgWlantemplatesValue{
		state: attr.ValueStateNull,
	}
}

func NewOrgWlantemplatesValueUnknown() OrgWlantemplatesValue {
	return OrgWlantemplatesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrgWlantemplatesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrgWlantemplatesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrgWlantemplatesValue Attribute Value",
				"While creating a OrgWlantemplatesValue value, a missing attribute value was detected. "+
					"A OrgWlantemplatesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgWlantemplatesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrgWlantemplatesValue Attribute Type",
				"While creating a OrgWlantemplatesValue value, an invalid attribute value was detected. "+
					"A OrgWlantemplatesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrgWlantemplatesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrgWlantemplatesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrgWlantemplatesValue Attribute Value",
				"While creating a OrgWlantemplatesValue value, an extra attribute value was detected. "+
					"A OrgWlantemplatesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrgWlantemplatesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrgWlantemplatesValueUnknown(), diags
	}

	appliesAttribute, ok := attributes["applies"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`applies is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	appliesVal, ok := appliesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`applies expected to be basetypes.ObjectValue, was: %T`, appliesAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.Float64Value, was: %T`, createdTimeAttribute))
	}

	deviceprofileIdsAttribute, ok := attributes["deviceprofile_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`deviceprofile_ids is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	deviceprofileIdsVal, ok := deviceprofileIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`deviceprofile_ids expected to be basetypes.ListValue, was: %T`, deviceprofileIdsAttribute))
	}

	exceptionsAttribute, ok := attributes["exceptions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exceptions is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	exceptionsVal, ok := exceptionsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exceptions expected to be basetypes.ObjectValue, was: %T`, exceptionsAttribute))
	}

	filterByDeviceprofileAttribute, ok := attributes["filter_by_deviceprofile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filter_by_deviceprofile is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	filterByDeviceprofileVal, ok := filterByDeviceprofileAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filter_by_deviceprofile expected to be basetypes.BoolValue, was: %T`, filterByDeviceprofileAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.Float64Value, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewOrgWlantemplatesValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	if diags.HasError() {
		return NewOrgWlantemplatesValueUnknown(), diags
	}

	return OrgWlantemplatesValue{
		Applies:               appliesVal,
		CreatedTime:           createdTimeVal,
		DeviceprofileIds:      deviceprofileIdsVal,
		Exceptions:            exceptionsVal,
		FilterByDeviceprofile: filterByDeviceprofileVal,
		Id:                    idVal,
		ModifiedTime:          modifiedTimeVal,
		Name:                  nameVal,
		OrgId:                 orgIdVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewOrgWlantemplatesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrgWlantemplatesValue {
	object, diags := NewOrgWlantemplatesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrgWlantemplatesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrgWlantemplatesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrgWlantemplatesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrgWlantemplatesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrgWlantemplatesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrgWlantemplatesValueMust(OrgWlantemplatesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrgWlantemplatesType) ValueType(ctx context.Context) attr.Value {
	return OrgWlantemplatesValue{}
}

var _ basetypes.ObjectValuable = OrgWlantemplatesValue{}

type OrgWlantemplatesValue struct {
	Applies               basetypes.ObjectValue  `tfsdk:"applies"`
	CreatedTime           basetypes.Float64Value `tfsdk:"created_time"`
	DeviceprofileIds      basetypes.ListValue    `tfsdk:"deviceprofile_ids"`
	Exceptions            basetypes.ObjectValue  `tfsdk:"exceptions"`
	FilterByDeviceprofile basetypes.BoolValue    `tfsdk:"filter_by_deviceprofile"`
	Id                    basetypes.StringValue  `tfsdk:"id"`
	ModifiedTime          basetypes.Float64Value `tfsdk:"modified_time"`
	Name                  basetypes.StringValue  `tfsdk:"name"`
	OrgId                 basetypes.StringValue  `tfsdk:"org_id"`
	state                 attr.ValueState
}

func (v OrgWlantemplatesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["applies"] = basetypes.ObjectType{
		AttrTypes: AppliesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["created_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["deviceprofile_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["exceptions"] = basetypes.ObjectType{
		AttrTypes: ExceptionsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["filter_by_deviceprofile"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.Applies.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["applies"] = val

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.DeviceprofileIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["deviceprofile_ids"] = val

		val, err = v.Exceptions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["exceptions"] = val

		val, err = v.FilterByDeviceprofile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["filter_by_deviceprofile"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrgWlantemplatesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrgWlantemplatesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrgWlantemplatesValue) String() string {
	return "OrgWlantemplatesValue"
}

func (v OrgWlantemplatesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var applies basetypes.ObjectValue

	if v.Applies.IsNull() {
		applies = types.ObjectNull(
			AppliesValue{}.AttributeTypes(ctx),
		)
	}

	if v.Applies.IsUnknown() {
		applies = types.ObjectUnknown(
			AppliesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Applies.IsNull() && !v.Applies.IsUnknown() {
		applies = types.ObjectValueMust(
			AppliesValue{}.AttributeTypes(ctx),
			v.Applies.Attributes(),
		)
	}

	var exceptions basetypes.ObjectValue

	if v.Exceptions.IsNull() {
		exceptions = types.ObjectNull(
			ExceptionsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Exceptions.IsUnknown() {
		exceptions = types.ObjectUnknown(
			ExceptionsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Exceptions.IsNull() && !v.Exceptions.IsUnknown() {
		exceptions = types.ObjectValueMust(
			ExceptionsValue{}.AttributeTypes(ctx),
			v.Exceptions.Attributes(),
		)
	}

	deviceprofileIdsVal, d := types.ListValue(types.StringType, v.DeviceprofileIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"applies": basetypes.ObjectType{
				AttrTypes: AppliesValue{}.AttributeTypes(ctx),
			},
			"created_time": basetypes.Float64Type{},
			"deviceprofile_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"exceptions": basetypes.ObjectType{
				AttrTypes: ExceptionsValue{}.AttributeTypes(ctx),
			},
			"filter_by_deviceprofile": basetypes.BoolType{},
			"id":                      basetypes.StringType{},
			"modified_time":           basetypes.Float64Type{},
			"name":                    basetypes.StringType{},
			"org_id":                  basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"applies": basetypes.ObjectType{
			AttrTypes: AppliesValue{}.AttributeTypes(ctx),
		},
		"created_time": basetypes.Float64Type{},
		"deviceprofile_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"exceptions": basetypes.ObjectType{
			AttrTypes: ExceptionsValue{}.AttributeTypes(ctx),
		},
		"filter_by_deviceprofile": basetypes.BoolType{},
		"id":                      basetypes.StringType{},
		"modified_time":           basetypes.Float64Type{},
		"name":                    basetypes.StringType{},
		"org_id":                  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"applies":                 applies,
			"created_time":            v.CreatedTime,
			"deviceprofile_ids":       deviceprofileIdsVal,
			"exceptions":              exceptions,
			"filter_by_deviceprofile": v.FilterByDeviceprofile,
			"id":                      v.Id,
			"modified_time":           v.ModifiedTime,
			"name":                    v.Name,
			"org_id":                  v.OrgId,
		})

	return objVal, diags
}

func (v OrgWlantemplatesValue) Equal(o attr.Value) bool {
	other, ok := o.(OrgWlantemplatesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Applies.Equal(other.Applies) {
		return false
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.DeviceprofileIds.Equal(other.DeviceprofileIds) {
		return false
	}

	if !v.Exceptions.Equal(other.Exceptions) {
		return false
	}

	if !v.FilterByDeviceprofile.Equal(other.FilterByDeviceprofile) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	return true
}

func (v OrgWlantemplatesValue) Type(ctx context.Context) attr.Type {
	return OrgWlantemplatesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrgWlantemplatesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"applies": basetypes.ObjectType{
			AttrTypes: AppliesValue{}.AttributeTypes(ctx),
		},
		"created_time": basetypes.Float64Type{},
		"deviceprofile_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"exceptions": basetypes.ObjectType{
			AttrTypes: ExceptionsValue{}.AttributeTypes(ctx),
		},
		"filter_by_deviceprofile": basetypes.BoolType{},
		"id":                      basetypes.StringType{},
		"modified_time":           basetypes.Float64Type{},
		"name":                    basetypes.StringType{},
		"org_id":                  basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AppliesType{}

type AppliesType struct {
	basetypes.ObjectType
}

func (t AppliesType) Equal(o attr.Type) bool {
	other, ok := o.(AppliesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AppliesType) String() string {
	return "AppliesType"
}

func (t AppliesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return nil, diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return nil, diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AppliesValue{
		OrgId:        orgIdVal,
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewAppliesValueNull() AppliesValue {
	return AppliesValue{
		state: attr.ValueStateNull,
	}
}

func NewAppliesValueUnknown() AppliesValue {
	return AppliesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAppliesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AppliesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AppliesValue Attribute Value",
				"While creating a AppliesValue value, a missing attribute value was detected. "+
					"A AppliesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppliesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AppliesValue Attribute Type",
				"While creating a AppliesValue value, an invalid attribute value was detected. "+
					"A AppliesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppliesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AppliesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AppliesValue Attribute Value",
				"While creating a AppliesValue value, an extra attribute value was detected. "+
					"A AppliesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AppliesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAppliesValueUnknown(), diags
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewAppliesValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return NewAppliesValueUnknown(), diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return NewAppliesValueUnknown(), diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	if diags.HasError() {
		return NewAppliesValueUnknown(), diags
	}

	return AppliesValue{
		OrgId:        orgIdVal,
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewAppliesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AppliesValue {
	object, diags := NewAppliesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAppliesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AppliesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAppliesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAppliesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAppliesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAppliesValueMust(AppliesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AppliesType) ValueType(ctx context.Context) attr.Value {
	return AppliesValue{}
}

var _ basetypes.ObjectValuable = AppliesValue{}

type AppliesValue struct {
	OrgId        basetypes.StringValue `tfsdk:"org_id"`
	SiteIds      basetypes.ListValue   `tfsdk:"site_ids"`
	SitegroupIds basetypes.ListValue   `tfsdk:"sitegroup_ids"`
	state        attr.ValueState
}

func (v AppliesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["site_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["sitegroup_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.SiteIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_ids"] = val

		val, err = v.SitegroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sitegroup_ids"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AppliesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AppliesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AppliesValue) String() string {
	return "AppliesValue"
}

func (v AppliesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	siteIdsVal, d := types.ListValue(types.StringType, v.SiteIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"org_id": basetypes.StringType{},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	sitegroupIdsVal, d := types.ListValue(types.StringType, v.SitegroupIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"org_id": basetypes.StringType{},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"org_id": basetypes.StringType{},
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"org_id":        v.OrgId,
			"site_ids":      siteIdsVal,
			"sitegroup_ids": sitegroupIdsVal,
		})

	return objVal, diags
}

func (v AppliesValue) Equal(o attr.Value) bool {
	other, ok := o.(AppliesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.SiteIds.Equal(other.SiteIds) {
		return false
	}

	if !v.SitegroupIds.Equal(other.SitegroupIds) {
		return false
	}

	return true
}

func (v AppliesValue) Type(ctx context.Context) attr.Type {
	return AppliesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AppliesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"org_id": basetypes.StringType{},
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = ExceptionsType{}

type ExceptionsType struct {
	basetypes.ObjectType
}

func (t ExceptionsType) Equal(o attr.Type) bool {
	other, ok := o.(ExceptionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ExceptionsType) String() string {
	return "ExceptionsType"
}

func (t ExceptionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return nil, diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return nil, diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ExceptionsValue{
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewExceptionsValueNull() ExceptionsValue {
	return ExceptionsValue{
		state: attr.ValueStateNull,
	}
}

func NewExceptionsValueUnknown() ExceptionsValue {
	return ExceptionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewExceptionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ExceptionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ExceptionsValue Attribute Value",
				"While creating a ExceptionsValue value, a missing attribute value was detected. "+
					"A ExceptionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExceptionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ExceptionsValue Attribute Type",
				"While creating a ExceptionsValue value, an invalid attribute value was detected. "+
					"A ExceptionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExceptionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ExceptionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ExceptionsValue Attribute Value",
				"While creating a ExceptionsValue value, an extra attribute value was detected. "+
					"A ExceptionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ExceptionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewExceptionsValueUnknown(), diags
	}

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return NewExceptionsValueUnknown(), diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return NewExceptionsValueUnknown(), diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	if diags.HasError() {
		return NewExceptionsValueUnknown(), diags
	}

	return ExceptionsValue{
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewExceptionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ExceptionsValue {
	object, diags := NewExceptionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewExceptionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ExceptionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewExceptionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewExceptionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewExceptionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewExceptionsValueMust(ExceptionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ExceptionsType) ValueType(ctx context.Context) attr.Value {
	return ExceptionsValue{}
}

var _ basetypes.ObjectValuable = ExceptionsValue{}

type ExceptionsValue struct {
	SiteIds      basetypes.ListValue `tfsdk:"site_ids"`
	SitegroupIds basetypes.ListValue `tfsdk:"sitegroup_ids"`
	state        attr.ValueState
}

func (v ExceptionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["site_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["sitegroup_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.SiteIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_ids"] = val

		val, err = v.SitegroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sitegroup_ids"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ExceptionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ExceptionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ExceptionsValue) String() string {
	return "ExceptionsValue"
}

func (v ExceptionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	siteIdsVal, d := types.ListValue(types.StringType, v.SiteIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	sitegroupIdsVal, d := types.ListValue(types.StringType, v.SitegroupIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"site_ids":      siteIdsVal,
			"sitegroup_ids": sitegroupIdsVal,
		})

	return objVal, diags
}

func (v ExceptionsValue) Equal(o attr.Value) bool {
	other, ok := o.(ExceptionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.SiteIds.Equal(other.SiteIds) {
		return false
	}

	if !v.SitegroupIds.Equal(other.SitegroupIds) {
		return false
	}

	return true
}

func (v ExceptionsValue) Type(ctx context.Context) attr.Type {
	return ExceptionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ExceptionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
