// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_sites

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func SitesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"sites": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"address": schema.StringAttribute{
							Computed:            true,
							Description:         "full address of the site",
							MarkdownDescription: "full address of the site",
						},
						"alarmtemplate_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id",
							MarkdownDescription: "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id",
						},
						"aptemplate_id": schema.StringAttribute{
							Computed:            true,
							Description:         "AP Template ID, used by APs",
							MarkdownDescription: "AP Template ID, used by APs",
						},
						"country_code": schema.StringAttribute{
							Computed:            true,
							Description:         "country code for the site (for AP config generation), in two-character",
							MarkdownDescription: "country code for the site (for AP config generation), in two-character",
						},
						"created_time": schema.NumberAttribute{
							Computed: true,
						},
						"gatewaytemplate_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Gateway Template ID, used by gateways",
							MarkdownDescription: "Gateway Template ID, used by gateways",
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"latlng": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"lat": schema.Float64Attribute{
									Computed: true,
								},
								"lng": schema.Float64Attribute{
									Computed: true,
								},
							},
							CustomType: LatlngType{
								ObjectType: types.ObjectType{
									AttrTypes: LatlngValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"modified_time": schema.NumberAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"networktemplate_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Network Template ID, this takes precedence over Site Settings",
							MarkdownDescription: "Network Template ID, this takes precedence over Site Settings",
						},
						"notes": schema.StringAttribute{
							Computed:            true,
							Description:         "optional, any notes about the site",
							MarkdownDescription: "optional, any notes about the site",
						},
						"org_id": schema.StringAttribute{
							Computed: true,
						},
						"rftemplate_id": schema.StringAttribute{
							Computed:            true,
							Description:         "RF Template ID, this takes precedence over Site Settings",
							MarkdownDescription: "RF Template ID, this takes precedence over Site Settings",
						},
						"secpolicy_id": schema.StringAttribute{
							Computed:            true,
							Description:         "SecPolicy ID",
							MarkdownDescription: "SecPolicy ID",
						},
						"sitegroup_ids": schema.ListAttribute{
							ElementType:         types.StringType,
							Computed:            true,
							Description:         "sitegroups this site belongs to",
							MarkdownDescription: "sitegroups this site belongs to",
						},
						"sitetemplate_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Site Template ID",
							MarkdownDescription: "Site Template ID",
						},
						"timezone": schema.StringAttribute{
							Computed:            true,
							Description:         "Timezone the site is at",
							MarkdownDescription: "Timezone the site is at",
						},
					},
					CustomType: SitesType{
						ObjectType: types.ObjectType{
							AttrTypes: SitesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type SitesModel struct {
	OrgId types.String `tfsdk:"org_id"`
	Sites types.Set    `tfsdk:"sites"`
}

var _ basetypes.ObjectTypable = SitesType{}

type SitesType struct {
	basetypes.ObjectType
}

func (t SitesType) Equal(o attr.Type) bool {
	other, ok := o.(SitesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SitesType) String() string {
	return "SitesType"
}

func (t SitesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	addressAttribute, ok := attributes["address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address is missing from object`)

		return nil, diags
	}

	addressVal, ok := addressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address expected to be basetypes.StringValue, was: %T`, addressAttribute))
	}

	alarmtemplateIdAttribute, ok := attributes["alarmtemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarmtemplate_id is missing from object`)

		return nil, diags
	}

	alarmtemplateIdVal, ok := alarmtemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarmtemplate_id expected to be basetypes.StringValue, was: %T`, alarmtemplateIdAttribute))
	}

	aptemplateIdAttribute, ok := attributes["aptemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aptemplate_id is missing from object`)

		return nil, diags
	}

	aptemplateIdVal, ok := aptemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aptemplate_id expected to be basetypes.StringValue, was: %T`, aptemplateIdAttribute))
	}

	countryCodeAttribute, ok := attributes["country_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_code is missing from object`)

		return nil, diags
	}

	countryCodeVal, ok := countryCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_code expected to be basetypes.StringValue, was: %T`, countryCodeAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return nil, diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.NumberValue, was: %T`, createdTimeAttribute))
	}

	gatewaytemplateIdAttribute, ok := attributes["gatewaytemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gatewaytemplate_id is missing from object`)

		return nil, diags
	}

	gatewaytemplateIdVal, ok := gatewaytemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gatewaytemplate_id expected to be basetypes.StringValue, was: %T`, gatewaytemplateIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	latlngAttribute, ok := attributes["latlng"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`latlng is missing from object`)

		return nil, diags
	}

	latlngVal, ok := latlngAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`latlng expected to be basetypes.ObjectValue, was: %T`, latlngAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return nil, diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.NumberValue, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networktemplateIdAttribute, ok := attributes["networktemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`networktemplate_id is missing from object`)

		return nil, diags
	}

	networktemplateIdVal, ok := networktemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`networktemplate_id expected to be basetypes.StringValue, was: %T`, networktemplateIdAttribute))
	}

	notesAttribute, ok := attributes["notes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`notes is missing from object`)

		return nil, diags
	}

	notesVal, ok := notesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`notes expected to be basetypes.StringValue, was: %T`, notesAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return nil, diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	rftemplateIdAttribute, ok := attributes["rftemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rftemplate_id is missing from object`)

		return nil, diags
	}

	rftemplateIdVal, ok := rftemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rftemplate_id expected to be basetypes.StringValue, was: %T`, rftemplateIdAttribute))
	}

	secpolicyIdAttribute, ok := attributes["secpolicy_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secpolicy_id is missing from object`)

		return nil, diags
	}

	secpolicyIdVal, ok := secpolicyIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secpolicy_id expected to be basetypes.StringValue, was: %T`, secpolicyIdAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return nil, diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	sitetemplateIdAttribute, ok := attributes["sitetemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitetemplate_id is missing from object`)

		return nil, diags
	}

	sitetemplateIdVal, ok := sitetemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitetemplate_id expected to be basetypes.StringValue, was: %T`, sitetemplateIdAttribute))
	}

	timezoneAttribute, ok := attributes["timezone"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timezone is missing from object`)

		return nil, diags
	}

	timezoneVal, ok := timezoneAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timezone expected to be basetypes.StringValue, was: %T`, timezoneAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SitesValue{
		Address:           addressVal,
		AlarmtemplateId:   alarmtemplateIdVal,
		AptemplateId:      aptemplateIdVal,
		CountryCode:       countryCodeVal,
		CreatedTime:       createdTimeVal,
		GatewaytemplateId: gatewaytemplateIdVal,
		Id:                idVal,
		Latlng:            latlngVal,
		ModifiedTime:      modifiedTimeVal,
		Name:              nameVal,
		NetworktemplateId: networktemplateIdVal,
		Notes:             notesVal,
		OrgId:             orgIdVal,
		RftemplateId:      rftemplateIdVal,
		SecpolicyId:       secpolicyIdVal,
		SitegroupIds:      sitegroupIdsVal,
		SitetemplateId:    sitetemplateIdVal,
		Timezone:          timezoneVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewSitesValueNull() SitesValue {
	return SitesValue{
		state: attr.ValueStateNull,
	}
}

func NewSitesValueUnknown() SitesValue {
	return SitesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSitesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SitesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SitesValue Attribute Value",
				"While creating a SitesValue value, a missing attribute value was detected. "+
					"A SitesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SitesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SitesValue Attribute Type",
				"While creating a SitesValue value, an invalid attribute value was detected. "+
					"A SitesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SitesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SitesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SitesValue Attribute Value",
				"While creating a SitesValue value, an extra attribute value was detected. "+
					"A SitesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SitesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSitesValueUnknown(), diags
	}

	addressAttribute, ok := attributes["address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`address is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	addressVal, ok := addressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`address expected to be basetypes.StringValue, was: %T`, addressAttribute))
	}

	alarmtemplateIdAttribute, ok := attributes["alarmtemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alarmtemplate_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	alarmtemplateIdVal, ok := alarmtemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alarmtemplate_id expected to be basetypes.StringValue, was: %T`, alarmtemplateIdAttribute))
	}

	aptemplateIdAttribute, ok := attributes["aptemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aptemplate_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	aptemplateIdVal, ok := aptemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aptemplate_id expected to be basetypes.StringValue, was: %T`, aptemplateIdAttribute))
	}

	countryCodeAttribute, ok := attributes["country_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_code is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	countryCodeVal, ok := countryCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_code expected to be basetypes.StringValue, was: %T`, countryCodeAttribute))
	}

	createdTimeAttribute, ok := attributes["created_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_time is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	createdTimeVal, ok := createdTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_time expected to be basetypes.NumberValue, was: %T`, createdTimeAttribute))
	}

	gatewaytemplateIdAttribute, ok := attributes["gatewaytemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gatewaytemplate_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	gatewaytemplateIdVal, ok := gatewaytemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gatewaytemplate_id expected to be basetypes.StringValue, was: %T`, gatewaytemplateIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	latlngAttribute, ok := attributes["latlng"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`latlng is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	latlngVal, ok := latlngAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`latlng expected to be basetypes.ObjectValue, was: %T`, latlngAttribute))
	}

	modifiedTimeAttribute, ok := attributes["modified_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`modified_time is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	modifiedTimeVal, ok := modifiedTimeAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`modified_time expected to be basetypes.NumberValue, was: %T`, modifiedTimeAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	networktemplateIdAttribute, ok := attributes["networktemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`networktemplate_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	networktemplateIdVal, ok := networktemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`networktemplate_id expected to be basetypes.StringValue, was: %T`, networktemplateIdAttribute))
	}

	notesAttribute, ok := attributes["notes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`notes is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	notesVal, ok := notesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`notes expected to be basetypes.StringValue, was: %T`, notesAttribute))
	}

	orgIdAttribute, ok := attributes["org_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	orgIdVal, ok := orgIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_id expected to be basetypes.StringValue, was: %T`, orgIdAttribute))
	}

	rftemplateIdAttribute, ok := attributes["rftemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rftemplate_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	rftemplateIdVal, ok := rftemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rftemplate_id expected to be basetypes.StringValue, was: %T`, rftemplateIdAttribute))
	}

	secpolicyIdAttribute, ok := attributes["secpolicy_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`secpolicy_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	secpolicyIdVal, ok := secpolicyIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`secpolicy_id expected to be basetypes.StringValue, was: %T`, secpolicyIdAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	sitetemplateIdAttribute, ok := attributes["sitetemplate_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitetemplate_id is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	sitetemplateIdVal, ok := sitetemplateIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitetemplate_id expected to be basetypes.StringValue, was: %T`, sitetemplateIdAttribute))
	}

	timezoneAttribute, ok := attributes["timezone"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timezone is missing from object`)

		return NewSitesValueUnknown(), diags
	}

	timezoneVal, ok := timezoneAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timezone expected to be basetypes.StringValue, was: %T`, timezoneAttribute))
	}

	if diags.HasError() {
		return NewSitesValueUnknown(), diags
	}

	return SitesValue{
		Address:           addressVal,
		AlarmtemplateId:   alarmtemplateIdVal,
		AptemplateId:      aptemplateIdVal,
		CountryCode:       countryCodeVal,
		CreatedTime:       createdTimeVal,
		GatewaytemplateId: gatewaytemplateIdVal,
		Id:                idVal,
		Latlng:            latlngVal,
		ModifiedTime:      modifiedTimeVal,
		Name:              nameVal,
		NetworktemplateId: networktemplateIdVal,
		Notes:             notesVal,
		OrgId:             orgIdVal,
		RftemplateId:      rftemplateIdVal,
		SecpolicyId:       secpolicyIdVal,
		SitegroupIds:      sitegroupIdsVal,
		SitetemplateId:    sitetemplateIdVal,
		Timezone:          timezoneVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewSitesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SitesValue {
	object, diags := NewSitesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSitesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SitesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSitesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSitesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSitesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSitesValueMust(SitesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SitesType) ValueType(ctx context.Context) attr.Value {
	return SitesValue{}
}

var _ basetypes.ObjectValuable = SitesValue{}

type SitesValue struct {
	Address           basetypes.StringValue `tfsdk:"address"`
	AlarmtemplateId   basetypes.StringValue `tfsdk:"alarmtemplate_id"`
	AptemplateId      basetypes.StringValue `tfsdk:"aptemplate_id"`
	CountryCode       basetypes.StringValue `tfsdk:"country_code"`
	CreatedTime       basetypes.NumberValue `tfsdk:"created_time"`
	GatewaytemplateId basetypes.StringValue `tfsdk:"gatewaytemplate_id"`
	Id                basetypes.StringValue `tfsdk:"id"`
	Latlng            basetypes.ObjectValue `tfsdk:"latlng"`
	ModifiedTime      basetypes.NumberValue `tfsdk:"modified_time"`
	Name              basetypes.StringValue `tfsdk:"name"`
	NetworktemplateId basetypes.StringValue `tfsdk:"networktemplate_id"`
	Notes             basetypes.StringValue `tfsdk:"notes"`
	OrgId             basetypes.StringValue `tfsdk:"org_id"`
	RftemplateId      basetypes.StringValue `tfsdk:"rftemplate_id"`
	SecpolicyId       basetypes.StringValue `tfsdk:"secpolicy_id"`
	SitegroupIds      basetypes.ListValue   `tfsdk:"sitegroup_ids"`
	SitetemplateId    basetypes.StringValue `tfsdk:"sitetemplate_id"`
	Timezone          basetypes.StringValue `tfsdk:"timezone"`
	state             attr.ValueState
}

func (v SitesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 18)

	var val tftypes.Value
	var err error

	attrTypes["address"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["alarmtemplate_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["aptemplate_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["country_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_time"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["gatewaytemplate_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["latlng"] = basetypes.ObjectType{
		AttrTypes: LatlngValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["modified_time"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["networktemplate_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["notes"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["rftemplate_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["secpolicy_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sitegroup_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["sitetemplate_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["timezone"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 18)

		val, err = v.Address.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["address"] = val

		val, err = v.AlarmtemplateId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alarmtemplate_id"] = val

		val, err = v.AptemplateId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["aptemplate_id"] = val

		val, err = v.CountryCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["country_code"] = val

		val, err = v.CreatedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_time"] = val

		val, err = v.GatewaytemplateId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gatewaytemplate_id"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Latlng.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["latlng"] = val

		val, err = v.ModifiedTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["modified_time"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.NetworktemplateId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["networktemplate_id"] = val

		val, err = v.Notes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["notes"] = val

		val, err = v.OrgId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_id"] = val

		val, err = v.RftemplateId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rftemplate_id"] = val

		val, err = v.SecpolicyId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["secpolicy_id"] = val

		val, err = v.SitegroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sitegroup_ids"] = val

		val, err = v.SitetemplateId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sitetemplate_id"] = val

		val, err = v.Timezone.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["timezone"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SitesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SitesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SitesValue) String() string {
	return "SitesValue"
}

func (v SitesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var latlng basetypes.ObjectValue

	if v.Latlng.IsNull() {
		latlng = types.ObjectNull(
			LatlngValue{}.AttributeTypes(ctx),
		)
	}

	if v.Latlng.IsUnknown() {
		latlng = types.ObjectUnknown(
			LatlngValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Latlng.IsNull() && !v.Latlng.IsUnknown() {
		latlng = types.ObjectValueMust(
			LatlngValue{}.AttributeTypes(ctx),
			v.Latlng.Attributes(),
		)
	}

	sitegroupIdsVal, d := types.ListValue(types.StringType, v.SitegroupIds.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"address":            basetypes.StringType{},
			"alarmtemplate_id":   basetypes.StringType{},
			"aptemplate_id":      basetypes.StringType{},
			"country_code":       basetypes.StringType{},
			"created_time":       basetypes.NumberType{},
			"gatewaytemplate_id": basetypes.StringType{},
			"id":                 basetypes.StringType{},
			"latlng": basetypes.ObjectType{
				AttrTypes: LatlngValue{}.AttributeTypes(ctx),
			},
			"modified_time":      basetypes.NumberType{},
			"name":               basetypes.StringType{},
			"networktemplate_id": basetypes.StringType{},
			"notes":              basetypes.StringType{},
			"org_id":             basetypes.StringType{},
			"rftemplate_id":      basetypes.StringType{},
			"secpolicy_id":       basetypes.StringType{},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitetemplate_id": basetypes.StringType{},
			"timezone":        basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"address":            basetypes.StringType{},
		"alarmtemplate_id":   basetypes.StringType{},
		"aptemplate_id":      basetypes.StringType{},
		"country_code":       basetypes.StringType{},
		"created_time":       basetypes.NumberType{},
		"gatewaytemplate_id": basetypes.StringType{},
		"id":                 basetypes.StringType{},
		"latlng": basetypes.ObjectType{
			AttrTypes: LatlngValue{}.AttributeTypes(ctx),
		},
		"modified_time":      basetypes.NumberType{},
		"name":               basetypes.StringType{},
		"networktemplate_id": basetypes.StringType{},
		"notes":              basetypes.StringType{},
		"org_id":             basetypes.StringType{},
		"rftemplate_id":      basetypes.StringType{},
		"secpolicy_id":       basetypes.StringType{},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitetemplate_id": basetypes.StringType{},
		"timezone":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"address":            v.Address,
			"alarmtemplate_id":   v.AlarmtemplateId,
			"aptemplate_id":      v.AptemplateId,
			"country_code":       v.CountryCode,
			"created_time":       v.CreatedTime,
			"gatewaytemplate_id": v.GatewaytemplateId,
			"id":                 v.Id,
			"latlng":             latlng,
			"modified_time":      v.ModifiedTime,
			"name":               v.Name,
			"networktemplate_id": v.NetworktemplateId,
			"notes":              v.Notes,
			"org_id":             v.OrgId,
			"rftemplate_id":      v.RftemplateId,
			"secpolicy_id":       v.SecpolicyId,
			"sitegroup_ids":      sitegroupIdsVal,
			"sitetemplate_id":    v.SitetemplateId,
			"timezone":           v.Timezone,
		})

	return objVal, diags
}

func (v SitesValue) Equal(o attr.Value) bool {
	other, ok := o.(SitesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Address.Equal(other.Address) {
		return false
	}

	if !v.AlarmtemplateId.Equal(other.AlarmtemplateId) {
		return false
	}

	if !v.AptemplateId.Equal(other.AptemplateId) {
		return false
	}

	if !v.CountryCode.Equal(other.CountryCode) {
		return false
	}

	if !v.CreatedTime.Equal(other.CreatedTime) {
		return false
	}

	if !v.GatewaytemplateId.Equal(other.GatewaytemplateId) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Latlng.Equal(other.Latlng) {
		return false
	}

	if !v.ModifiedTime.Equal(other.ModifiedTime) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.NetworktemplateId.Equal(other.NetworktemplateId) {
		return false
	}

	if !v.Notes.Equal(other.Notes) {
		return false
	}

	if !v.OrgId.Equal(other.OrgId) {
		return false
	}

	if !v.RftemplateId.Equal(other.RftemplateId) {
		return false
	}

	if !v.SecpolicyId.Equal(other.SecpolicyId) {
		return false
	}

	if !v.SitegroupIds.Equal(other.SitegroupIds) {
		return false
	}

	if !v.SitetemplateId.Equal(other.SitetemplateId) {
		return false
	}

	if !v.Timezone.Equal(other.Timezone) {
		return false
	}

	return true
}

func (v SitesValue) Type(ctx context.Context) attr.Type {
	return SitesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SitesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"address":            basetypes.StringType{},
		"alarmtemplate_id":   basetypes.StringType{},
		"aptemplate_id":      basetypes.StringType{},
		"country_code":       basetypes.StringType{},
		"created_time":       basetypes.NumberType{},
		"gatewaytemplate_id": basetypes.StringType{},
		"id":                 basetypes.StringType{},
		"latlng": basetypes.ObjectType{
			AttrTypes: LatlngValue{}.AttributeTypes(ctx),
		},
		"modified_time":      basetypes.NumberType{},
		"name":               basetypes.StringType{},
		"networktemplate_id": basetypes.StringType{},
		"notes":              basetypes.StringType{},
		"org_id":             basetypes.StringType{},
		"rftemplate_id":      basetypes.StringType{},
		"secpolicy_id":       basetypes.StringType{},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitetemplate_id": basetypes.StringType{},
		"timezone":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LatlngType{}

type LatlngType struct {
	basetypes.ObjectType
}

func (t LatlngType) Equal(o attr.Type) bool {
	other, ok := o.(LatlngType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LatlngType) String() string {
	return "LatlngType"
}

func (t LatlngType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	latAttribute, ok := attributes["lat"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lat is missing from object`)

		return nil, diags
	}

	latVal, ok := latAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lat expected to be basetypes.Float64Value, was: %T`, latAttribute))
	}

	lngAttribute, ok := attributes["lng"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lng is missing from object`)

		return nil, diags
	}

	lngVal, ok := lngAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lng expected to be basetypes.Float64Value, was: %T`, lngAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LatlngValue{
		Lat:   latVal,
		Lng:   lngVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLatlngValueNull() LatlngValue {
	return LatlngValue{
		state: attr.ValueStateNull,
	}
}

func NewLatlngValueUnknown() LatlngValue {
	return LatlngValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLatlngValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LatlngValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LatlngValue Attribute Value",
				"While creating a LatlngValue value, a missing attribute value was detected. "+
					"A LatlngValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LatlngValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LatlngValue Attribute Type",
				"While creating a LatlngValue value, an invalid attribute value was detected. "+
					"A LatlngValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LatlngValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LatlngValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LatlngValue Attribute Value",
				"While creating a LatlngValue value, an extra attribute value was detected. "+
					"A LatlngValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LatlngValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLatlngValueUnknown(), diags
	}

	latAttribute, ok := attributes["lat"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lat is missing from object`)

		return NewLatlngValueUnknown(), diags
	}

	latVal, ok := latAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lat expected to be basetypes.Float64Value, was: %T`, latAttribute))
	}

	lngAttribute, ok := attributes["lng"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lng is missing from object`)

		return NewLatlngValueUnknown(), diags
	}

	lngVal, ok := lngAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lng expected to be basetypes.Float64Value, was: %T`, lngAttribute))
	}

	if diags.HasError() {
		return NewLatlngValueUnknown(), diags
	}

	return LatlngValue{
		Lat:   latVal,
		Lng:   lngVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLatlngValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LatlngValue {
	object, diags := NewLatlngValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLatlngValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LatlngType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLatlngValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLatlngValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLatlngValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLatlngValueMust(LatlngValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LatlngType) ValueType(ctx context.Context) attr.Value {
	return LatlngValue{}
}

var _ basetypes.ObjectValuable = LatlngValue{}

type LatlngValue struct {
	Lat   basetypes.Float64Value `tfsdk:"lat"`
	Lng   basetypes.Float64Value `tfsdk:"lng"`
	state attr.ValueState
}

func (v LatlngValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["lat"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["lng"] = basetypes.Float64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Lat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lat"] = val

		val, err = v.Lng.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lng"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LatlngValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LatlngValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LatlngValue) String() string {
	return "LatlngValue"
}

func (v LatlngValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"lat": basetypes.Float64Type{},
		"lng": basetypes.Float64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"lat": v.Lat,
			"lng": v.Lng,
		})

	return objVal, diags
}

func (v LatlngValue) Equal(o attr.Value) bool {
	other, ok := o.(LatlngValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Lat.Equal(other.Lat) {
		return false
	}

	if !v.Lng.Equal(other.Lng) {
		return false
	}

	return true
}

func (v LatlngValue) Type(ctx context.Context) attr.Type {
	return LatlngType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LatlngValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"lat": basetypes.Float64Type{},
		"lng": basetypes.Float64Type{},
	}
}
