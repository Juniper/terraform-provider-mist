// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_org_alarmtemplate

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrgAlarmtemplateResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"delivery": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"additional_emails": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of additional email string to deliver the alarms via emails",
						MarkdownDescription: "List of additional email string to deliver the alarms via emails",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
					},
					"enabled": schema.BoolAttribute{
						Required:            true,
						Description:         "Whether to enable the alarm delivery via emails or not",
						MarkdownDescription: "Whether to enable the alarm delivery via emails or not",
					},
					"to_org_admins": schema.BoolAttribute{
						Optional:            true,
						Description:         "Whether to deliver the alarms via emails to Org admins or not",
						MarkdownDescription: "Whether to deliver the alarms via emails to Org admins or not",
					},
					"to_site_admins": schema.BoolAttribute{
						Optional:            true,
						Description:         "Whether to deliver the alarms via emails to Site admins or not",
						MarkdownDescription: "Whether to deliver the alarms via emails to Site admins or not",
					},
				},
				CustomType: DeliveryType{
					ObjectType: types.ObjectType{
						AttrTypes: DeliveryValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Delivery object to configure the alarm delivery",
				MarkdownDescription: "Delivery object to configure the alarm delivery",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique ID of the object instance in the Mist Organization",
				MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Some string to name the alarm template",
				MarkdownDescription: "Some string to name the alarm template",
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"rules": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"delivery": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"additional_emails": schema.ListAttribute{
									ElementType:         types.StringType,
									Optional:            true,
									Computed:            true,
									Description:         "List of additional email string to deliver the alarms via emails",
									MarkdownDescription: "List of additional email string to deliver the alarms via emails",
									Default:             listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
								},
								"enabled": schema.BoolAttribute{
									Required:            true,
									Description:         "Whether to enable the alarm delivery via emails or not",
									MarkdownDescription: "Whether to enable the alarm delivery via emails or not",
								},
								"to_org_admins": schema.BoolAttribute{
									Optional:            true,
									Description:         "Whether to deliver the alarms via emails to Org admins or not",
									MarkdownDescription: "Whether to deliver the alarms via emails to Org admins or not",
								},
								"to_site_admins": schema.BoolAttribute{
									Optional:            true,
									Description:         "Whether to deliver the alarms via emails to Site admins or not",
									MarkdownDescription: "Whether to deliver the alarms via emails to Site admins or not",
								},
							},
							CustomType: DeliveryType{
								ObjectType: types.ObjectType{
									AttrTypes: DeliveryValue{}.AttributeTypes(ctx),
								},
							},
							Optional:            true,
							Description:         "Delivery object to configure the alarm delivery",
							MarkdownDescription: "Delivery object to configure the alarm delivery",
						},
						"enabled": schema.BoolAttribute{
							Optional: true,
						},
					},
					CustomType: RulesType{
						ObjectType: types.ObjectType{
							AttrTypes: RulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `mist_const_alarms` data source).",
				MarkdownDescription: "Alarm Rules object to configure the individual alarm keys/types. Property key is the alarm name (list available with the `mist_const_alarms` data source).",
				Validators: []validator.Map{
					mapvalidator.SizeAtLeast(1),
				},
			},
		},
	}
}

type OrgAlarmtemplateModel struct {
	Delivery DeliveryValue `tfsdk:"delivery"`
	Id       types.String  `tfsdk:"id"`
	Name     types.String  `tfsdk:"name"`
	OrgId    types.String  `tfsdk:"org_id"`
	Rules    types.Map     `tfsdk:"rules"`
}

var _ basetypes.ObjectTypable = DeliveryType{}

type DeliveryType struct {
	basetypes.ObjectType
}

func (t DeliveryType) Equal(o attr.Type) bool {
	other, ok := o.(DeliveryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DeliveryType) String() string {
	return "DeliveryType"
}

func (t DeliveryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	additionalEmailsAttribute, ok := attributes["additional_emails"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_emails is missing from object`)

		return nil, diags
	}

	additionalEmailsVal, ok := additionalEmailsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_emails expected to be basetypes.ListValue, was: %T`, additionalEmailsAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	toOrgAdminsAttribute, ok := attributes["to_org_admins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_org_admins is missing from object`)

		return nil, diags
	}

	toOrgAdminsVal, ok := toOrgAdminsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_org_admins expected to be basetypes.BoolValue, was: %T`, toOrgAdminsAttribute))
	}

	toSiteAdminsAttribute, ok := attributes["to_site_admins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_site_admins is missing from object`)

		return nil, diags
	}

	toSiteAdminsVal, ok := toSiteAdminsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_site_admins expected to be basetypes.BoolValue, was: %T`, toSiteAdminsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DeliveryValue{
		AdditionalEmails: additionalEmailsVal,
		Enabled:          enabledVal,
		ToOrgAdmins:      toOrgAdminsVal,
		ToSiteAdmins:     toSiteAdminsVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewDeliveryValueNull() DeliveryValue {
	return DeliveryValue{
		state: attr.ValueStateNull,
	}
}

func NewDeliveryValueUnknown() DeliveryValue {
	return DeliveryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDeliveryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DeliveryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DeliveryValue Attribute Value",
				"While creating a DeliveryValue value, a missing attribute value was detected. "+
					"A DeliveryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DeliveryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DeliveryValue Attribute Type",
				"While creating a DeliveryValue value, an invalid attribute value was detected. "+
					"A DeliveryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DeliveryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DeliveryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DeliveryValue Attribute Value",
				"While creating a DeliveryValue value, an extra attribute value was detected. "+
					"A DeliveryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DeliveryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDeliveryValueUnknown(), diags
	}

	additionalEmailsAttribute, ok := attributes["additional_emails"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_emails is missing from object`)

		return NewDeliveryValueUnknown(), diags
	}

	additionalEmailsVal, ok := additionalEmailsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_emails expected to be basetypes.ListValue, was: %T`, additionalEmailsAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewDeliveryValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	toOrgAdminsAttribute, ok := attributes["to_org_admins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_org_admins is missing from object`)

		return NewDeliveryValueUnknown(), diags
	}

	toOrgAdminsVal, ok := toOrgAdminsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_org_admins expected to be basetypes.BoolValue, was: %T`, toOrgAdminsAttribute))
	}

	toSiteAdminsAttribute, ok := attributes["to_site_admins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`to_site_admins is missing from object`)

		return NewDeliveryValueUnknown(), diags
	}

	toSiteAdminsVal, ok := toSiteAdminsAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`to_site_admins expected to be basetypes.BoolValue, was: %T`, toSiteAdminsAttribute))
	}

	if diags.HasError() {
		return NewDeliveryValueUnknown(), diags
	}

	return DeliveryValue{
		AdditionalEmails: additionalEmailsVal,
		Enabled:          enabledVal,
		ToOrgAdmins:      toOrgAdminsVal,
		ToSiteAdmins:     toSiteAdminsVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewDeliveryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DeliveryValue {
	object, diags := NewDeliveryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDeliveryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DeliveryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDeliveryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDeliveryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDeliveryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDeliveryValueMust(DeliveryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DeliveryType) ValueType(ctx context.Context) attr.Value {
	return DeliveryValue{}
}

var _ basetypes.ObjectValuable = DeliveryValue{}

type DeliveryValue struct {
	AdditionalEmails basetypes.ListValue `tfsdk:"additional_emails"`
	Enabled          basetypes.BoolValue `tfsdk:"enabled"`
	ToOrgAdmins      basetypes.BoolValue `tfsdk:"to_org_admins"`
	ToSiteAdmins     basetypes.BoolValue `tfsdk:"to_site_admins"`
	state            attr.ValueState
}

func (v DeliveryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["additional_emails"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["to_org_admins"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["to_site_admins"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AdditionalEmails.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["additional_emails"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.ToOrgAdmins.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["to_org_admins"] = val

		val, err = v.ToSiteAdmins.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["to_site_admins"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DeliveryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DeliveryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DeliveryValue) String() string {
	return "DeliveryValue"
}

func (v DeliveryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	additionalEmailsVal, d := types.ListValue(types.StringType, v.AdditionalEmails.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"additional_emails": basetypes.ListType{
				ElemType: types.StringType,
			},
			"enabled":        basetypes.BoolType{},
			"to_org_admins":  basetypes.BoolType{},
			"to_site_admins": basetypes.BoolType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"additional_emails": basetypes.ListType{
			ElemType: types.StringType,
		},
		"enabled":        basetypes.BoolType{},
		"to_org_admins":  basetypes.BoolType{},
		"to_site_admins": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"additional_emails": additionalEmailsVal,
			"enabled":           v.Enabled,
			"to_org_admins":     v.ToOrgAdmins,
			"to_site_admins":    v.ToSiteAdmins,
		})

	return objVal, diags
}

func (v DeliveryValue) Equal(o attr.Value) bool {
	other, ok := o.(DeliveryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdditionalEmails.Equal(other.AdditionalEmails) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.ToOrgAdmins.Equal(other.ToOrgAdmins) {
		return false
	}

	if !v.ToSiteAdmins.Equal(other.ToSiteAdmins) {
		return false
	}

	return true
}

func (v DeliveryValue) Type(ctx context.Context) attr.Type {
	return DeliveryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DeliveryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"additional_emails": basetypes.ListType{
			ElemType: types.StringType,
		},
		"enabled":        basetypes.BoolType{},
		"to_org_admins":  basetypes.BoolType{},
		"to_site_admins": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = RulesType{}

type RulesType struct {
	basetypes.ObjectType
}

func (t RulesType) Equal(o attr.Type) bool {
	other, ok := o.(RulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RulesType) String() string {
	return "RulesType"
}

func (t RulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	deliveryAttribute, ok := attributes["delivery"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delivery is missing from object`)

		return nil, diags
	}

	deliveryVal, ok := deliveryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delivery expected to be basetypes.ObjectValue, was: %T`, deliveryAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RulesValue{
		Delivery: deliveryVal,
		Enabled:  enabledVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewRulesValueNull() RulesValue {
	return RulesValue{
		state: attr.ValueStateNull,
	}
}

func NewRulesValueUnknown() RulesValue {
	return RulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RulesValue Attribute Value",
				"While creating a RulesValue value, a missing attribute value was detected. "+
					"A RulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RulesValue Attribute Type",
				"While creating a RulesValue value, an invalid attribute value was detected. "+
					"A RulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RulesValue Attribute Value",
				"While creating a RulesValue value, an extra attribute value was detected. "+
					"A RulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRulesValueUnknown(), diags
	}

	deliveryAttribute, ok := attributes["delivery"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delivery is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	deliveryVal, ok := deliveryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delivery expected to be basetypes.ObjectValue, was: %T`, deliveryAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewRulesValueUnknown(), diags
	}

	return RulesValue{
		Delivery: deliveryVal,
		Enabled:  enabledVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RulesValue {
	object, diags := NewRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRulesValueMust(RulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RulesType) ValueType(ctx context.Context) attr.Value {
	return RulesValue{}
}

var _ basetypes.ObjectValuable = RulesValue{}

type RulesValue struct {
	Delivery basetypes.ObjectValue `tfsdk:"delivery"`
	Enabled  basetypes.BoolValue   `tfsdk:"enabled"`
	state    attr.ValueState
}

func (v RulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["delivery"] = basetypes.ObjectType{
		AttrTypes: DeliveryValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Delivery.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delivery"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RulesValue) String() string {
	return "RulesValue"
}

func (v RulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var delivery basetypes.ObjectValue

	if v.Delivery.IsNull() {
		delivery = types.ObjectNull(
			DeliveryValue{}.AttributeTypes(ctx),
		)
	}

	if v.Delivery.IsUnknown() {
		delivery = types.ObjectUnknown(
			DeliveryValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Delivery.IsNull() && !v.Delivery.IsUnknown() {
		delivery = types.ObjectValueMust(
			DeliveryValue{}.AttributeTypes(ctx),
			v.Delivery.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"delivery": basetypes.ObjectType{
			AttrTypes: DeliveryValue{}.AttributeTypes(ctx),
		},
		"enabled": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"delivery": delivery,
			"enabled":  v.Enabled,
		})

	return objVal, diags
}

func (v RulesValue) Equal(o attr.Value) bool {
	other, ok := o.(RulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Delivery.Equal(other.Delivery) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v RulesValue) Type(ctx context.Context) attr.Type {
	return RulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"delivery": basetypes.ObjectType{
			AttrTypes: DeliveryValue{}.AttributeTypes(ctx),
		},
		"enabled": basetypes.BoolType{},
	}
}
