// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_org_avprofile

import (
	"context"
	"github.com/Juniper/terraform-provider-mist/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrgAvprofileResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"fallback_action": schema.StringAttribute{
				Optional:            true,
				Description:         "enum: `block`, `log-and-permit`, `permit`",
				MarkdownDescription: "enum: `block`, `log-and-permit`, `permit`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"block",
						"log-and-permit",
						"permit",
					),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique ID of the object instance in the Mist Organization",
				MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"max_filesize": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "In KB",
				MarkdownDescription: "In KB",
				Validators: []validator.Int64{
					int64validator.Between(20, 40000),
				},
				Default: int64default.StaticInt64(10000),
			},
			"mime_whitelist": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
				Validators: []validator.List{
					listvalidator.UniqueValues(),
					listvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(
							regexp.MustCompile(`^\w+/\w+$`),
							"Invalid MIME types (application/pdf, image/png, etc.)",
						),
					),
				},
				Default: listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
			},
			"name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.All(stringvalidator.LengthBetween(2, 32), mistvalidator.ParseName()),
				},
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"protocols": schema.ListAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`",
				MarkdownDescription: "List of protocols to monitor. enum: `ftp`, `http`, `imap`, `pop3`, `smtp`",
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
					listvalidator.ValueStringsAre(
						stringvalidator.OneOf(
							"ftp",
							"http",
							"imap",
							"pop3",
							"smtp",
						),
					),
				},
			},
			"url_whitelist": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
				Validators: []validator.List{
					listvalidator.UniqueValues(),
					listvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(
							regexp.MustCompile(`\w+\.\w+$`),
							"Invalid URL",
						),
					),
				},
				Default: listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
			},
		},
	}
}

type OrgAvprofileModel struct {
	FallbackAction types.String `tfsdk:"fallback_action"`
	Id             types.String `tfsdk:"id"`
	MaxFilesize    types.Int64  `tfsdk:"max_filesize"`
	MimeWhitelist  types.List   `tfsdk:"mime_whitelist"`
	Name           types.String `tfsdk:"name"`
	OrgId          types.String `tfsdk:"org_id"`
	Protocols      types.List   `tfsdk:"protocols"`
	UrlWhitelist   types.List   `tfsdk:"url_whitelist"`
}
