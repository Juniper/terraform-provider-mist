// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_org_nacrule

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrgNacruleResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"action": schema.StringAttribute{
				Required:            true,
				Description:         "enum: `allow`, `block`",
				MarkdownDescription: "enum: `allow`, `block`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"allow",
						"block",
					),
				},
			},
			"apply_tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "All optional, this goes into Access-Accept",
				MarkdownDescription: "All optional, this goes into Access-Accept",
				Default:             listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
			},
			"enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enabled or not",
				MarkdownDescription: "Enabled or not",
				Default:             booldefault.StaticBool(true),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique ID of the object instance in the Mist Organization",
				MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"matching": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"auth_type": schema.StringAttribute{
						Optional:            true,
						Description:         "enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `eap-peap`",
						MarkdownDescription: "enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `eap-peap`",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"",
								"cert",
								"device-auth",
								"eap-teap",
								"eap-tls",
								"eap-ttls",
								"idp",
								"mab",
								"eap-peap",
							),
						},
					},
					"family": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device families to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed family values",
						MarkdownDescription: "List of client device families to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed family values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"mfg": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device models to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed model values",
						MarkdownDescription: "List of client device models to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed model values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"model": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device manufacturers to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed mfg values",
						MarkdownDescription: "List of client device manufacturers to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed mfg values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"nactags": schema.ListAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"os_type": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device os types to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed os_type values",
						MarkdownDescription: "List of client device os types to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed os_type values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"port_types": schema.ListAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"site_ids": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of site ids to match",
						MarkdownDescription: "List of site ids to match",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"sitegroup_ids": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of sitegroup ids to match",
						MarkdownDescription: "List of sitegroup ids to match",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"vendor": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of vendors to match",
						MarkdownDescription: "List of vendors to match",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
				},
				CustomType: MatchingType{
					ObjectType: types.ObjectType{
						AttrTypes: MatchingValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
			"name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(1, 64),
				},
			},
			"not_matching": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"auth_type": schema.StringAttribute{
						Optional:            true,
						Description:         "enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `eap-peap`",
						MarkdownDescription: "enum: `cert`, `device-auth`, `eap-teap`, `eap-tls`, `eap-ttls`, `idp`, `mab`, `eap-peap`",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"",
								"cert",
								"device-auth",
								"eap-teap",
								"eap-tls",
								"eap-ttls",
								"idp",
								"mab",
								"eap-peap",
							),
						},
					},
					"family": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device families to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed family values",
						MarkdownDescription: "List of client device families to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed family values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"mfg": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device models to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed model values",
						MarkdownDescription: "List of client device models to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed model values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"model": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device manufacturers to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed mfg values",
						MarkdownDescription: "List of client device manufacturers to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed mfg values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"nactags": schema.ListAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"os_type": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of client device os types to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed os_type values",
						MarkdownDescription: "List of client device os types to match. Refer to [List Fingerprint Types]]($e/Constants%20Definitions/listFingerprintTypes) for allowed os_type values",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"port_types": schema.ListAttribute{
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"site_ids": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of site ids to match",
						MarkdownDescription: "List of site ids to match",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"sitegroup_ids": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of sitegroup ids to match",
						MarkdownDescription: "List of sitegroup ids to match",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
					"vendor": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "List of vendors to match",
						MarkdownDescription: "List of vendors to match",
						Validators: []validator.List{
							listvalidator.SizeAtLeast(1),
						},
						Default: listdefault.StaticValue(types.ListNull(types.StringType)),
					},
				},
				CustomType: NotMatchingType{
					ObjectType: types.ObjectType{
						AttrTypes: NotMatchingValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
			"order": schema.Int64Attribute{
				Required:            true,
				Description:         "Order of the rule, lower value implies higher priority",
				MarkdownDescription: "Order of the rule, lower value implies higher priority",
				Validators: []validator.Int64{
					int64validator.AtLeast(0),
				},
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type OrgNacruleModel struct {
	Action      types.String     `tfsdk:"action"`
	ApplyTags   types.List       `tfsdk:"apply_tags"`
	Enabled     types.Bool       `tfsdk:"enabled"`
	Id          types.String     `tfsdk:"id"`
	Matching    MatchingValue    `tfsdk:"matching"`
	Name        types.String     `tfsdk:"name"`
	NotMatching NotMatchingValue `tfsdk:"not_matching"`
	Order       types.Int64      `tfsdk:"order"`
	OrgId       types.String     `tfsdk:"org_id"`
}

var _ basetypes.ObjectTypable = MatchingType{}

type MatchingType struct {
	basetypes.ObjectType
}

func (t MatchingType) Equal(o attr.Type) bool {
	other, ok := o.(MatchingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MatchingType) String() string {
	return "MatchingType"
}

func (t MatchingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	authTypeAttribute, ok := attributes["auth_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_type is missing from object`)

		return nil, diags
	}

	authTypeVal, ok := authTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_type expected to be basetypes.StringValue, was: %T`, authTypeAttribute))
	}

	familyAttribute, ok := attributes["family"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`family is missing from object`)

		return nil, diags
	}

	familyVal, ok := familyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`family expected to be basetypes.ListValue, was: %T`, familyAttribute))
	}

	mfgAttribute, ok := attributes["mfg"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mfg is missing from object`)

		return nil, diags
	}

	mfgVal, ok := mfgAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mfg expected to be basetypes.ListValue, was: %T`, mfgAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return nil, diags
	}

	modelVal, ok := modelAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.ListValue, was: %T`, modelAttribute))
	}

	nactagsAttribute, ok := attributes["nactags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nactags is missing from object`)

		return nil, diags
	}

	nactagsVal, ok := nactagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nactags expected to be basetypes.ListValue, was: %T`, nactagsAttribute))
	}

	osTypeAttribute, ok := attributes["os_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os_type is missing from object`)

		return nil, diags
	}

	osTypeVal, ok := osTypeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os_type expected to be basetypes.ListValue, was: %T`, osTypeAttribute))
	}

	portTypesAttribute, ok := attributes["port_types"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_types is missing from object`)

		return nil, diags
	}

	portTypesVal, ok := portTypesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_types expected to be basetypes.ListValue, was: %T`, portTypesAttribute))
	}

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return nil, diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return nil, diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	vendorAttribute, ok := attributes["vendor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vendor is missing from object`)

		return nil, diags
	}

	vendorVal, ok := vendorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vendor expected to be basetypes.ListValue, was: %T`, vendorAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MatchingValue{
		AuthType:     authTypeVal,
		Family:       familyVal,
		Mfg:          mfgVal,
		Model:        modelVal,
		Nactags:      nactagsVal,
		OsType:       osTypeVal,
		PortTypes:    portTypesVal,
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		Vendor:       vendorVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMatchingValueNull() MatchingValue {
	return MatchingValue{
		state: attr.ValueStateNull,
	}
}

func NewMatchingValueUnknown() MatchingValue {
	return MatchingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMatchingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MatchingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MatchingValue Attribute Value",
				"While creating a MatchingValue value, a missing attribute value was detected. "+
					"A MatchingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MatchingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MatchingValue Attribute Type",
				"While creating a MatchingValue value, an invalid attribute value was detected. "+
					"A MatchingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MatchingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MatchingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MatchingValue Attribute Value",
				"While creating a MatchingValue value, an extra attribute value was detected. "+
					"A MatchingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MatchingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMatchingValueUnknown(), diags
	}

	authTypeAttribute, ok := attributes["auth_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_type is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	authTypeVal, ok := authTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_type expected to be basetypes.StringValue, was: %T`, authTypeAttribute))
	}

	familyAttribute, ok := attributes["family"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`family is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	familyVal, ok := familyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`family expected to be basetypes.ListValue, was: %T`, familyAttribute))
	}

	mfgAttribute, ok := attributes["mfg"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mfg is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	mfgVal, ok := mfgAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mfg expected to be basetypes.ListValue, was: %T`, mfgAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	modelVal, ok := modelAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.ListValue, was: %T`, modelAttribute))
	}

	nactagsAttribute, ok := attributes["nactags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nactags is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	nactagsVal, ok := nactagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nactags expected to be basetypes.ListValue, was: %T`, nactagsAttribute))
	}

	osTypeAttribute, ok := attributes["os_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os_type is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	osTypeVal, ok := osTypeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os_type expected to be basetypes.ListValue, was: %T`, osTypeAttribute))
	}

	portTypesAttribute, ok := attributes["port_types"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_types is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	portTypesVal, ok := portTypesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_types expected to be basetypes.ListValue, was: %T`, portTypesAttribute))
	}

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	vendorAttribute, ok := attributes["vendor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vendor is missing from object`)

		return NewMatchingValueUnknown(), diags
	}

	vendorVal, ok := vendorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vendor expected to be basetypes.ListValue, was: %T`, vendorAttribute))
	}

	if diags.HasError() {
		return NewMatchingValueUnknown(), diags
	}

	return MatchingValue{
		AuthType:     authTypeVal,
		Family:       familyVal,
		Mfg:          mfgVal,
		Model:        modelVal,
		Nactags:      nactagsVal,
		OsType:       osTypeVal,
		PortTypes:    portTypesVal,
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		Vendor:       vendorVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewMatchingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MatchingValue {
	object, diags := NewMatchingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMatchingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MatchingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMatchingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMatchingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMatchingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMatchingValueMust(MatchingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MatchingType) ValueType(ctx context.Context) attr.Value {
	return MatchingValue{}
}

var _ basetypes.ObjectValuable = MatchingValue{}

type MatchingValue struct {
	AuthType     basetypes.StringValue `tfsdk:"auth_type"`
	Family       basetypes.ListValue   `tfsdk:"family"`
	Mfg          basetypes.ListValue   `tfsdk:"mfg"`
	Model        basetypes.ListValue   `tfsdk:"model"`
	Nactags      basetypes.ListValue   `tfsdk:"nactags"`
	OsType       basetypes.ListValue   `tfsdk:"os_type"`
	PortTypes    basetypes.ListValue   `tfsdk:"port_types"`
	SiteIds      basetypes.ListValue   `tfsdk:"site_ids"`
	SitegroupIds basetypes.ListValue   `tfsdk:"sitegroup_ids"`
	Vendor       basetypes.ListValue   `tfsdk:"vendor"`
	state        attr.ValueState
}

func (v MatchingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["auth_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["family"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["mfg"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["model"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["nactags"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["os_type"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["port_types"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["site_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["sitegroup_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["vendor"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.AuthType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_type"] = val

		val, err = v.Family.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["family"] = val

		val, err = v.Mfg.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mfg"] = val

		val, err = v.Model.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["model"] = val

		val, err = v.Nactags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nactags"] = val

		val, err = v.OsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["os_type"] = val

		val, err = v.PortTypes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_types"] = val

		val, err = v.SiteIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_ids"] = val

		val, err = v.SitegroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sitegroup_ids"] = val

		val, err = v.Vendor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vendor"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MatchingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MatchingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MatchingValue) String() string {
	return "MatchingValue"
}

func (v MatchingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var familyVal basetypes.ListValue
	switch {
	case v.Family.IsUnknown():
		familyVal = types.ListUnknown(types.StringType)
	case v.Family.IsNull():
		familyVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		familyVal, d = types.ListValue(types.StringType, v.Family.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var mfgVal basetypes.ListValue
	switch {
	case v.Mfg.IsUnknown():
		mfgVal = types.ListUnknown(types.StringType)
	case v.Mfg.IsNull():
		mfgVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		mfgVal, d = types.ListValue(types.StringType, v.Mfg.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var modelVal basetypes.ListValue
	switch {
	case v.Model.IsUnknown():
		modelVal = types.ListUnknown(types.StringType)
	case v.Model.IsNull():
		modelVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		modelVal, d = types.ListValue(types.StringType, v.Model.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var nactagsVal basetypes.ListValue
	switch {
	case v.Nactags.IsUnknown():
		nactagsVal = types.ListUnknown(types.StringType)
	case v.Nactags.IsNull():
		nactagsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		nactagsVal, d = types.ListValue(types.StringType, v.Nactags.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var osTypeVal basetypes.ListValue
	switch {
	case v.OsType.IsUnknown():
		osTypeVal = types.ListUnknown(types.StringType)
	case v.OsType.IsNull():
		osTypeVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		osTypeVal, d = types.ListValue(types.StringType, v.OsType.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var portTypesVal basetypes.ListValue
	switch {
	case v.PortTypes.IsUnknown():
		portTypesVal = types.ListUnknown(types.StringType)
	case v.PortTypes.IsNull():
		portTypesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		portTypesVal, d = types.ListValue(types.StringType, v.PortTypes.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var siteIdsVal basetypes.ListValue
	switch {
	case v.SiteIds.IsUnknown():
		siteIdsVal = types.ListUnknown(types.StringType)
	case v.SiteIds.IsNull():
		siteIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		siteIdsVal, d = types.ListValue(types.StringType, v.SiteIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var sitegroupIdsVal basetypes.ListValue
	switch {
	case v.SitegroupIds.IsUnknown():
		sitegroupIdsVal = types.ListUnknown(types.StringType)
	case v.SitegroupIds.IsNull():
		sitegroupIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		sitegroupIdsVal, d = types.ListValue(types.StringType, v.SitegroupIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var vendorVal basetypes.ListValue
	switch {
	case v.Vendor.IsUnknown():
		vendorVal = types.ListUnknown(types.StringType)
	case v.Vendor.IsNull():
		vendorVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		vendorVal, d = types.ListValue(types.StringType, v.Vendor.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"auth_type": basetypes.StringType{},
		"family": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mfg": basetypes.ListType{
			ElemType: types.StringType,
		},
		"model": basetypes.ListType{
			ElemType: types.StringType,
		},
		"nactags": basetypes.ListType{
			ElemType: types.StringType,
		},
		"os_type": basetypes.ListType{
			ElemType: types.StringType,
		},
		"port_types": basetypes.ListType{
			ElemType: types.StringType,
		},
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"vendor": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"auth_type":     v.AuthType,
			"family":        familyVal,
			"mfg":           mfgVal,
			"model":         modelVal,
			"nactags":       nactagsVal,
			"os_type":       osTypeVal,
			"port_types":    portTypesVal,
			"site_ids":      siteIdsVal,
			"sitegroup_ids": sitegroupIdsVal,
			"vendor":        vendorVal,
		})

	return objVal, diags
}

func (v MatchingValue) Equal(o attr.Value) bool {
	other, ok := o.(MatchingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AuthType.Equal(other.AuthType) {
		return false
	}

	if !v.Family.Equal(other.Family) {
		return false
	}

	if !v.Mfg.Equal(other.Mfg) {
		return false
	}

	if !v.Model.Equal(other.Model) {
		return false
	}

	if !v.Nactags.Equal(other.Nactags) {
		return false
	}

	if !v.OsType.Equal(other.OsType) {
		return false
	}

	if !v.PortTypes.Equal(other.PortTypes) {
		return false
	}

	if !v.SiteIds.Equal(other.SiteIds) {
		return false
	}

	if !v.SitegroupIds.Equal(other.SitegroupIds) {
		return false
	}

	if !v.Vendor.Equal(other.Vendor) {
		return false
	}

	return true
}

func (v MatchingValue) Type(ctx context.Context) attr.Type {
	return MatchingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MatchingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"auth_type": basetypes.StringType{},
		"family": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mfg": basetypes.ListType{
			ElemType: types.StringType,
		},
		"model": basetypes.ListType{
			ElemType: types.StringType,
		},
		"nactags": basetypes.ListType{
			ElemType: types.StringType,
		},
		"os_type": basetypes.ListType{
			ElemType: types.StringType,
		},
		"port_types": basetypes.ListType{
			ElemType: types.StringType,
		},
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"vendor": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = NotMatchingType{}

type NotMatchingType struct {
	basetypes.ObjectType
}

func (t NotMatchingType) Equal(o attr.Type) bool {
	other, ok := o.(NotMatchingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NotMatchingType) String() string {
	return "NotMatchingType"
}

func (t NotMatchingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	authTypeAttribute, ok := attributes["auth_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_type is missing from object`)

		return nil, diags
	}

	authTypeVal, ok := authTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_type expected to be basetypes.StringValue, was: %T`, authTypeAttribute))
	}

	familyAttribute, ok := attributes["family"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`family is missing from object`)

		return nil, diags
	}

	familyVal, ok := familyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`family expected to be basetypes.ListValue, was: %T`, familyAttribute))
	}

	mfgAttribute, ok := attributes["mfg"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mfg is missing from object`)

		return nil, diags
	}

	mfgVal, ok := mfgAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mfg expected to be basetypes.ListValue, was: %T`, mfgAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return nil, diags
	}

	modelVal, ok := modelAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.ListValue, was: %T`, modelAttribute))
	}

	nactagsAttribute, ok := attributes["nactags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nactags is missing from object`)

		return nil, diags
	}

	nactagsVal, ok := nactagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nactags expected to be basetypes.ListValue, was: %T`, nactagsAttribute))
	}

	osTypeAttribute, ok := attributes["os_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os_type is missing from object`)

		return nil, diags
	}

	osTypeVal, ok := osTypeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os_type expected to be basetypes.ListValue, was: %T`, osTypeAttribute))
	}

	portTypesAttribute, ok := attributes["port_types"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_types is missing from object`)

		return nil, diags
	}

	portTypesVal, ok := portTypesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_types expected to be basetypes.ListValue, was: %T`, portTypesAttribute))
	}

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return nil, diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return nil, diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	vendorAttribute, ok := attributes["vendor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vendor is missing from object`)

		return nil, diags
	}

	vendorVal, ok := vendorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vendor expected to be basetypes.ListValue, was: %T`, vendorAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NotMatchingValue{
		AuthType:     authTypeVal,
		Family:       familyVal,
		Mfg:          mfgVal,
		Model:        modelVal,
		Nactags:      nactagsVal,
		OsType:       osTypeVal,
		PortTypes:    portTypesVal,
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		Vendor:       vendorVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewNotMatchingValueNull() NotMatchingValue {
	return NotMatchingValue{
		state: attr.ValueStateNull,
	}
}

func NewNotMatchingValueUnknown() NotMatchingValue {
	return NotMatchingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNotMatchingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NotMatchingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NotMatchingValue Attribute Value",
				"While creating a NotMatchingValue value, a missing attribute value was detected. "+
					"A NotMatchingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NotMatchingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NotMatchingValue Attribute Type",
				"While creating a NotMatchingValue value, an invalid attribute value was detected. "+
					"A NotMatchingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NotMatchingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NotMatchingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NotMatchingValue Attribute Value",
				"While creating a NotMatchingValue value, an extra attribute value was detected. "+
					"A NotMatchingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NotMatchingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNotMatchingValueUnknown(), diags
	}

	authTypeAttribute, ok := attributes["auth_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_type is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	authTypeVal, ok := authTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_type expected to be basetypes.StringValue, was: %T`, authTypeAttribute))
	}

	familyAttribute, ok := attributes["family"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`family is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	familyVal, ok := familyAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`family expected to be basetypes.ListValue, was: %T`, familyAttribute))
	}

	mfgAttribute, ok := attributes["mfg"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`mfg is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	mfgVal, ok := mfgAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`mfg expected to be basetypes.ListValue, was: %T`, mfgAttribute))
	}

	modelAttribute, ok := attributes["model"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`model is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	modelVal, ok := modelAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`model expected to be basetypes.ListValue, was: %T`, modelAttribute))
	}

	nactagsAttribute, ok := attributes["nactags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`nactags is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	nactagsVal, ok := nactagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`nactags expected to be basetypes.ListValue, was: %T`, nactagsAttribute))
	}

	osTypeAttribute, ok := attributes["os_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os_type is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	osTypeVal, ok := osTypeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os_type expected to be basetypes.ListValue, was: %T`, osTypeAttribute))
	}

	portTypesAttribute, ok := attributes["port_types"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`port_types is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	portTypesVal, ok := portTypesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`port_types expected to be basetypes.ListValue, was: %T`, portTypesAttribute))
	}

	siteIdsAttribute, ok := attributes["site_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`site_ids is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	siteIdsVal, ok := siteIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`site_ids expected to be basetypes.ListValue, was: %T`, siteIdsAttribute))
	}

	sitegroupIdsAttribute, ok := attributes["sitegroup_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sitegroup_ids is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	sitegroupIdsVal, ok := sitegroupIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sitegroup_ids expected to be basetypes.ListValue, was: %T`, sitegroupIdsAttribute))
	}

	vendorAttribute, ok := attributes["vendor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vendor is missing from object`)

		return NewNotMatchingValueUnknown(), diags
	}

	vendorVal, ok := vendorAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vendor expected to be basetypes.ListValue, was: %T`, vendorAttribute))
	}

	if diags.HasError() {
		return NewNotMatchingValueUnknown(), diags
	}

	return NotMatchingValue{
		AuthType:     authTypeVal,
		Family:       familyVal,
		Mfg:          mfgVal,
		Model:        modelVal,
		Nactags:      nactagsVal,
		OsType:       osTypeVal,
		PortTypes:    portTypesVal,
		SiteIds:      siteIdsVal,
		SitegroupIds: sitegroupIdsVal,
		Vendor:       vendorVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewNotMatchingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NotMatchingValue {
	object, diags := NewNotMatchingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNotMatchingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NotMatchingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNotMatchingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNotMatchingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNotMatchingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNotMatchingValueMust(NotMatchingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NotMatchingType) ValueType(ctx context.Context) attr.Value {
	return NotMatchingValue{}
}

var _ basetypes.ObjectValuable = NotMatchingValue{}

type NotMatchingValue struct {
	AuthType     basetypes.StringValue `tfsdk:"auth_type"`
	Family       basetypes.ListValue   `tfsdk:"family"`
	Mfg          basetypes.ListValue   `tfsdk:"mfg"`
	Model        basetypes.ListValue   `tfsdk:"model"`
	Nactags      basetypes.ListValue   `tfsdk:"nactags"`
	OsType       basetypes.ListValue   `tfsdk:"os_type"`
	PortTypes    basetypes.ListValue   `tfsdk:"port_types"`
	SiteIds      basetypes.ListValue   `tfsdk:"site_ids"`
	SitegroupIds basetypes.ListValue   `tfsdk:"sitegroup_ids"`
	Vendor       basetypes.ListValue   `tfsdk:"vendor"`
	state        attr.ValueState
}

func (v NotMatchingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 10)

	var val tftypes.Value
	var err error

	attrTypes["auth_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["family"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["mfg"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["model"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["nactags"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["os_type"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["port_types"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["site_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["sitegroup_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["vendor"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 10)

		val, err = v.AuthType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_type"] = val

		val, err = v.Family.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["family"] = val

		val, err = v.Mfg.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["mfg"] = val

		val, err = v.Model.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["model"] = val

		val, err = v.Nactags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["nactags"] = val

		val, err = v.OsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["os_type"] = val

		val, err = v.PortTypes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["port_types"] = val

		val, err = v.SiteIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["site_ids"] = val

		val, err = v.SitegroupIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sitegroup_ids"] = val

		val, err = v.Vendor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vendor"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NotMatchingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NotMatchingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NotMatchingValue) String() string {
	return "NotMatchingValue"
}

func (v NotMatchingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var familyVal basetypes.ListValue
	switch {
	case v.Family.IsUnknown():
		familyVal = types.ListUnknown(types.StringType)
	case v.Family.IsNull():
		familyVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		familyVal, d = types.ListValue(types.StringType, v.Family.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var mfgVal basetypes.ListValue
	switch {
	case v.Mfg.IsUnknown():
		mfgVal = types.ListUnknown(types.StringType)
	case v.Mfg.IsNull():
		mfgVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		mfgVal, d = types.ListValue(types.StringType, v.Mfg.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var modelVal basetypes.ListValue
	switch {
	case v.Model.IsUnknown():
		modelVal = types.ListUnknown(types.StringType)
	case v.Model.IsNull():
		modelVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		modelVal, d = types.ListValue(types.StringType, v.Model.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var nactagsVal basetypes.ListValue
	switch {
	case v.Nactags.IsUnknown():
		nactagsVal = types.ListUnknown(types.StringType)
	case v.Nactags.IsNull():
		nactagsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		nactagsVal, d = types.ListValue(types.StringType, v.Nactags.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var osTypeVal basetypes.ListValue
	switch {
	case v.OsType.IsUnknown():
		osTypeVal = types.ListUnknown(types.StringType)
	case v.OsType.IsNull():
		osTypeVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		osTypeVal, d = types.ListValue(types.StringType, v.OsType.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var portTypesVal basetypes.ListValue
	switch {
	case v.PortTypes.IsUnknown():
		portTypesVal = types.ListUnknown(types.StringType)
	case v.PortTypes.IsNull():
		portTypesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		portTypesVal, d = types.ListValue(types.StringType, v.PortTypes.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var siteIdsVal basetypes.ListValue
	switch {
	case v.SiteIds.IsUnknown():
		siteIdsVal = types.ListUnknown(types.StringType)
	case v.SiteIds.IsNull():
		siteIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		siteIdsVal, d = types.ListValue(types.StringType, v.SiteIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var sitegroupIdsVal basetypes.ListValue
	switch {
	case v.SitegroupIds.IsUnknown():
		sitegroupIdsVal = types.ListUnknown(types.StringType)
	case v.SitegroupIds.IsNull():
		sitegroupIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		sitegroupIdsVal, d = types.ListValue(types.StringType, v.SitegroupIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var vendorVal basetypes.ListValue
	switch {
	case v.Vendor.IsUnknown():
		vendorVal = types.ListUnknown(types.StringType)
	case v.Vendor.IsNull():
		vendorVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		vendorVal, d = types.ListValue(types.StringType, v.Vendor.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"auth_type": basetypes.StringType{},
			"family": basetypes.ListType{
				ElemType: types.StringType,
			},
			"mfg": basetypes.ListType{
				ElemType: types.StringType,
			},
			"model": basetypes.ListType{
				ElemType: types.StringType,
			},
			"nactags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"os_type": basetypes.ListType{
				ElemType: types.StringType,
			},
			"port_types": basetypes.ListType{
				ElemType: types.StringType,
			},
			"site_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sitegroup_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
			"vendor": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"auth_type": basetypes.StringType{},
		"family": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mfg": basetypes.ListType{
			ElemType: types.StringType,
		},
		"model": basetypes.ListType{
			ElemType: types.StringType,
		},
		"nactags": basetypes.ListType{
			ElemType: types.StringType,
		},
		"os_type": basetypes.ListType{
			ElemType: types.StringType,
		},
		"port_types": basetypes.ListType{
			ElemType: types.StringType,
		},
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"vendor": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"auth_type":     v.AuthType,
			"family":        familyVal,
			"mfg":           mfgVal,
			"model":         modelVal,
			"nactags":       nactagsVal,
			"os_type":       osTypeVal,
			"port_types":    portTypesVal,
			"site_ids":      siteIdsVal,
			"sitegroup_ids": sitegroupIdsVal,
			"vendor":        vendorVal,
		})

	return objVal, diags
}

func (v NotMatchingValue) Equal(o attr.Value) bool {
	other, ok := o.(NotMatchingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AuthType.Equal(other.AuthType) {
		return false
	}

	if !v.Family.Equal(other.Family) {
		return false
	}

	if !v.Mfg.Equal(other.Mfg) {
		return false
	}

	if !v.Model.Equal(other.Model) {
		return false
	}

	if !v.Nactags.Equal(other.Nactags) {
		return false
	}

	if !v.OsType.Equal(other.OsType) {
		return false
	}

	if !v.PortTypes.Equal(other.PortTypes) {
		return false
	}

	if !v.SiteIds.Equal(other.SiteIds) {
		return false
	}

	if !v.SitegroupIds.Equal(other.SitegroupIds) {
		return false
	}

	if !v.Vendor.Equal(other.Vendor) {
		return false
	}

	return true
}

func (v NotMatchingValue) Type(ctx context.Context) attr.Type {
	return NotMatchingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NotMatchingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"auth_type": basetypes.StringType{},
		"family": basetypes.ListType{
			ElemType: types.StringType,
		},
		"mfg": basetypes.ListType{
			ElemType: types.StringType,
		},
		"model": basetypes.ListType{
			ElemType: types.StringType,
		},
		"nactags": basetypes.ListType{
			ElemType: types.StringType,
		},
		"os_type": basetypes.ListType{
			ElemType: types.StringType,
		},
		"port_types": basetypes.ListType{
			ElemType: types.StringType,
		},
		"site_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sitegroup_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
		"vendor": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
