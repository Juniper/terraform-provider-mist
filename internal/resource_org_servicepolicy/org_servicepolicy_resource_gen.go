// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_org_servicepolicy

import (
	"context"
	"fmt"
	"github.com/Juniper/terraform-provider-mist/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrgServicepolicyResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"aamw": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"aamwprofile_id": schema.StringAttribute{
						Optional:            true,
						Description:         "org-level Advanced Advance Anti Malware Profile (SkyAtp) Profile can be used, this takes precedence over 'profile'",
						MarkdownDescription: "org-level Advanced Advance Anti Malware Profile (SkyAtp) Profile can be used, this takes precedence over 'profile'",
					},
					"enabled": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(false),
					},
					"profile": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "enum: `docsonly`, `executables`, `standard`",
						MarkdownDescription: "enum: `docsonly`, `executables`, `standard`",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"",
								"docsonly",
								"executables",
								"standard",
							),
						},
						Default: stringdefault.StaticString("standard"),
					},
				},
				CustomType: AamwType{
					ObjectType: types.ObjectType{
						AttrTypes: AamwValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "For SRX Only",
				MarkdownDescription: "For SRX Only",
			},
			"action": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "enum: `allow`, `deny`",
				MarkdownDescription: "enum: `allow`, `deny`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"allow",
						"deny",
					),
				},
			},
			"antivirus": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"avprofile_id": schema.StringAttribute{
						Optional:            true,
						Description:         "org-level AV Profile can be used, this takes precedence over 'profile'",
						MarkdownDescription: "org-level AV Profile can be used, this takes precedence over 'profile'",
					},
					"enabled": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(false),
					},
					"profile": schema.StringAttribute{
						Optional:            true,
						Description:         "Default / noftp / httponly / or keys from av_profiles",
						MarkdownDescription: "Default / noftp / httponly / or keys from av_profiles",
					},
				},
				CustomType: AntivirusType{
					ObjectType: types.ObjectType{
						AttrTypes: AntivirusValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "For SRX-only",
				MarkdownDescription: "For SRX-only",
			},
			"appqoe": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(false),
					},
				},
				CustomType: AppqoeType{
					ObjectType: types.ObjectType{
						AttrTypes: AppqoeValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "For SRX Only",
				MarkdownDescription: "For SRX Only",
			},
			"ewf": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alert_only": schema.BoolAttribute{
							Optional: true,
						},
						"block_message": schema.StringAttribute{
							Optional: true,
						},
						"enabled": schema.BoolAttribute{
							Optional: true,
							Computed: true,
							Default:  booldefault.StaticBool(false),
						},
						"profile": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "enum: `critical`, `standard`, `strict`",
							MarkdownDescription: "enum: `critical`, `standard`, `strict`",
							Validators: []validator.String{
								stringvalidator.OneOf(
									"",
									"critical",
									"standard",
									"strict",
								),
							},
							Default: stringdefault.StaticString("strict"),
						},
					},
					CustomType: EwfType{
						ObjectType: types.ObjectType{
							AttrTypes: EwfValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique ID of the object instance in the Mist Organization",
				MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"idp": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"alert_only": schema.BoolAttribute{
						Optional: true,
					},
					"enabled": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(false),
					},
					"idpprofile_id": schema.StringAttribute{
						Optional:            true,
						Description:         "org_level IDP Profile can be used, this takes precedence over `profile`",
						MarkdownDescription: "org_level IDP Profile can be used, this takes precedence over `profile`",
					},
					"profile": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles",
						MarkdownDescription: "enum: `Custom`, `strict` (default), `standard` or keys from idp_profiles",
						Default:             stringdefault.StaticString("strict"),
					},
				},
				CustomType: IdpType{
					ObjectType: types.ObjectType{
						AttrTypes: IdpValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
			"local_routing": schema.BoolAttribute{
				Optional:            true,
				Description:         "access within the same VRF",
				MarkdownDescription: "access within the same VRF",
			},
			"name": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.All(stringvalidator.LengthBetween(2, 32), mistvalidator.ParseName()),
				},
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"path_preference": schema.StringAttribute{
				Optional:            true,
				Description:         "By default, we derive all paths available and use them, optionally, you can customize by using `path_preference`",
				MarkdownDescription: "By default, we derive all paths available and use them, optionally, you can customize by using `path_preference`",
			},
			"services": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Validators: []validator.List{
					listvalidator.UniqueValues(),
				},
			},
			"ssl_proxy": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"ciphers_category": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "enum: `medium`, `strong`, `weak`",
						MarkdownDescription: "enum: `medium`, `strong`, `weak`",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"",
								"medium",
								"strong",
								"weak",
							),
						},
						Default: stringdefault.StaticString("strong"),
					},
					"enabled": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(false),
					},
				},
				CustomType: SslProxyType{
					ObjectType: types.ObjectType{
						AttrTypes: SslProxyValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "For SRX-only",
				MarkdownDescription: "For SRX-only",
			},
			"tenants": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Validators: []validator.List{
					listvalidator.UniqueValues(),
				},
			},
		},
	}
}

type OrgServicepolicyModel struct {
	Aamw           AamwValue      `tfsdk:"aamw"`
	Action         types.String   `tfsdk:"action"`
	Antivirus      AntivirusValue `tfsdk:"antivirus"`
	Appqoe         AppqoeValue    `tfsdk:"appqoe"`
	Ewf            types.List     `tfsdk:"ewf"`
	Id             types.String   `tfsdk:"id"`
	Idp            IdpValue       `tfsdk:"idp"`
	LocalRouting   types.Bool     `tfsdk:"local_routing"`
	Name           types.String   `tfsdk:"name"`
	OrgId          types.String   `tfsdk:"org_id"`
	PathPreference types.String   `tfsdk:"path_preference"`
	Services       types.List     `tfsdk:"services"`
	SslProxy       SslProxyValue  `tfsdk:"ssl_proxy"`
	Tenants        types.List     `tfsdk:"tenants"`
}

var _ basetypes.ObjectTypable = AamwType{}

type AamwType struct {
	basetypes.ObjectType
}

func (t AamwType) Equal(o attr.Type) bool {
	other, ok := o.(AamwType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AamwType) String() string {
	return "AamwType"
}

func (t AamwType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	aamwprofileIdAttribute, ok := attributes["aamwprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aamwprofile_id is missing from object`)

		return nil, diags
	}

	aamwprofileIdVal, ok := aamwprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aamwprofile_id expected to be basetypes.StringValue, was: %T`, aamwprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AamwValue{
		AamwprofileId: aamwprofileIdVal,
		Enabled:       enabledVal,
		Profile:       profileVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAamwValueNull() AamwValue {
	return AamwValue{
		state: attr.ValueStateNull,
	}
}

func NewAamwValueUnknown() AamwValue {
	return AamwValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAamwValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AamwValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AamwValue Attribute Value",
				"While creating a AamwValue value, a missing attribute value was detected. "+
					"A AamwValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AamwValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AamwValue Attribute Type",
				"While creating a AamwValue value, an invalid attribute value was detected. "+
					"A AamwValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AamwValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AamwValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AamwValue Attribute Value",
				"While creating a AamwValue value, an extra attribute value was detected. "+
					"A AamwValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AamwValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAamwValueUnknown(), diags
	}

	aamwprofileIdAttribute, ok := attributes["aamwprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`aamwprofile_id is missing from object`)

		return NewAamwValueUnknown(), diags
	}

	aamwprofileIdVal, ok := aamwprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`aamwprofile_id expected to be basetypes.StringValue, was: %T`, aamwprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewAamwValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewAamwValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewAamwValueUnknown(), diags
	}

	return AamwValue{
		AamwprofileId: aamwprofileIdVal,
		Enabled:       enabledVal,
		Profile:       profileVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAamwValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AamwValue {
	object, diags := NewAamwValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAamwValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AamwType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAamwValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAamwValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAamwValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAamwValueMust(AamwValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AamwType) ValueType(ctx context.Context) attr.Value {
	return AamwValue{}
}

var _ basetypes.ObjectValuable = AamwValue{}

type AamwValue struct {
	AamwprofileId basetypes.StringValue `tfsdk:"aamwprofile_id"`
	Enabled       basetypes.BoolValue   `tfsdk:"enabled"`
	Profile       basetypes.StringValue `tfsdk:"profile"`
	state         attr.ValueState
}

func (v AamwValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["aamwprofile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AamwprofileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["aamwprofile_id"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AamwValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AamwValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AamwValue) String() string {
	return "AamwValue"
}

func (v AamwValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"aamwprofile_id": basetypes.StringType{},
		"enabled":        basetypes.BoolType{},
		"profile":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"aamwprofile_id": v.AamwprofileId,
			"enabled":        v.Enabled,
			"profile":        v.Profile,
		})

	return objVal, diags
}

func (v AamwValue) Equal(o attr.Value) bool {
	other, ok := o.(AamwValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AamwprofileId.Equal(other.AamwprofileId) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v AamwValue) Type(ctx context.Context) attr.Type {
	return AamwType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AamwValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"aamwprofile_id": basetypes.StringType{},
		"enabled":        basetypes.BoolType{},
		"profile":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AntivirusType{}

type AntivirusType struct {
	basetypes.ObjectType
}

func (t AntivirusType) Equal(o attr.Type) bool {
	other, ok := o.(AntivirusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AntivirusType) String() string {
	return "AntivirusType"
}

func (t AntivirusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	avprofileIdAttribute, ok := attributes["avprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`avprofile_id is missing from object`)

		return nil, diags
	}

	avprofileIdVal, ok := avprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`avprofile_id expected to be basetypes.StringValue, was: %T`, avprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AntivirusValue{
		AvprofileId: avprofileIdVal,
		Enabled:     enabledVal,
		Profile:     profileVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewAntivirusValueNull() AntivirusValue {
	return AntivirusValue{
		state: attr.ValueStateNull,
	}
}

func NewAntivirusValueUnknown() AntivirusValue {
	return AntivirusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAntivirusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AntivirusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AntivirusValue Attribute Value",
				"While creating a AntivirusValue value, a missing attribute value was detected. "+
					"A AntivirusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AntivirusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AntivirusValue Attribute Type",
				"While creating a AntivirusValue value, an invalid attribute value was detected. "+
					"A AntivirusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AntivirusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AntivirusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AntivirusValue Attribute Value",
				"While creating a AntivirusValue value, an extra attribute value was detected. "+
					"A AntivirusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AntivirusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAntivirusValueUnknown(), diags
	}

	avprofileIdAttribute, ok := attributes["avprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`avprofile_id is missing from object`)

		return NewAntivirusValueUnknown(), diags
	}

	avprofileIdVal, ok := avprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`avprofile_id expected to be basetypes.StringValue, was: %T`, avprofileIdAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewAntivirusValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewAntivirusValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewAntivirusValueUnknown(), diags
	}

	return AntivirusValue{
		AvprofileId: avprofileIdVal,
		Enabled:     enabledVal,
		Profile:     profileVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewAntivirusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AntivirusValue {
	object, diags := NewAntivirusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAntivirusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AntivirusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAntivirusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAntivirusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAntivirusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAntivirusValueMust(AntivirusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AntivirusType) ValueType(ctx context.Context) attr.Value {
	return AntivirusValue{}
}

var _ basetypes.ObjectValuable = AntivirusValue{}

type AntivirusValue struct {
	AvprofileId basetypes.StringValue `tfsdk:"avprofile_id"`
	Enabled     basetypes.BoolValue   `tfsdk:"enabled"`
	Profile     basetypes.StringValue `tfsdk:"profile"`
	state       attr.ValueState
}

func (v AntivirusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["avprofile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AvprofileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["avprofile_id"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AntivirusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AntivirusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AntivirusValue) String() string {
	return "AntivirusValue"
}

func (v AntivirusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"avprofile_id": basetypes.StringType{},
		"enabled":      basetypes.BoolType{},
		"profile":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"avprofile_id": v.AvprofileId,
			"enabled":      v.Enabled,
			"profile":      v.Profile,
		})

	return objVal, diags
}

func (v AntivirusValue) Equal(o attr.Value) bool {
	other, ok := o.(AntivirusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AvprofileId.Equal(other.AvprofileId) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v AntivirusValue) Type(ctx context.Context) attr.Type {
	return AntivirusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AntivirusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"avprofile_id": basetypes.StringType{},
		"enabled":      basetypes.BoolType{},
		"profile":      basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AppqoeType{}

type AppqoeType struct {
	basetypes.ObjectType
}

func (t AppqoeType) Equal(o attr.Type) bool {
	other, ok := o.(AppqoeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AppqoeType) String() string {
	return "AppqoeType"
}

func (t AppqoeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AppqoeValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAppqoeValueNull() AppqoeValue {
	return AppqoeValue{
		state: attr.ValueStateNull,
	}
}

func NewAppqoeValueUnknown() AppqoeValue {
	return AppqoeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAppqoeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AppqoeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AppqoeValue Attribute Value",
				"While creating a AppqoeValue value, a missing attribute value was detected. "+
					"A AppqoeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppqoeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AppqoeValue Attribute Type",
				"While creating a AppqoeValue value, an invalid attribute value was detected. "+
					"A AppqoeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppqoeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AppqoeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AppqoeValue Attribute Value",
				"While creating a AppqoeValue value, an extra attribute value was detected. "+
					"A AppqoeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AppqoeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAppqoeValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewAppqoeValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewAppqoeValueUnknown(), diags
	}

	return AppqoeValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAppqoeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AppqoeValue {
	object, diags := NewAppqoeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAppqoeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AppqoeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAppqoeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAppqoeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAppqoeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAppqoeValueMust(AppqoeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AppqoeType) ValueType(ctx context.Context) attr.Value {
	return AppqoeValue{}
}

var _ basetypes.ObjectValuable = AppqoeValue{}

type AppqoeValue struct {
	Enabled basetypes.BoolValue `tfsdk:"enabled"`
	state   attr.ValueState
}

func (v AppqoeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AppqoeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AppqoeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AppqoeValue) String() string {
	return "AppqoeValue"
}

func (v AppqoeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled": v.Enabled,
		})

	return objVal, diags
}

func (v AppqoeValue) Equal(o attr.Value) bool {
	other, ok := o.(AppqoeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v AppqoeValue) Type(ctx context.Context) attr.Type {
	return AppqoeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AppqoeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = EwfType{}

type EwfType struct {
	basetypes.ObjectType
}

func (t EwfType) Equal(o attr.Type) bool {
	other, ok := o.(EwfType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EwfType) String() string {
	return "EwfType"
}

func (t EwfType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return nil, diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	blockMessageAttribute, ok := attributes["block_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`block_message is missing from object`)

		return nil, diags
	}

	blockMessageVal, ok := blockMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`block_message expected to be basetypes.StringValue, was: %T`, blockMessageAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EwfValue{
		AlertOnly:    alertOnlyVal,
		BlockMessage: blockMessageVal,
		Enabled:      enabledVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewEwfValueNull() EwfValue {
	return EwfValue{
		state: attr.ValueStateNull,
	}
}

func NewEwfValueUnknown() EwfValue {
	return EwfValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEwfValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EwfValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EwfValue Attribute Value",
				"While creating a EwfValue value, a missing attribute value was detected. "+
					"A EwfValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EwfValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EwfValue Attribute Type",
				"While creating a EwfValue value, an invalid attribute value was detected. "+
					"A EwfValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EwfValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EwfValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EwfValue Attribute Value",
				"While creating a EwfValue value, an extra attribute value was detected. "+
					"A EwfValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EwfValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEwfValueUnknown(), diags
	}

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	blockMessageAttribute, ok := attributes["block_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`block_message is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	blockMessageVal, ok := blockMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`block_message expected to be basetypes.StringValue, was: %T`, blockMessageAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewEwfValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewEwfValueUnknown(), diags
	}

	return EwfValue{
		AlertOnly:    alertOnlyVal,
		BlockMessage: blockMessageVal,
		Enabled:      enabledVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewEwfValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EwfValue {
	object, diags := NewEwfValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEwfValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EwfType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEwfValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEwfValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEwfValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEwfValueMust(EwfValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EwfType) ValueType(ctx context.Context) attr.Value {
	return EwfValue{}
}

var _ basetypes.ObjectValuable = EwfValue{}

type EwfValue struct {
	AlertOnly    basetypes.BoolValue   `tfsdk:"alert_only"`
	BlockMessage basetypes.StringValue `tfsdk:"block_message"`
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	Profile      basetypes.StringValue `tfsdk:"profile"`
	state        attr.ValueState
}

func (v EwfValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["alert_only"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["block_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AlertOnly.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alert_only"] = val

		val, err = v.BlockMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["block_message"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EwfValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EwfValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EwfValue) String() string {
	return "EwfValue"
}

func (v EwfValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"block_message": basetypes.StringType{},
		"enabled":       basetypes.BoolType{},
		"profile":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alert_only":    v.AlertOnly,
			"block_message": v.BlockMessage,
			"enabled":       v.Enabled,
			"profile":       v.Profile,
		})

	return objVal, diags
}

func (v EwfValue) Equal(o attr.Value) bool {
	other, ok := o.(EwfValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AlertOnly.Equal(other.AlertOnly) {
		return false
	}

	if !v.BlockMessage.Equal(other.BlockMessage) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v EwfValue) Type(ctx context.Context) attr.Type {
	return EwfType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EwfValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"block_message": basetypes.StringType{},
		"enabled":       basetypes.BoolType{},
		"profile":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = IdpType{}

type IdpType struct {
	basetypes.ObjectType
}

func (t IdpType) Equal(o attr.Type) bool {
	other, ok := o.(IdpType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IdpType) String() string {
	return "IdpType"
}

func (t IdpType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return nil, diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	idpprofileIdAttribute, ok := attributes["idpprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`idpprofile_id is missing from object`)

		return nil, diags
	}

	idpprofileIdVal, ok := idpprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`idpprofile_id expected to be basetypes.StringValue, was: %T`, idpprofileIdAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return nil, diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IdpValue{
		AlertOnly:    alertOnlyVal,
		Enabled:      enabledVal,
		IdpprofileId: idpprofileIdVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewIdpValueNull() IdpValue {
	return IdpValue{
		state: attr.ValueStateNull,
	}
}

func NewIdpValueUnknown() IdpValue {
	return IdpValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIdpValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IdpValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IdpValue Attribute Value",
				"While creating a IdpValue value, a missing attribute value was detected. "+
					"A IdpValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IdpValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IdpValue Attribute Type",
				"While creating a IdpValue value, an invalid attribute value was detected. "+
					"A IdpValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IdpValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IdpValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IdpValue Attribute Value",
				"While creating a IdpValue value, an extra attribute value was detected. "+
					"A IdpValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IdpValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIdpValueUnknown(), diags
	}

	alertOnlyAttribute, ok := attributes["alert_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alert_only is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	alertOnlyVal, ok := alertOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alert_only expected to be basetypes.BoolValue, was: %T`, alertOnlyAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	idpprofileIdAttribute, ok := attributes["idpprofile_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`idpprofile_id is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	idpprofileIdVal, ok := idpprofileIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`idpprofile_id expected to be basetypes.StringValue, was: %T`, idpprofileIdAttribute))
	}

	profileAttribute, ok := attributes["profile"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`profile is missing from object`)

		return NewIdpValueUnknown(), diags
	}

	profileVal, ok := profileAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`profile expected to be basetypes.StringValue, was: %T`, profileAttribute))
	}

	if diags.HasError() {
		return NewIdpValueUnknown(), diags
	}

	return IdpValue{
		AlertOnly:    alertOnlyVal,
		Enabled:      enabledVal,
		IdpprofileId: idpprofileIdVal,
		Profile:      profileVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewIdpValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IdpValue {
	object, diags := NewIdpValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIdpValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IdpType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIdpValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIdpValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIdpValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIdpValueMust(IdpValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IdpType) ValueType(ctx context.Context) attr.Value {
	return IdpValue{}
}

var _ basetypes.ObjectValuable = IdpValue{}

type IdpValue struct {
	AlertOnly    basetypes.BoolValue   `tfsdk:"alert_only"`
	Enabled      basetypes.BoolValue   `tfsdk:"enabled"`
	IdpprofileId basetypes.StringValue `tfsdk:"idpprofile_id"`
	Profile      basetypes.StringValue `tfsdk:"profile"`
	state        attr.ValueState
}

func (v IdpValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["alert_only"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["idpprofile_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["profile"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AlertOnly.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alert_only"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.IdpprofileId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["idpprofile_id"] = val

		val, err = v.Profile.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["profile"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IdpValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IdpValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IdpValue) String() string {
	return "IdpValue"
}

func (v IdpValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"enabled":       basetypes.BoolType{},
		"idpprofile_id": basetypes.StringType{},
		"profile":       basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"alert_only":    v.AlertOnly,
			"enabled":       v.Enabled,
			"idpprofile_id": v.IdpprofileId,
			"profile":       v.Profile,
		})

	return objVal, diags
}

func (v IdpValue) Equal(o attr.Value) bool {
	other, ok := o.(IdpValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AlertOnly.Equal(other.AlertOnly) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.IdpprofileId.Equal(other.IdpprofileId) {
		return false
	}

	if !v.Profile.Equal(other.Profile) {
		return false
	}

	return true
}

func (v IdpValue) Type(ctx context.Context) attr.Type {
	return IdpType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IdpValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"alert_only":    basetypes.BoolType{},
		"enabled":       basetypes.BoolType{},
		"idpprofile_id": basetypes.StringType{},
		"profile":       basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SslProxyType{}

type SslProxyType struct {
	basetypes.ObjectType
}

func (t SslProxyType) Equal(o attr.Type) bool {
	other, ok := o.(SslProxyType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SslProxyType) String() string {
	return "SslProxyType"
}

func (t SslProxyType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ciphersCategoryAttribute, ok := attributes["ciphers_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ciphers_category is missing from object`)

		return nil, diags
	}

	ciphersCategoryVal, ok := ciphersCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ciphers_category expected to be basetypes.StringValue, was: %T`, ciphersCategoryAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SslProxyValue{
		CiphersCategory: ciphersCategoryVal,
		Enabled:         enabledVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSslProxyValueNull() SslProxyValue {
	return SslProxyValue{
		state: attr.ValueStateNull,
	}
}

func NewSslProxyValueUnknown() SslProxyValue {
	return SslProxyValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSslProxyValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SslProxyValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SslProxyValue Attribute Value",
				"While creating a SslProxyValue value, a missing attribute value was detected. "+
					"A SslProxyValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SslProxyValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SslProxyValue Attribute Type",
				"While creating a SslProxyValue value, an invalid attribute value was detected. "+
					"A SslProxyValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SslProxyValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SslProxyValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SslProxyValue Attribute Value",
				"While creating a SslProxyValue value, an extra attribute value was detected. "+
					"A SslProxyValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SslProxyValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSslProxyValueUnknown(), diags
	}

	ciphersCategoryAttribute, ok := attributes["ciphers_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ciphers_category is missing from object`)

		return NewSslProxyValueUnknown(), diags
	}

	ciphersCategoryVal, ok := ciphersCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ciphers_category expected to be basetypes.StringValue, was: %T`, ciphersCategoryAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewSslProxyValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewSslProxyValueUnknown(), diags
	}

	return SslProxyValue{
		CiphersCategory: ciphersCategoryVal,
		Enabled:         enabledVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewSslProxyValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SslProxyValue {
	object, diags := NewSslProxyValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSslProxyValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SslProxyType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSslProxyValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSslProxyValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSslProxyValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSslProxyValueMust(SslProxyValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SslProxyType) ValueType(ctx context.Context) attr.Value {
	return SslProxyValue{}
}

var _ basetypes.ObjectValuable = SslProxyValue{}

type SslProxyValue struct {
	CiphersCategory basetypes.StringValue `tfsdk:"ciphers_category"`
	Enabled         basetypes.BoolValue   `tfsdk:"enabled"`
	state           attr.ValueState
}

func (v SslProxyValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["ciphers_category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.CiphersCategory.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ciphers_category"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SslProxyValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SslProxyValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SslProxyValue) String() string {
	return "SslProxyValue"
}

func (v SslProxyValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"ciphers_category": basetypes.StringType{},
		"enabled":          basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ciphers_category": v.CiphersCategory,
			"enabled":          v.Enabled,
		})

	return objVal, diags
}

func (v SslProxyValue) Equal(o attr.Value) bool {
	other, ok := o.(SslProxyValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CiphersCategory.Equal(other.CiphersCategory) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v SslProxyValue) Type(ctx context.Context) attr.Type {
	return SslProxyType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SslProxyValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ciphers_category": basetypes.StringType{},
		"enabled":          basetypes.BoolType{},
	}
}
