// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_org_sso

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrgSsoResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"custom_logout_url": schema.StringAttribute{
				Optional:            true,
				Description:         "a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is different from SP-initiated SLO process)",
				MarkdownDescription: "a URL we will redirect the user after user logout from Mist (for some IdP which supports a custom logout URL that is different from SP-initiated SLO process)",
			},
			"default_role": schema.StringAttribute{
				Optional:            true,
				Description:         "default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched",
				MarkdownDescription: "default role to assign if there’s no match. By default, an assertion is treated as invalid when there’s no role matched",
			},
			"domain": schema.StringAttribute{
				Computed:            true,
				Description:         "random string generated during the SSO creation and used to generate the SAML URLs:\n  * ACS URL = `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`)\n  * Single Logout URL = `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)",
				MarkdownDescription: "random string generated during the SSO creation and used to generate the SAML URLs:\n  * ACS URL = `/api/v1/saml/{domain}/login` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/login`)\n  * Single Logout URL = `/api/v1/saml/{domain}/logout` (e.g. `https://api.mist.com/api/v1/saml/s4t5vwv8/logout`)",
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"idp_cert": schema.StringAttribute{
				Required:            true,
				Description:         "IDP Cert (used to verify the signed response)",
				MarkdownDescription: "IDP Cert (used to verify the signed response)",
			},
			"idp_sign_algo": schema.StringAttribute{
				Required:            true,
				Description:         "Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`",
				MarkdownDescription: "Signing algorithm for SAML Assertion. enum `sha1`, `sha256`, `sha384`, `sha512`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"sha1",
						"sha256",
						"sha384",
						"sha512",
					),
				},
			},
			"idp_sso_url": schema.StringAttribute{
				Required:            true,
				Description:         "IDP Single-Sign-On URL",
				MarkdownDescription: "IDP Single-Sign-On URL",
			},
			"ignore_unmatched_roles": schema.BoolAttribute{
				Optional:            true,
				Description:         "ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role",
				MarkdownDescription: "ignore any unmatched roles provided in assertion. By default, an assertion is treated as invalid for any unmatched role",
			},
			"issuer": schema.StringAttribute{
				Required:            true,
				Description:         "IDP issuer URL",
				MarkdownDescription: "IDP issuer URL",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "name",
				MarkdownDescription: "name",
			},
			"nameid_format": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "enum: `email`, `unspecified`",
				MarkdownDescription: "enum: `email`, `unspecified`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"email",
						"unspecified",
					),
				},
				Default: stringdefault.StaticString("email"),
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"role_attr_extraction": schema.StringAttribute{
				Optional:            true,
				Description:         "custom role attribute parsing scheme\\n\\nSupported Role Parsing Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is “cn”</li></ul></td></tr></table>",
				MarkdownDescription: "custom role attribute parsing scheme\\n\\nSupported Role Parsing Schemes\\n<table><tr><th>Name</th><th>Scheme</th></tr><tr><td>cn</td><td><ul><li>The expected role attribute format in SAML Assertion is “CN=cn,OU=ou1,OU=ou2,…”</li><li>CN (the key) is case insensitive and exactly 1 CN is expected (or the entire entry will be ignored)</li><li>E.g. if role attribute is “CN=cn,OU=ou1,OU=ou2” then parsed role value is “cn”</li></ul></td></tr></table>",
			},
			"role_attr_from": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "name of the attribute in SAML Assertion to extract role from. Default: `Role`",
				MarkdownDescription: "name of the attribute in SAML Assertion to extract role from. Default: `Role`",
				Default:             stringdefault.StaticString("Role"),
			},
			"scim_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP",
				MarkdownDescription: "if `idp_type`==`oauth`, indicates if SCIM provisioning is enabled for the OAuth IDP",
				Default:             booldefault.StaticBool(false),
			},
			"scim_secret_token": schema.StringAttribute{
				Optional:            true,
				Description:         "if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP",
				MarkdownDescription: "if `idp_type`==`oauth`, scim_secret_token (generated by caller, crypto-random) is used as the Bearer token in the Authorization header of SCIM provisioning requests by the IDP",
			},
		},
	}
}

type OrgSsoModel struct {
	CustomLogoutUrl      types.String `tfsdk:"custom_logout_url"`
	DefaultRole          types.String `tfsdk:"default_role"`
	Domain               types.String `tfsdk:"domain"`
	Id                   types.String `tfsdk:"id"`
	IdpCert              types.String `tfsdk:"idp_cert"`
	IdpSignAlgo          types.String `tfsdk:"idp_sign_algo"`
	IdpSsoUrl            types.String `tfsdk:"idp_sso_url"`
	IgnoreUnmatchedRoles types.Bool   `tfsdk:"ignore_unmatched_roles"`
	Issuer               types.String `tfsdk:"issuer"`
	Name                 types.String `tfsdk:"name"`
	NameidFormat         types.String `tfsdk:"nameid_format"`
	OrgId                types.String `tfsdk:"org_id"`
	RoleAttrExtraction   types.String `tfsdk:"role_attr_extraction"`
	RoleAttrFrom         types.String `tfsdk:"role_attr_from"`
	ScimEnabled          types.Bool   `tfsdk:"scim_enabled"`
	ScimSecretToken      types.String `tfsdk:"scim_secret_token"`
}
