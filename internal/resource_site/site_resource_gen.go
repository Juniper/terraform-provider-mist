// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_site

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SiteResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"address": schema.StringAttribute{
				Required:            true,
				Description:         "full address of the site",
				MarkdownDescription: "full address of the site",
			},
			"alarmtemplate_id": schema.StringAttribute{
				Optional:            true,
				Description:         "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id",
				MarkdownDescription: "Alarm Template ID, this takes precedence over the Org-level alarmtemplate_id",
			},
			"aptemplate_id": schema.StringAttribute{
				Optional:            true,
				Description:         "AP Template ID, used by APs",
				MarkdownDescription: "AP Template ID, used by APs",
			},
			"country_code": schema.StringAttribute{
				Optional:            true,
				Description:         "country code for the site (for AP config generation), in two-character",
				MarkdownDescription: "country code for the site (for AP config generation), in two-character",
			},
			"gatewaytemplate_id": schema.StringAttribute{
				Optional:            true,
				Description:         "Gateway Template ID, used by gateways",
				MarkdownDescription: "Gateway Template ID, used by gateways",
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"latlng": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"lat": schema.Float64Attribute{
						Required: true,
					},
					"lng": schema.Float64Attribute{
						Required: true,
					},
				},
				CustomType: LatlngType{
					ObjectType: types.ObjectType{
						AttrTypes: LatlngValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"networktemplate_id": schema.StringAttribute{
				Optional:            true,
				Description:         "Network Template ID, this takes precedence over Site Settings",
				MarkdownDescription: "Network Template ID, this takes precedence over Site Settings",
			},
			"notes": schema.StringAttribute{
				Optional:            true,
				Description:         "optional, any notes about the site",
				MarkdownDescription: "optional, any notes about the site",
			},
			"org_id": schema.StringAttribute{
				Required: true,
			},
			"rftemplate_id": schema.StringAttribute{
				Optional:            true,
				Description:         "RF Template ID, this takes precedence over Site Settings",
				MarkdownDescription: "RF Template ID, this takes precedence over Site Settings",
			},
			"secpolicy_id": schema.StringAttribute{
				Optional:            true,
				Description:         "SecPolicy ID",
				MarkdownDescription: "SecPolicy ID",
			},
			"sitegroup_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "sitegroups this site belongs to",
				MarkdownDescription: "sitegroups this site belongs to",
			},
			"sitetemplate_id": schema.StringAttribute{
				Optional:            true,
				Description:         "Site Template ID",
				MarkdownDescription: "Site Template ID",
			},
			"timezone": schema.StringAttribute{
				Optional:            true,
				Description:         "Timezone the site is at",
				MarkdownDescription: "Timezone the site is at",
			},
		},
	}
}

type SiteModel struct {
	Address           types.String `tfsdk:"address"`
	AlarmtemplateId   types.String `tfsdk:"alarmtemplate_id"`
	AptemplateId      types.String `tfsdk:"aptemplate_id"`
	CountryCode       types.String `tfsdk:"country_code"`
	GatewaytemplateId types.String `tfsdk:"gatewaytemplate_id"`
	Id                types.String `tfsdk:"id"`
	Latlng            LatlngValue  `tfsdk:"latlng"`
	Name              types.String `tfsdk:"name"`
	NetworktemplateId types.String `tfsdk:"networktemplate_id"`
	Notes             types.String `tfsdk:"notes"`
	OrgId             types.String `tfsdk:"org_id"`
	RftemplateId      types.String `tfsdk:"rftemplate_id"`
	SecpolicyId       types.String `tfsdk:"secpolicy_id"`
	SitegroupIds      types.List   `tfsdk:"sitegroup_ids"`
	SitetemplateId    types.String `tfsdk:"sitetemplate_id"`
	Timezone          types.String `tfsdk:"timezone"`
}

var _ basetypes.ObjectTypable = LatlngType{}

type LatlngType struct {
	basetypes.ObjectType
}

func (t LatlngType) Equal(o attr.Type) bool {
	other, ok := o.(LatlngType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LatlngType) String() string {
	return "LatlngType"
}

func (t LatlngType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	latAttribute, ok := attributes["lat"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lat is missing from object`)

		return nil, diags
	}

	latVal, ok := latAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lat expected to be basetypes.Float64Value, was: %T`, latAttribute))
	}

	lngAttribute, ok := attributes["lng"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lng is missing from object`)

		return nil, diags
	}

	lngVal, ok := lngAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lng expected to be basetypes.Float64Value, was: %T`, lngAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LatlngValue{
		Lat:   latVal,
		Lng:   lngVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLatlngValueNull() LatlngValue {
	return LatlngValue{
		state: attr.ValueStateNull,
	}
}

func NewLatlngValueUnknown() LatlngValue {
	return LatlngValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLatlngValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LatlngValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LatlngValue Attribute Value",
				"While creating a LatlngValue value, a missing attribute value was detected. "+
					"A LatlngValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LatlngValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LatlngValue Attribute Type",
				"While creating a LatlngValue value, an invalid attribute value was detected. "+
					"A LatlngValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LatlngValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LatlngValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LatlngValue Attribute Value",
				"While creating a LatlngValue value, an extra attribute value was detected. "+
					"A LatlngValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LatlngValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLatlngValueUnknown(), diags
	}

	latAttribute, ok := attributes["lat"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lat is missing from object`)

		return NewLatlngValueUnknown(), diags
	}

	latVal, ok := latAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lat expected to be basetypes.Float64Value, was: %T`, latAttribute))
	}

	lngAttribute, ok := attributes["lng"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lng is missing from object`)

		return NewLatlngValueUnknown(), diags
	}

	lngVal, ok := lngAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lng expected to be basetypes.Float64Value, was: %T`, lngAttribute))
	}

	if diags.HasError() {
		return NewLatlngValueUnknown(), diags
	}

	return LatlngValue{
		Lat:   latVal,
		Lng:   lngVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLatlngValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LatlngValue {
	object, diags := NewLatlngValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLatlngValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LatlngType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLatlngValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLatlngValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLatlngValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLatlngValueMust(LatlngValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LatlngType) ValueType(ctx context.Context) attr.Value {
	return LatlngValue{}
}

var _ basetypes.ObjectValuable = LatlngValue{}

type LatlngValue struct {
	Lat   basetypes.Float64Value `tfsdk:"lat"`
	Lng   basetypes.Float64Value `tfsdk:"lng"`
	state attr.ValueState
}

func (v LatlngValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["lat"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["lng"] = basetypes.Float64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Lat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lat"] = val

		val, err = v.Lng.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lng"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LatlngValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LatlngValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LatlngValue) String() string {
	return "LatlngValue"
}

func (v LatlngValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"lat": basetypes.Float64Type{},
		"lng": basetypes.Float64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"lat": v.Lat,
			"lng": v.Lng,
		})

	return objVal, diags
}

func (v LatlngValue) Equal(o attr.Value) bool {
	other, ok := o.(LatlngValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Lat.Equal(other.Lat) {
		return false
	}

	if !v.Lng.Equal(other.Lng) {
		return false
	}

	return true
}

func (v LatlngValue) Type(ctx context.Context) attr.Type {
	return LatlngType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LatlngValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"lat": basetypes.Float64Type{},
		"lng": basetypes.Float64Type{},
	}
}
