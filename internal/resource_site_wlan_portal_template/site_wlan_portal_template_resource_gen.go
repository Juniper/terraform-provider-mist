// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_site_wlan_portal_template

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SiteWlanPortalTemplateResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"portal_template": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"access_code_alternate_email": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Use alternate email address"),
					},
					"alignment": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "defines alignment on portal. enum: `center`, `left`, `right`",
						MarkdownDescription: "defines alignment on portal. enum: `center`, `left`, `right`",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"",
								"center",
								"left",
								"right",
							),
						},
						Default: stringdefault.StaticString("center"),
					},
					"auth_button_amazon": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Amazon auth button",
						MarkdownDescription: "label for Amazon auth button",
						Default:             stringdefault.StaticString("Sign in with Amazon"),
					},
					"auth_button_azure": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Azure auth button",
						MarkdownDescription: "label for Azure auth button",
						Default:             stringdefault.StaticString("Sign in with Azure"),
					},
					"auth_button_email": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Email auth button",
						MarkdownDescription: "label for Email auth button",
						Default:             stringdefault.StaticString("Sign in with Email"),
					},
					"auth_button_facebook": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Facebook auth button",
						MarkdownDescription: "label for Facebook auth button",
						Default:             stringdefault.StaticString("Sign in with Facebook"),
					},
					"auth_button_google": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Google auth button",
						MarkdownDescription: "label for Google auth button",
						Default:             stringdefault.StaticString("Sign in with Google"),
					},
					"auth_button_microsoft": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Microsoft auth button",
						MarkdownDescription: "label for Microsoft auth button",
						Default:             stringdefault.StaticString("Sign in with Microsoft"),
					},
					"auth_button_passphrase": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for passphrase auth button",
						MarkdownDescription: "label for passphrase auth button",
						Default:             stringdefault.StaticString("Sign in with Passphrase"),
					},
					"auth_button_sms": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for SMS auth button",
						MarkdownDescription: "label for SMS auth button",
						Default:             stringdefault.StaticString("Sign in with Text Message"),
					},
					"auth_button_sponsor": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Sponsor auth button",
						MarkdownDescription: "label for Sponsor auth button",
						Default:             stringdefault.StaticString("Sign in as Guest"),
					},
					"auth_label": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Connect to WiFi with"),
					},
					"back_link": schema.StringAttribute{
						Optional:            true,
						Description:         "label of the link to go back to /logon",
						MarkdownDescription: "label of the link to go back to /logon",
					},
					"color": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Portal main color",
						MarkdownDescription: "Portal main color",
						Default:             stringdefault.StaticString("#1074bc"),
					},
					"color_dark": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("#0b5183"),
					},
					"color_light": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("#3589c6"),
					},
					"company": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether company field is required",
						MarkdownDescription: "whether company field is required",
						Default:             booldefault.StaticBool(false),
					},
					"company_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when company not provided",
						MarkdownDescription: "error message when company not provided",
						Default:             stringdefault.StaticString("Please provide your company name"),
					},
					"company_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of company field",
						MarkdownDescription: "label of company field",
						Default:             stringdefault.StaticString("Company"),
					},
					"email": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether email field is required",
						MarkdownDescription: "whether email field is required",
						Default:             booldefault.StaticBool(false),
					},
					"email_access_domain_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when a user has valid social login but doesn't match specified email domains.",
						MarkdownDescription: "error message when a user has valid social login but doesn't match specified email domains.",
						Default:             stringdefault.StaticString("Email Access Domain Error"),
					},
					"email_cancel": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Label for cancel confirmation code submission using email auth",
						MarkdownDescription: "Label for cancel confirmation code submission using email auth",
						Default:             stringdefault.StaticString("Cancel"),
					},
					"email_code_cancel": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("I did not receive the code"),
					},
					"email_code_error": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Please provide valid alternate email"),
					},
					"email_code_field_label": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Access Code"),
					},
					"email_code_message": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Enter the access number that was sent to your email address."),
					},
					"email_code_submit": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Sign In"),
					},
					"email_code_title": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Access Code"),
					},
					"email_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when email not provided",
						MarkdownDescription: "error message when email not provided",
						Default:             stringdefault.StaticString("Please provide valid email"),
					},
					"email_field_label": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Enter your email address"),
					},
					"email_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of email field",
						MarkdownDescription: "label of email field",
						Default:             stringdefault.StaticString("Email"),
					},
					"email_message": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("We will email you an authentication code which you can use to connect to the WiFi network."),
					},
					"email_submit": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Label for confirmation code submit button using email auth",
						MarkdownDescription: "Label for confirmation code submit button using email auth",
						Default:             stringdefault.StaticString("Send Access Code"),
					},
					"email_title": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Title for the Email registration",
						MarkdownDescription: "Title for the Email registration",
						Default:             stringdefault.StaticString("Sign in with Email"),
					},
					"field1": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether to ask field1",
						MarkdownDescription: "whether to ask field1",
						Default:             booldefault.StaticBool(false),
					},
					"field1error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when field1 not provided",
						MarkdownDescription: "error message when field1 not provided",
						Default:             stringdefault.StaticString("Please provide Custom Field 1"),
					},
					"field1label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of field1",
						MarkdownDescription: "label of field1",
						Default:             stringdefault.StaticString("Custom Field 1"),
					},
					"field1required": schema.BoolAttribute{
						Optional:            true,
						Description:         "whether field1 is required field",
						MarkdownDescription: "whether field1 is required field",
					},
					"field2": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether to ask field2",
						MarkdownDescription: "whether to ask field2",
						Default:             booldefault.StaticBool(false),
					},
					"field2error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when field2 not provided",
						MarkdownDescription: "error message when field2 not provided",
						Default:             stringdefault.StaticString("Please provide Custom Field 2"),
					},
					"field2label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of field2",
						MarkdownDescription: "label of field2",
						Default:             stringdefault.StaticString("Custom Field 2"),
					},
					"field2required": schema.BoolAttribute{
						Optional:            true,
						Description:         "whether field2 is required field",
						MarkdownDescription: "whether field2 is required field",
					},
					"field3": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether to ask field3",
						MarkdownDescription: "whether to ask field3",
						Default:             booldefault.StaticBool(false),
					},
					"field3error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when field3 not provided",
						MarkdownDescription: "error message when field3 not provided",
						Default:             stringdefault.StaticString("Please provide Custom Field 3"),
					},
					"field3label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of field3",
						MarkdownDescription: "label of field3",
						Default:             stringdefault.StaticString("Custom Field 3"),
					},
					"field3required": schema.BoolAttribute{
						Optional:            true,
						Description:         "whether field3 is required field",
						MarkdownDescription: "whether field3 is required field",
					},
					"field4": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether to ask field4",
						MarkdownDescription: "whether to ask field4",
						Default:             booldefault.StaticBool(false),
					},
					"field4error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when field4 not provided",
						MarkdownDescription: "error message when field4 not provided",
						Default:             stringdefault.StaticString("Please provide Custom Field 4"),
					},
					"field4label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of field4",
						MarkdownDescription: "label of field4",
						Default:             stringdefault.StaticString("Custom Field 4"),
					},
					"field4required": schema.BoolAttribute{
						Optional:            true,
						Description:         "whether field4 is required field",
						MarkdownDescription: "whether field4 is required field",
					},
					"locales": schema.MapNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"auth_button_amazon": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Amazon auth button",
									MarkdownDescription: "label for Amazon auth button",
								},
								"auth_button_azure": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Azure auth button",
									MarkdownDescription: "label for Azure auth button",
								},
								"auth_button_email": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Email auth button",
									MarkdownDescription: "label for Email auth button",
								},
								"auth_button_facebook": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Facebook auth button",
									MarkdownDescription: "label for Facebook auth button",
								},
								"auth_button_google": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Google auth button",
									MarkdownDescription: "label for Google auth button",
								},
								"auth_button_microsoft": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Microsoft auth button",
									MarkdownDescription: "label for Microsoft auth button",
								},
								"auth_button_passphrase": schema.StringAttribute{
									Optional:            true,
									Description:         "label for passphrase auth button",
									MarkdownDescription: "label for passphrase auth button",
								},
								"auth_button_sms": schema.StringAttribute{
									Optional:            true,
									Description:         "label for SMS auth button",
									MarkdownDescription: "label for SMS auth button",
								},
								"auth_button_sponsor": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Sponsor auth button",
									MarkdownDescription: "label for Sponsor auth button",
								},
								"auth_label": schema.StringAttribute{
									Optional: true,
								},
								"back_link": schema.StringAttribute{
									Optional:            true,
									Description:         "label of the link to go back to /logon",
									MarkdownDescription: "label of the link to go back to /logon",
								},
								"company_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when company not provided",
									MarkdownDescription: "error message when company not provided",
								},
								"company_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of company field",
									MarkdownDescription: "label of company field",
								},
								"email_access_domain_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when a user has valid social login but doesn't match specified email domains.",
									MarkdownDescription: "error message when a user has valid social login but doesn't match specified email domains.",
								},
								"email_cancel": schema.StringAttribute{
									Optional:            true,
									Description:         "Label for cancel confirmation code submission using email auth",
									MarkdownDescription: "Label for cancel confirmation code submission using email auth",
								},
								"email_code_cancel": schema.StringAttribute{
									Optional: true,
								},
								"email_code_error": schema.StringAttribute{
									Optional: true,
								},
								"email_code_field_label": schema.StringAttribute{
									Optional: true,
								},
								"email_code_message": schema.StringAttribute{
									Optional: true,
								},
								"email_code_submit": schema.StringAttribute{
									Optional: true,
								},
								"email_code_title": schema.StringAttribute{
									Optional: true,
								},
								"email_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when email not provided",
									MarkdownDescription: "error message when email not provided",
								},
								"email_field_label": schema.StringAttribute{
									Optional: true,
								},
								"email_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of email field",
									MarkdownDescription: "label of email field",
								},
								"email_message": schema.StringAttribute{
									Optional: true,
								},
								"email_submit": schema.StringAttribute{
									Optional:            true,
									Description:         "Label for confirmation code submit button using email auth",
									MarkdownDescription: "Label for confirmation code submit button using email auth",
								},
								"email_title": schema.StringAttribute{
									Optional:            true,
									Description:         "Title for the Email registration",
									MarkdownDescription: "Title for the Email registration",
								},
								"field1error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when field1 not provided",
									MarkdownDescription: "error message when field1 not provided",
								},
								"field1label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of field1",
									MarkdownDescription: "label of field1",
								},
								"field2error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when field2 not provided",
									MarkdownDescription: "error message when field2 not provided",
								},
								"field2label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of field2",
									MarkdownDescription: "label of field2",
								},
								"field3error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when field3 not provided",
									MarkdownDescription: "error message when field3 not provided",
								},
								"field3label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of field3",
									MarkdownDescription: "label of field3",
								},
								"field4error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when field4 not provided",
									MarkdownDescription: "error message when field4 not provided",
								},
								"field4label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of field4",
									MarkdownDescription: "label of field4",
								},
								"message": schema.StringAttribute{
									Optional: true,
								},
								"name_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when name not provided",
									MarkdownDescription: "error message when name not provided",
								},
								"name_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of name field",
									MarkdownDescription: "label of name field",
								},
								"optout_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Do Not Store My Personal Information",
									MarkdownDescription: "label for Do Not Store My Personal Information",
								},
								"page_title": schema.StringAttribute{
									Optional: true,
								},
								"passphrase_cancel": schema.StringAttribute{
									Optional:            true,
									Description:         "Label for the Passphrase cancel button",
									MarkdownDescription: "Label for the Passphrase cancel button",
								},
								"passphrase_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when invalid passphrase is provided",
									MarkdownDescription: "error message when invalid passphrase is provided",
								},
								"passphrase_label": schema.StringAttribute{
									Optional:            true,
									Description:         "Passphrase",
									MarkdownDescription: "Passphrase",
								},
								"passphrase_message": schema.StringAttribute{
									Optional: true,
								},
								"passphrase_submit": schema.StringAttribute{
									Optional:            true,
									Description:         "Label for the Passphrase submit button",
									MarkdownDescription: "Label for the Passphrase submit button",
								},
								"passphrase_title": schema.StringAttribute{
									Optional:            true,
									Description:         "Title for passphrase details page",
									MarkdownDescription: "Title for passphrase details page",
								},
								"privacy_policy_accept_label": schema.StringAttribute{
									Optional:            true,
									Description:         "prefix of the label of the link to go to Privacy Policy",
									MarkdownDescription: "prefix of the label of the link to go to Privacy Policy",
								},
								"privacy_policy_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when Privacy Policy not accepted",
									MarkdownDescription: "error message when Privacy Policy not accepted",
								},
								"privacy_policy_link": schema.StringAttribute{
									Optional:            true,
									Description:         "label of the link to go to Privacy Policy",
									MarkdownDescription: "label of the link to go to Privacy Policy",
								},
								"privacy_policy_text": schema.StringAttribute{
									Optional:            true,
									Description:         "text of the Privacy Policy",
									MarkdownDescription: "text of the Privacy Policy",
								},
								"required_field_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label to denote required field",
									MarkdownDescription: "label to denote required field",
								},
								"sign_in_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label of the button to /signin",
									MarkdownDescription: "label of the button to /signin",
								},
								"sms_carrier_default": schema.StringAttribute{
									Optional: true,
								},
								"sms_carrier_error": schema.StringAttribute{
									Optional: true,
								},
								"sms_carrier_field_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label for mobile carrier drop-down list",
									MarkdownDescription: "label for mobile carrier drop-down list",
								},
								"sms_code_cancel": schema.StringAttribute{
									Optional:            true,
									Description:         "Label for cancel confirmation code submission",
									MarkdownDescription: "Label for cancel confirmation code submission",
								},
								"sms_code_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when confirmation code is invalid",
									MarkdownDescription: "error message when confirmation code is invalid",
								},
								"sms_code_field_label": schema.StringAttribute{
									Optional: true,
								},
								"sms_code_message": schema.StringAttribute{
									Optional: true,
								},
								"sms_code_submit": schema.StringAttribute{
									Optional:            true,
									Description:         "Label for confirmation code submit button",
									MarkdownDescription: "Label for confirmation code submit button",
								},
								"sms_code_title": schema.StringAttribute{
									Optional: true,
								},
								"sms_country_field_label": schema.StringAttribute{
									Optional: true,
								},
								"sms_country_format": schema.StringAttribute{
									Optional: true,
								},
								"sms_have_access_code": schema.StringAttribute{
									Optional:            true,
									Description:         "Label for checkbox to specify that the user has access code",
									MarkdownDescription: "Label for checkbox to specify that the user has access code",
								},
								"sms_message_format": schema.StringAttribute{
									Optional:            true,
									Description:         "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.",
									MarkdownDescription: "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.",
								},
								"sms_number_cancel": schema.StringAttribute{
									Optional:            true,
									Description:         "label for canceling mobile details for SMS auth",
									MarkdownDescription: "label for canceling mobile details for SMS auth",
								},
								"sms_number_error": schema.StringAttribute{
									Optional: true,
								},
								"sms_number_field_label": schema.StringAttribute{
									Optional:            true,
									Description:         "label for field to provide mobile number",
									MarkdownDescription: "label for field to provide mobile number",
								},
								"sms_number_format": schema.StringAttribute{
									Optional: true,
								},
								"sms_number_message": schema.StringAttribute{
									Optional: true,
								},
								"sms_number_submit": schema.StringAttribute{
									Optional:            true,
									Description:         "label for submit button for code generation",
									MarkdownDescription: "label for submit button for code generation",
								},
								"sms_number_title": schema.StringAttribute{
									Optional:            true,
									Description:         "Title for phone number details",
									MarkdownDescription: "Title for phone number details",
								},
								"sms_username_format": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_back_link": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_cancel": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_email": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Sponsor Email",
									MarkdownDescription: "label for Sponsor Email",
								},
								"sponsor_email_error": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_info_approved": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_info_denied": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_info_pending": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_name": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Sponsor Name",
									MarkdownDescription: "label for Sponsor Name",
								},
								"sponsor_name_error": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_note_pending": schema.StringAttribute{
									Optional: true,
								},
								"sponsor_request_access": schema.StringAttribute{
									Optional:            true,
									Description:         "submit button label request Wifi Access and notify sponsor about guest request",
									MarkdownDescription: "submit button label request Wifi Access and notify sponsor about guest request",
								},
								"sponsor_status_approved": schema.StringAttribute{
									Optional:            true,
									Description:         "text to display if sponsor approves request",
									MarkdownDescription: "text to display if sponsor approves request",
								},
								"sponsor_status_denied": schema.StringAttribute{
									Optional:            true,
									Description:         "text to display when sponsor denies request",
									MarkdownDescription: "text to display when sponsor denies request",
								},
								"sponsor_status_pending": schema.StringAttribute{
									Optional:            true,
									Description:         "text to display if request is still pending",
									MarkdownDescription: "text to display if request is still pending",
								},
								"sponsor_submit": schema.StringAttribute{
									Optional:            true,
									Description:         "submit button label to notify sponsor about guest request",
									MarkdownDescription: "submit button label to notify sponsor about guest request",
								},
								"sponsors_error": schema.StringAttribute{
									Optional: true,
								},
								"sponsors_field_label": schema.StringAttribute{
									Optional: true,
								},
								"tos_accept_label": schema.StringAttribute{
									Optional:            true,
									Description:         "prefix of the label of the link to go to tos",
									MarkdownDescription: "prefix of the label of the link to go to tos",
								},
								"tos_error": schema.StringAttribute{
									Optional:            true,
									Description:         "error message when tos not accepted",
									MarkdownDescription: "error message when tos not accepted",
								},
								"tos_link": schema.StringAttribute{
									Optional:            true,
									Description:         "label of the link to go to tos",
									MarkdownDescription: "label of the link to go to tos",
								},
								"tos_text": schema.StringAttribute{
									Optional:            true,
									Description:         "text of the Terms of Service",
									MarkdownDescription: "text of the Terms of Service",
								},
								"uth_button_amazon": schema.StringAttribute{
									Optional:            true,
									Description:         "label for Amazon auth button",
									MarkdownDescription: "label for Amazon auth button",
								},
							},
							CustomType: LocalesType{
								ObjectType: types.ObjectType{
									AttrTypes: LocalesValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Description:         "Can be used to localize the portal based on the User Agent. Allowed property key values are:\n      \"ar\", \"ca-ES\", \"cs-CZ\", \"da-DK\", \"de-DE\", \"el-GR\", \"en-GB\", \"en-US\", \"es-ES\", \n      \"fi-FI\", \"fr-FR\", \"he-IL\", \"hi-IN\", \"hr-HR\", \"hu-HU\", \"id-ID\", \"it-IT\", \"ja-JP\", \n      \"ko-KR\", \"ms-MY\", \"nb-NO\", \"nl-NL\", \"pl-PL\", \"pt-BR\", \"pt-PT\", \"ro-RO\", \"ru-RU\", \n      \"sk-SK\", \"sv-SE\", \"th-TH\", \"tr-TR\", \"uk-UA\", \"vi-VN\", \"zh-Hans\", \"zh-Hant\",",
						MarkdownDescription: "Can be used to localize the portal based on the User Agent. Allowed property key values are:\n      \"ar\", \"ca-ES\", \"cs-CZ\", \"da-DK\", \"de-DE\", \"el-GR\", \"en-GB\", \"en-US\", \"es-ES\", \n      \"fi-FI\", \"fr-FR\", \"he-IL\", \"hi-IN\", \"hr-HR\", \"hu-HU\", \"id-ID\", \"it-IT\", \"ja-JP\", \n      \"ko-KR\", \"ms-MY\", \"nb-NO\", \"nl-NL\", \"pl-PL\", \"pt-BR\", \"pt-PT\", \"ro-RO\", \"ru-RU\", \n      \"sk-SK\", \"sv-SE\", \"th-TH\", \"tr-TR\", \"uk-UA\", \"vi-VN\", \"zh-Hans\", \"zh-Hant\",",
						Validators: []validator.Map{
							mapvalidator.SizeAtLeast(1),
							mapvalidator.KeysAre(stringvalidator.OneOf(
								"ar", "ca-ES", "cs-CZ", "da-DK", "de-DE", "el-GR", "en-GB", "en-US", "es-ES",
								"fi-FI", "fr-FR", "he-IL", "hi-IN", "hr-HR", "hu-HU", "id-ID", "it-IT", "ja-JP",
								"ko-KR", "ms-MY", "nb-NO", "nl-NL", "pl-PL", "pt-BR", "pt-PT", "ro-RO", "ru-RU",
								"sk-SK", "sv-SE", "th-TH", "tr-TR", "uk-UA", "vi-VN", "zh-Hans", "zh-Hant",
							)),
						},
					},
					"message": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Sign in to get online"),
					},
					"multi_auth": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(false),
					},
					"name": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether name field is required",
						MarkdownDescription: "whether name field is required",
						Default:             booldefault.StaticBool(false),
					},
					"name_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when name not provided",
						MarkdownDescription: "error message when name not provided",
						Default:             stringdefault.StaticString("Please provide your name"),
					},
					"name_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of name field",
						MarkdownDescription: "label of name field",
						Default:             stringdefault.StaticString("Name"),
					},
					"opt_out_default": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Default value for the `Do not store` checkbox",
						MarkdownDescription: "Default value for the `Do not store` checkbox",
						Default:             booldefault.StaticBool(true),
					},
					"optout": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether to display Do Not Store My Personal Information",
						MarkdownDescription: "whether to display Do Not Store My Personal Information",
						Default:             booldefault.StaticBool(false),
					},
					"optout_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Do Not Store My Personal Information",
						MarkdownDescription: "label for Do Not Store My Personal Information",
						Default:             stringdefault.StaticString("Do not store"),
					},
					"page_title": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Welcome"),
					},
					"passphrase_cancel": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Label for the Passphrase cancel button",
						MarkdownDescription: "Label for the Passphrase cancel button",
						Default:             stringdefault.StaticString("Cancel"),
					},
					"passphrase_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when invalid passphrase is provided",
						MarkdownDescription: "error message when invalid passphrase is provided",
						Default:             stringdefault.StaticString("Invalid Passphrase"),
					},
					"passphrase_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Passphrase",
						MarkdownDescription: "Passphrase",
						Default:             stringdefault.StaticString("Passphrase"),
					},
					"passphrase_message": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Enter the secret passphrase to access the WiFi network."),
					},
					"passphrase_submit": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Label for the Passphrase submit button",
						MarkdownDescription: "Label for the Passphrase submit button",
						Default:             stringdefault.StaticString("Sign in"),
					},
					"passphrase_title": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Title for passphrase details page",
						MarkdownDescription: "Title for passphrase details page",
						Default:             stringdefault.StaticString("Sign in with Passphrase"),
					},
					"powered_by": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "whether to show \\\"Powered by Mist\\\"",
						MarkdownDescription: "whether to show \\\"Powered by Mist\\\"",
						Default:             booldefault.StaticBool(true),
					},
					"privacy": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "wheter to require the Privacy Term acceptance",
						MarkdownDescription: "wheter to require the Privacy Term acceptance",
						Default:             booldefault.StaticBool(false),
					},
					"privacy_policy_accept_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "prefix of the label of the link to go to Privacy Policy",
						MarkdownDescription: "prefix of the label of the link to go to Privacy Policy",
						Default:             stringdefault.StaticString("I accept the Privacy Terms"),
					},
					"privacy_policy_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when Privacy Policy not accepted",
						MarkdownDescription: "error message when Privacy Policy not accepted",
						Default:             stringdefault.StaticString("Please review and accept the Privacy Terms"),
					},
					"privacy_policy_link": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of the link to go to Privacy Policy",
						MarkdownDescription: "label of the link to go to Privacy Policy",
						Default:             stringdefault.StaticString("Privacy Terms"),
					},
					"privacy_policy_text": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "text of the Privacy Policy",
						MarkdownDescription: "text of the Privacy Policy",
						Default:             stringdefault.StaticString("<< provide your Privacy Terms here >>"),
					},
					"required_field_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label to denote required field",
						MarkdownDescription: "label to denote required field",
						Default:             stringdefault.StaticString("required"),
					},
					"responsive_layout": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(true),
					},
					"sign_in_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of the button to /signin",
						MarkdownDescription: "label of the button to /signin",
						Default:             stringdefault.StaticString("Sign In"),
					},
					"sms_carrier_default": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Please Select"),
					},
					"sms_carrier_error": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Please select a mobile carrier"),
					},
					"sms_carrier_field_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for mobile carrier drop-down list",
						MarkdownDescription: "label for mobile carrier drop-down list",
						Default:             stringdefault.StaticString("Mobile Carrier"),
					},
					"sms_code_cancel": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Label for cancel confirmation code submission",
						MarkdownDescription: "Label for cancel confirmation code submission",
						Default:             stringdefault.StaticString("I did not receive the code"),
					},
					"sms_code_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when confirmation code is invalid",
						MarkdownDescription: "error message when confirmation code is invalid",
						Default:             stringdefault.StaticString("Invalid Access Code"),
					},
					"sms_code_field_label": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Confirmation Code"),
					},
					"sms_code_message": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Enter the access number that was sent to your mobile number."),
					},
					"sms_code_submit": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Label for confirmation code submit button",
						MarkdownDescription: "Label for confirmation code submit button",
						Default:             stringdefault.StaticString("Sign In"),
					},
					"sms_code_title": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Access Code"),
					},
					"sms_country_field_label": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Country Code"),
					},
					"sms_country_format": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("1"),
					},
					"sms_have_access_code": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Label for checkbox to specify that the user has access code",
						MarkdownDescription: "Label for checkbox to specify that the user has access code",
						Default:             stringdefault.StaticString("I have an access code"),
					},
					"sms_is_twilio": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(false),
					},
					"sms_message_format": schema.StringAttribute{
						Optional:            true,
						Description:         "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.",
						MarkdownDescription: "format of access code sms message. {{code}} and {{duration}} are place holders and should be retained as is.",
					},
					"sms_number_cancel": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for canceling mobile details for SMS auth",
						MarkdownDescription: "label for canceling mobile details for SMS auth",
						Default:             stringdefault.StaticString("Cancel"),
					},
					"sms_number_error": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Invalid Mobile Number"),
					},
					"sms_number_field_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for field to provide mobile number",
						MarkdownDescription: "label for field to provide mobile number",
						Default:             stringdefault.StaticString("Mobile Number"),
					},
					"sms_number_format": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("2125551212 (digits only)"),
					},
					"sms_number_message": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("We will send an access code to your mobile number which you can use to connect to the WiFi network. Message and data rates may apply."),
					},
					"sms_number_submit": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for submit button for code generation",
						MarkdownDescription: "label for submit button for code generation",
						Default:             stringdefault.StaticString("Send Access Code"),
					},
					"sms_number_title": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Title for phone number details",
						MarkdownDescription: "Title for phone number details",
						Default:             stringdefault.StaticString("Sign in with Text Message"),
					},
					"sms_username_format": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("username"),
					},
					"sms_validity_duration": schema.Int64Attribute{
						Optional:            true,
						Description:         "how long confirmation code should be considered valid (in minutes)",
						MarkdownDescription: "how long confirmation code should be considered valid (in minutes)",
						Validators: []validator.Int64{
							int64validator.Between(1, 30),
						},
					},
					"sponsor_back_link": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Go back and edit request form"),
					},
					"sponsor_cancel": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Cancel"),
					},
					"sponsor_email": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Sponsor Email",
						MarkdownDescription: "label for Sponsor Email",
						Default:             stringdefault.StaticString("Sponsor Email"),
					},
					"sponsor_email_error": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Please provide valid sponsor email"),
					},
					"sponsor_email_template": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "html template to replace/override default sponsor email template \nSponsor Email Template supports following template variables:\n  * `approve_url`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized\n  * `deny_url`: Renders URL to reject the request\n  * `guest_email`: Renders Email ID of the guest\n  * `guest_name`: Renders Name of the guest\n  * `field1`: Renders value of the Custom Field 1\n  * `field2`: Renders value of the Custom Field 2\n  * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)\n  * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)",
						MarkdownDescription: "html template to replace/override default sponsor email template \nSponsor Email Template supports following template variables:\n  * `approve_url`: Renders URL to approve the request; optionally &minutes=N query param can be appended to change the Authorization period of the guest, where N is a valid integer denoting number of minutes a guest remains authorized\n  * `deny_url`: Renders URL to reject the request\n  * `guest_email`: Renders Email ID of the guest\n  * `guest_name`: Renders Name of the guest\n  * `field1`: Renders value of the Custom Field 1\n  * `field2`: Renders value of the Custom Field 2\n  * `sponsor_link_validity_duration`: Renders validity time of the request (i.e. Approve/Deny URL)\n  * `auth_expire_minutes`: Renders Wlan-level configured Guest Authorization Expiration time period (in minutes), If not configured then default (1 day in minutes)",
						Default:             stringdefault.StaticString(""),
					},
					"sponsor_info_approved": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Your request was approved by"),
					},
					"sponsor_info_denied": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Your request was denied by"),
					},
					"sponsor_info_pending": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Your notification has been sent to"),
					},
					"sponsor_name": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label for Sponsor Name",
						MarkdownDescription: "label for Sponsor Name",
						Default:             stringdefault.StaticString("Sponsor Name"),
					},
					"sponsor_name_error": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Please provide sponsor name"),
					},
					"sponsor_note_pending": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Please wait for them to acknowledge."),
					},
					"sponsor_request_access": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "submit button label request Wifi Access and notify sponsor about guest request",
						MarkdownDescription: "submit button label request Wifi Access and notify sponsor about guest request",
						Default:             stringdefault.StaticString("Request WiFi Access"),
					},
					"sponsor_status_approved": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "text to display if sponsor approves request",
						MarkdownDescription: "text to display if sponsor approves request",
						Default:             stringdefault.StaticString("Your request was approved"),
					},
					"sponsor_status_denied": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "text to display when sponsor denies request",
						MarkdownDescription: "text to display when sponsor denies request",
						Default:             stringdefault.StaticString("Your request was denied"),
					},
					"sponsor_status_pending": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "text to display if request is still pending",
						MarkdownDescription: "text to display if request is still pending",
						Default:             stringdefault.StaticString("Notification Sent"),
					},
					"sponsor_submit": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "submit button label to notify sponsor about guest request",
						MarkdownDescription: "submit button label to notify sponsor about guest request",
						Default:             stringdefault.StaticString("Request WiFi Access"),
					},
					"sponsors_error": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Please select a sponsor"),
					},
					"sponsors_field_label": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Default:  stringdefault.StaticString("Sponsors"),
					},
					"tos": schema.BoolAttribute{
						Optional: true,
						Computed: true,
						Default:  booldefault.StaticBool(true),
					},
					"tos_accept_label": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "prefix of the label of the link to go to tos",
						MarkdownDescription: "prefix of the label of the link to go to tos",
						Default:             stringdefault.StaticString("I accept the Terms of Service"),
					},
					"tos_error": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "error message when tos not accepted",
						MarkdownDescription: "error message when tos not accepted",
						Default:             stringdefault.StaticString("Please review and accept the Terms of Service"),
					},
					"tos_link": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "label of the link to go to tos",
						MarkdownDescription: "label of the link to go to tos",
						Default:             stringdefault.StaticString("Terms of Service"),
					},
					"tos_text": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "text of the Terms of Service",
						MarkdownDescription: "text of the Terms of Service",
						Default:             stringdefault.StaticString("<< provide your Terms of Service here >>"),
					},
				},
				CustomType: PortalTemplateType{
					ObjectType: types.ObjectType{
						AttrTypes: PortalTemplateValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "portal template wlan settings",
				MarkdownDescription: "portal template wlan settings",
			},
			"site_id": schema.StringAttribute{
				Required: true,
			},
			"wlan_id": schema.StringAttribute{
				Required: true,
				Description:         "Site WLAN ID",
				MarkdownDescription: "Site WLAN ID",
			},
		},
	}
}

type SiteWlanPortalTemplateModel struct {
	PortalTemplate PortalTemplateValue `tfsdk:"portal_template"`
	SiteId         types.String        `tfsdk:"site_id"`
	WlanId         types.String        `tfsdk:"wlan_id"`
}

var _ basetypes.ObjectTypable = PortalTemplateType{}

type PortalTemplateType struct {
	basetypes.ObjectType
}

func (t PortalTemplateType) Equal(o attr.Type) bool {
	other, ok := o.(PortalTemplateType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PortalTemplateType) String() string {
	return "PortalTemplateType"
}

func (t PortalTemplateType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	accessCodeAlternateEmailAttribute, ok := attributes["access_code_alternate_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_code_alternate_email is missing from object`)

		return nil, diags
	}

	accessCodeAlternateEmailVal, ok := accessCodeAlternateEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_code_alternate_email expected to be basetypes.StringValue, was: %T`, accessCodeAlternateEmailAttribute))
	}

	alignmentAttribute, ok := attributes["alignment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alignment is missing from object`)

		return nil, diags
	}

	alignmentVal, ok := alignmentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alignment expected to be basetypes.StringValue, was: %T`, alignmentAttribute))
	}

	authButtonAmazonAttribute, ok := attributes["auth_button_amazon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_amazon is missing from object`)

		return nil, diags
	}

	authButtonAmazonVal, ok := authButtonAmazonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_amazon expected to be basetypes.StringValue, was: %T`, authButtonAmazonAttribute))
	}

	authButtonAzureAttribute, ok := attributes["auth_button_azure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_azure is missing from object`)

		return nil, diags
	}

	authButtonAzureVal, ok := authButtonAzureAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_azure expected to be basetypes.StringValue, was: %T`, authButtonAzureAttribute))
	}

	authButtonEmailAttribute, ok := attributes["auth_button_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_email is missing from object`)

		return nil, diags
	}

	authButtonEmailVal, ok := authButtonEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_email expected to be basetypes.StringValue, was: %T`, authButtonEmailAttribute))
	}

	authButtonFacebookAttribute, ok := attributes["auth_button_facebook"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_facebook is missing from object`)

		return nil, diags
	}

	authButtonFacebookVal, ok := authButtonFacebookAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_facebook expected to be basetypes.StringValue, was: %T`, authButtonFacebookAttribute))
	}

	authButtonGoogleAttribute, ok := attributes["auth_button_google"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_google is missing from object`)

		return nil, diags
	}

	authButtonGoogleVal, ok := authButtonGoogleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_google expected to be basetypes.StringValue, was: %T`, authButtonGoogleAttribute))
	}

	authButtonMicrosoftAttribute, ok := attributes["auth_button_microsoft"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_microsoft is missing from object`)

		return nil, diags
	}

	authButtonMicrosoftVal, ok := authButtonMicrosoftAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_microsoft expected to be basetypes.StringValue, was: %T`, authButtonMicrosoftAttribute))
	}

	authButtonPassphraseAttribute, ok := attributes["auth_button_passphrase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_passphrase is missing from object`)

		return nil, diags
	}

	authButtonPassphraseVal, ok := authButtonPassphraseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_passphrase expected to be basetypes.StringValue, was: %T`, authButtonPassphraseAttribute))
	}

	authButtonSmsAttribute, ok := attributes["auth_button_sms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sms is missing from object`)

		return nil, diags
	}

	authButtonSmsVal, ok := authButtonSmsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sms expected to be basetypes.StringValue, was: %T`, authButtonSmsAttribute))
	}

	authButtonSponsorAttribute, ok := attributes["auth_button_sponsor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sponsor is missing from object`)

		return nil, diags
	}

	authButtonSponsorVal, ok := authButtonSponsorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sponsor expected to be basetypes.StringValue, was: %T`, authButtonSponsorAttribute))
	}

	authLabelAttribute, ok := attributes["auth_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_label is missing from object`)

		return nil, diags
	}

	authLabelVal, ok := authLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_label expected to be basetypes.StringValue, was: %T`, authLabelAttribute))
	}

	backLinkAttribute, ok := attributes["back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`back_link is missing from object`)

		return nil, diags
	}

	backLinkVal, ok := backLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`back_link expected to be basetypes.StringValue, was: %T`, backLinkAttribute))
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return nil, diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	colorDarkAttribute, ok := attributes["color_dark"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color_dark is missing from object`)

		return nil, diags
	}

	colorDarkVal, ok := colorDarkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color_dark expected to be basetypes.StringValue, was: %T`, colorDarkAttribute))
	}

	colorLightAttribute, ok := attributes["color_light"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color_light is missing from object`)

		return nil, diags
	}

	colorLightVal, ok := colorLightAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color_light expected to be basetypes.StringValue, was: %T`, colorLightAttribute))
	}

	companyAttribute, ok := attributes["company"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company is missing from object`)

		return nil, diags
	}

	companyVal, ok := companyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company expected to be basetypes.BoolValue, was: %T`, companyAttribute))
	}

	companyErrorAttribute, ok := attributes["company_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_error is missing from object`)

		return nil, diags
	}

	companyErrorVal, ok := companyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_error expected to be basetypes.StringValue, was: %T`, companyErrorAttribute))
	}

	companyLabelAttribute, ok := attributes["company_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_label is missing from object`)

		return nil, diags
	}

	companyLabelVal, ok := companyLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_label expected to be basetypes.StringValue, was: %T`, companyLabelAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return nil, diags
	}

	emailVal, ok := emailAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.BoolValue, was: %T`, emailAttribute))
	}

	emailAccessDomainErrorAttribute, ok := attributes["email_access_domain_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_access_domain_error is missing from object`)

		return nil, diags
	}

	emailAccessDomainErrorVal, ok := emailAccessDomainErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_access_domain_error expected to be basetypes.StringValue, was: %T`, emailAccessDomainErrorAttribute))
	}

	emailCancelAttribute, ok := attributes["email_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_cancel is missing from object`)

		return nil, diags
	}

	emailCancelVal, ok := emailCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_cancel expected to be basetypes.StringValue, was: %T`, emailCancelAttribute))
	}

	emailCodeCancelAttribute, ok := attributes["email_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_cancel is missing from object`)

		return nil, diags
	}

	emailCodeCancelVal, ok := emailCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_cancel expected to be basetypes.StringValue, was: %T`, emailCodeCancelAttribute))
	}

	emailCodeErrorAttribute, ok := attributes["email_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_error is missing from object`)

		return nil, diags
	}

	emailCodeErrorVal, ok := emailCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_error expected to be basetypes.StringValue, was: %T`, emailCodeErrorAttribute))
	}

	emailCodeFieldLabelAttribute, ok := attributes["email_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_field_label is missing from object`)

		return nil, diags
	}

	emailCodeFieldLabelVal, ok := emailCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_field_label expected to be basetypes.StringValue, was: %T`, emailCodeFieldLabelAttribute))
	}

	emailCodeMessageAttribute, ok := attributes["email_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_message is missing from object`)

		return nil, diags
	}

	emailCodeMessageVal, ok := emailCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_message expected to be basetypes.StringValue, was: %T`, emailCodeMessageAttribute))
	}

	emailCodeSubmitAttribute, ok := attributes["email_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_submit is missing from object`)

		return nil, diags
	}

	emailCodeSubmitVal, ok := emailCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_submit expected to be basetypes.StringValue, was: %T`, emailCodeSubmitAttribute))
	}

	emailCodeTitleAttribute, ok := attributes["email_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_title is missing from object`)

		return nil, diags
	}

	emailCodeTitleVal, ok := emailCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_title expected to be basetypes.StringValue, was: %T`, emailCodeTitleAttribute))
	}

	emailErrorAttribute, ok := attributes["email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_error is missing from object`)

		return nil, diags
	}

	emailErrorVal, ok := emailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_error expected to be basetypes.StringValue, was: %T`, emailErrorAttribute))
	}

	emailFieldLabelAttribute, ok := attributes["email_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_field_label is missing from object`)

		return nil, diags
	}

	emailFieldLabelVal, ok := emailFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_field_label expected to be basetypes.StringValue, was: %T`, emailFieldLabelAttribute))
	}

	emailLabelAttribute, ok := attributes["email_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_label is missing from object`)

		return nil, diags
	}

	emailLabelVal, ok := emailLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_label expected to be basetypes.StringValue, was: %T`, emailLabelAttribute))
	}

	emailMessageAttribute, ok := attributes["email_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_message is missing from object`)

		return nil, diags
	}

	emailMessageVal, ok := emailMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_message expected to be basetypes.StringValue, was: %T`, emailMessageAttribute))
	}

	emailSubmitAttribute, ok := attributes["email_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_submit is missing from object`)

		return nil, diags
	}

	emailSubmitVal, ok := emailSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_submit expected to be basetypes.StringValue, was: %T`, emailSubmitAttribute))
	}

	emailTitleAttribute, ok := attributes["email_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_title is missing from object`)

		return nil, diags
	}

	emailTitleVal, ok := emailTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_title expected to be basetypes.StringValue, was: %T`, emailTitleAttribute))
	}

	field1Attribute, ok := attributes["field1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1 is missing from object`)

		return nil, diags
	}

	field1Val, ok := field1Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1 expected to be basetypes.BoolValue, was: %T`, field1Attribute))
	}

	field1errorAttribute, ok := attributes["field1error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1error is missing from object`)

		return nil, diags
	}

	field1errorVal, ok := field1errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1error expected to be basetypes.StringValue, was: %T`, field1errorAttribute))
	}

	field1labelAttribute, ok := attributes["field1label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1label is missing from object`)

		return nil, diags
	}

	field1labelVal, ok := field1labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1label expected to be basetypes.StringValue, was: %T`, field1labelAttribute))
	}

	field1requiredAttribute, ok := attributes["field1required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1required is missing from object`)

		return nil, diags
	}

	field1requiredVal, ok := field1requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1required expected to be basetypes.BoolValue, was: %T`, field1requiredAttribute))
	}

	field2Attribute, ok := attributes["field2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2 is missing from object`)

		return nil, diags
	}

	field2Val, ok := field2Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2 expected to be basetypes.BoolValue, was: %T`, field2Attribute))
	}

	field2errorAttribute, ok := attributes["field2error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2error is missing from object`)

		return nil, diags
	}

	field2errorVal, ok := field2errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2error expected to be basetypes.StringValue, was: %T`, field2errorAttribute))
	}

	field2labelAttribute, ok := attributes["field2label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2label is missing from object`)

		return nil, diags
	}

	field2labelVal, ok := field2labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2label expected to be basetypes.StringValue, was: %T`, field2labelAttribute))
	}

	field2requiredAttribute, ok := attributes["field2required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2required is missing from object`)

		return nil, diags
	}

	field2requiredVal, ok := field2requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2required expected to be basetypes.BoolValue, was: %T`, field2requiredAttribute))
	}

	field3Attribute, ok := attributes["field3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3 is missing from object`)

		return nil, diags
	}

	field3Val, ok := field3Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3 expected to be basetypes.BoolValue, was: %T`, field3Attribute))
	}

	field3errorAttribute, ok := attributes["field3error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3error is missing from object`)

		return nil, diags
	}

	field3errorVal, ok := field3errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3error expected to be basetypes.StringValue, was: %T`, field3errorAttribute))
	}

	field3labelAttribute, ok := attributes["field3label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3label is missing from object`)

		return nil, diags
	}

	field3labelVal, ok := field3labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3label expected to be basetypes.StringValue, was: %T`, field3labelAttribute))
	}

	field3requiredAttribute, ok := attributes["field3required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3required is missing from object`)

		return nil, diags
	}

	field3requiredVal, ok := field3requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3required expected to be basetypes.BoolValue, was: %T`, field3requiredAttribute))
	}

	field4Attribute, ok := attributes["field4"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4 is missing from object`)

		return nil, diags
	}

	field4Val, ok := field4Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4 expected to be basetypes.BoolValue, was: %T`, field4Attribute))
	}

	field4errorAttribute, ok := attributes["field4error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4error is missing from object`)

		return nil, diags
	}

	field4errorVal, ok := field4errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4error expected to be basetypes.StringValue, was: %T`, field4errorAttribute))
	}

	field4labelAttribute, ok := attributes["field4label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4label is missing from object`)

		return nil, diags
	}

	field4labelVal, ok := field4labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4label expected to be basetypes.StringValue, was: %T`, field4labelAttribute))
	}

	field4requiredAttribute, ok := attributes["field4required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4required is missing from object`)

		return nil, diags
	}

	field4requiredVal, ok := field4requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4required expected to be basetypes.BoolValue, was: %T`, field4requiredAttribute))
	}

	localesAttribute, ok := attributes["locales"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`locales is missing from object`)

		return nil, diags
	}

	localesVal, ok := localesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`locales expected to be basetypes.MapValue, was: %T`, localesAttribute))
	}

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return nil, diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	multiAuthAttribute, ok := attributes["multi_auth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multi_auth is missing from object`)

		return nil, diags
	}

	multiAuthVal, ok := multiAuthAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multi_auth expected to be basetypes.BoolValue, was: %T`, multiAuthAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.BoolValue, was: %T`, nameAttribute))
	}

	nameErrorAttribute, ok := attributes["name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_error is missing from object`)

		return nil, diags
	}

	nameErrorVal, ok := nameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_error expected to be basetypes.StringValue, was: %T`, nameErrorAttribute))
	}

	nameLabelAttribute, ok := attributes["name_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_label is missing from object`)

		return nil, diags
	}

	nameLabelVal, ok := nameLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_label expected to be basetypes.StringValue, was: %T`, nameLabelAttribute))
	}

	optOutDefaultAttribute, ok := attributes["opt_out_default"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`opt_out_default is missing from object`)

		return nil, diags
	}

	optOutDefaultVal, ok := optOutDefaultAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`opt_out_default expected to be basetypes.BoolValue, was: %T`, optOutDefaultAttribute))
	}

	optoutAttribute, ok := attributes["optout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optout is missing from object`)

		return nil, diags
	}

	optoutVal, ok := optoutAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optout expected to be basetypes.BoolValue, was: %T`, optoutAttribute))
	}

	optoutLabelAttribute, ok := attributes["optout_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optout_label is missing from object`)

		return nil, diags
	}

	optoutLabelVal, ok := optoutLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optout_label expected to be basetypes.StringValue, was: %T`, optoutLabelAttribute))
	}

	pageTitleAttribute, ok := attributes["page_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`page_title is missing from object`)

		return nil, diags
	}

	pageTitleVal, ok := pageTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`page_title expected to be basetypes.StringValue, was: %T`, pageTitleAttribute))
	}

	passphraseCancelAttribute, ok := attributes["passphrase_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_cancel is missing from object`)

		return nil, diags
	}

	passphraseCancelVal, ok := passphraseCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_cancel expected to be basetypes.StringValue, was: %T`, passphraseCancelAttribute))
	}

	passphraseErrorAttribute, ok := attributes["passphrase_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_error is missing from object`)

		return nil, diags
	}

	passphraseErrorVal, ok := passphraseErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_error expected to be basetypes.StringValue, was: %T`, passphraseErrorAttribute))
	}

	passphraseLabelAttribute, ok := attributes["passphrase_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_label is missing from object`)

		return nil, diags
	}

	passphraseLabelVal, ok := passphraseLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_label expected to be basetypes.StringValue, was: %T`, passphraseLabelAttribute))
	}

	passphraseMessageAttribute, ok := attributes["passphrase_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_message is missing from object`)

		return nil, diags
	}

	passphraseMessageVal, ok := passphraseMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_message expected to be basetypes.StringValue, was: %T`, passphraseMessageAttribute))
	}

	passphraseSubmitAttribute, ok := attributes["passphrase_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_submit is missing from object`)

		return nil, diags
	}

	passphraseSubmitVal, ok := passphraseSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_submit expected to be basetypes.StringValue, was: %T`, passphraseSubmitAttribute))
	}

	passphraseTitleAttribute, ok := attributes["passphrase_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_title is missing from object`)

		return nil, diags
	}

	passphraseTitleVal, ok := passphraseTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_title expected to be basetypes.StringValue, was: %T`, passphraseTitleAttribute))
	}

	poweredByAttribute, ok := attributes["powered_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`powered_by is missing from object`)

		return nil, diags
	}

	poweredByVal, ok := poweredByAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`powered_by expected to be basetypes.BoolValue, was: %T`, poweredByAttribute))
	}

	privacyAttribute, ok := attributes["privacy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy is missing from object`)

		return nil, diags
	}

	privacyVal, ok := privacyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy expected to be basetypes.BoolValue, was: %T`, privacyAttribute))
	}

	privacyPolicyAcceptLabelAttribute, ok := attributes["privacy_policy_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_accept_label is missing from object`)

		return nil, diags
	}

	privacyPolicyAcceptLabelVal, ok := privacyPolicyAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_accept_label expected to be basetypes.StringValue, was: %T`, privacyPolicyAcceptLabelAttribute))
	}

	privacyPolicyErrorAttribute, ok := attributes["privacy_policy_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_error is missing from object`)

		return nil, diags
	}

	privacyPolicyErrorVal, ok := privacyPolicyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_error expected to be basetypes.StringValue, was: %T`, privacyPolicyErrorAttribute))
	}

	privacyPolicyLinkAttribute, ok := attributes["privacy_policy_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_link is missing from object`)

		return nil, diags
	}

	privacyPolicyLinkVal, ok := privacyPolicyLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_link expected to be basetypes.StringValue, was: %T`, privacyPolicyLinkAttribute))
	}

	privacyPolicyTextAttribute, ok := attributes["privacy_policy_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_text is missing from object`)

		return nil, diags
	}

	privacyPolicyTextVal, ok := privacyPolicyTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_text expected to be basetypes.StringValue, was: %T`, privacyPolicyTextAttribute))
	}

	requiredFieldLabelAttribute, ok := attributes["required_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`required_field_label is missing from object`)

		return nil, diags
	}

	requiredFieldLabelVal, ok := requiredFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`required_field_label expected to be basetypes.StringValue, was: %T`, requiredFieldLabelAttribute))
	}

	responsiveLayoutAttribute, ok := attributes["responsive_layout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`responsive_layout is missing from object`)

		return nil, diags
	}

	responsiveLayoutVal, ok := responsiveLayoutAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`responsive_layout expected to be basetypes.BoolValue, was: %T`, responsiveLayoutAttribute))
	}

	signInLabelAttribute, ok := attributes["sign_in_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sign_in_label is missing from object`)

		return nil, diags
	}

	signInLabelVal, ok := signInLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sign_in_label expected to be basetypes.StringValue, was: %T`, signInLabelAttribute))
	}

	smsCarrierDefaultAttribute, ok := attributes["sms_carrier_default"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_default is missing from object`)

		return nil, diags
	}

	smsCarrierDefaultVal, ok := smsCarrierDefaultAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_default expected to be basetypes.StringValue, was: %T`, smsCarrierDefaultAttribute))
	}

	smsCarrierErrorAttribute, ok := attributes["sms_carrier_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_error is missing from object`)

		return nil, diags
	}

	smsCarrierErrorVal, ok := smsCarrierErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_error expected to be basetypes.StringValue, was: %T`, smsCarrierErrorAttribute))
	}

	smsCarrierFieldLabelAttribute, ok := attributes["sms_carrier_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_field_label is missing from object`)

		return nil, diags
	}

	smsCarrierFieldLabelVal, ok := smsCarrierFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_field_label expected to be basetypes.StringValue, was: %T`, smsCarrierFieldLabelAttribute))
	}

	smsCodeCancelAttribute, ok := attributes["sms_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_cancel is missing from object`)

		return nil, diags
	}

	smsCodeCancelVal, ok := smsCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_cancel expected to be basetypes.StringValue, was: %T`, smsCodeCancelAttribute))
	}

	smsCodeErrorAttribute, ok := attributes["sms_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_error is missing from object`)

		return nil, diags
	}

	smsCodeErrorVal, ok := smsCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_error expected to be basetypes.StringValue, was: %T`, smsCodeErrorAttribute))
	}

	smsCodeFieldLabelAttribute, ok := attributes["sms_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_field_label is missing from object`)

		return nil, diags
	}

	smsCodeFieldLabelVal, ok := smsCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_field_label expected to be basetypes.StringValue, was: %T`, smsCodeFieldLabelAttribute))
	}

	smsCodeMessageAttribute, ok := attributes["sms_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_message is missing from object`)

		return nil, diags
	}

	smsCodeMessageVal, ok := smsCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_message expected to be basetypes.StringValue, was: %T`, smsCodeMessageAttribute))
	}

	smsCodeSubmitAttribute, ok := attributes["sms_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_submit is missing from object`)

		return nil, diags
	}

	smsCodeSubmitVal, ok := smsCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_submit expected to be basetypes.StringValue, was: %T`, smsCodeSubmitAttribute))
	}

	smsCodeTitleAttribute, ok := attributes["sms_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_title is missing from object`)

		return nil, diags
	}

	smsCodeTitleVal, ok := smsCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_title expected to be basetypes.StringValue, was: %T`, smsCodeTitleAttribute))
	}

	smsCountryFieldLabelAttribute, ok := attributes["sms_country_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_field_label is missing from object`)

		return nil, diags
	}

	smsCountryFieldLabelVal, ok := smsCountryFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_field_label expected to be basetypes.StringValue, was: %T`, smsCountryFieldLabelAttribute))
	}

	smsCountryFormatAttribute, ok := attributes["sms_country_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_format is missing from object`)

		return nil, diags
	}

	smsCountryFormatVal, ok := smsCountryFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_format expected to be basetypes.StringValue, was: %T`, smsCountryFormatAttribute))
	}

	smsHaveAccessCodeAttribute, ok := attributes["sms_have_access_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_have_access_code is missing from object`)

		return nil, diags
	}

	smsHaveAccessCodeVal, ok := smsHaveAccessCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_have_access_code expected to be basetypes.StringValue, was: %T`, smsHaveAccessCodeAttribute))
	}

	smsIsTwilioAttribute, ok := attributes["sms_is_twilio"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_is_twilio is missing from object`)

		return nil, diags
	}

	smsIsTwilioVal, ok := smsIsTwilioAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_is_twilio expected to be basetypes.BoolValue, was: %T`, smsIsTwilioAttribute))
	}

	smsMessageFormatAttribute, ok := attributes["sms_message_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_message_format is missing from object`)

		return nil, diags
	}

	smsMessageFormatVal, ok := smsMessageFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_message_format expected to be basetypes.StringValue, was: %T`, smsMessageFormatAttribute))
	}

	smsNumberCancelAttribute, ok := attributes["sms_number_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_cancel is missing from object`)

		return nil, diags
	}

	smsNumberCancelVal, ok := smsNumberCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_cancel expected to be basetypes.StringValue, was: %T`, smsNumberCancelAttribute))
	}

	smsNumberErrorAttribute, ok := attributes["sms_number_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_error is missing from object`)

		return nil, diags
	}

	smsNumberErrorVal, ok := smsNumberErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_error expected to be basetypes.StringValue, was: %T`, smsNumberErrorAttribute))
	}

	smsNumberFieldLabelAttribute, ok := attributes["sms_number_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_field_label is missing from object`)

		return nil, diags
	}

	smsNumberFieldLabelVal, ok := smsNumberFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_field_label expected to be basetypes.StringValue, was: %T`, smsNumberFieldLabelAttribute))
	}

	smsNumberFormatAttribute, ok := attributes["sms_number_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_format is missing from object`)

		return nil, diags
	}

	smsNumberFormatVal, ok := smsNumberFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_format expected to be basetypes.StringValue, was: %T`, smsNumberFormatAttribute))
	}

	smsNumberMessageAttribute, ok := attributes["sms_number_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_message is missing from object`)

		return nil, diags
	}

	smsNumberMessageVal, ok := smsNumberMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_message expected to be basetypes.StringValue, was: %T`, smsNumberMessageAttribute))
	}

	smsNumberSubmitAttribute, ok := attributes["sms_number_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_submit is missing from object`)

		return nil, diags
	}

	smsNumberSubmitVal, ok := smsNumberSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_submit expected to be basetypes.StringValue, was: %T`, smsNumberSubmitAttribute))
	}

	smsNumberTitleAttribute, ok := attributes["sms_number_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_title is missing from object`)

		return nil, diags
	}

	smsNumberTitleVal, ok := smsNumberTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_title expected to be basetypes.StringValue, was: %T`, smsNumberTitleAttribute))
	}

	smsUsernameFormatAttribute, ok := attributes["sms_username_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_username_format is missing from object`)

		return nil, diags
	}

	smsUsernameFormatVal, ok := smsUsernameFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_username_format expected to be basetypes.StringValue, was: %T`, smsUsernameFormatAttribute))
	}

	smsValidityDurationAttribute, ok := attributes["sms_validity_duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_validity_duration is missing from object`)

		return nil, diags
	}

	smsValidityDurationVal, ok := smsValidityDurationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_validity_duration expected to be basetypes.Int64Value, was: %T`, smsValidityDurationAttribute))
	}

	sponsorBackLinkAttribute, ok := attributes["sponsor_back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_back_link is missing from object`)

		return nil, diags
	}

	sponsorBackLinkVal, ok := sponsorBackLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_back_link expected to be basetypes.StringValue, was: %T`, sponsorBackLinkAttribute))
	}

	sponsorCancelAttribute, ok := attributes["sponsor_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_cancel is missing from object`)

		return nil, diags
	}

	sponsorCancelVal, ok := sponsorCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_cancel expected to be basetypes.StringValue, was: %T`, sponsorCancelAttribute))
	}

	sponsorEmailAttribute, ok := attributes["sponsor_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email is missing from object`)

		return nil, diags
	}

	sponsorEmailVal, ok := sponsorEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email expected to be basetypes.StringValue, was: %T`, sponsorEmailAttribute))
	}

	sponsorEmailErrorAttribute, ok := attributes["sponsor_email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email_error is missing from object`)

		return nil, diags
	}

	sponsorEmailErrorVal, ok := sponsorEmailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email_error expected to be basetypes.StringValue, was: %T`, sponsorEmailErrorAttribute))
	}

	sponsorEmailTemplateAttribute, ok := attributes["sponsor_email_template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email_template is missing from object`)

		return nil, diags
	}

	sponsorEmailTemplateVal, ok := sponsorEmailTemplateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email_template expected to be basetypes.StringValue, was: %T`, sponsorEmailTemplateAttribute))
	}

	sponsorInfoApprovedAttribute, ok := attributes["sponsor_info_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_approved is missing from object`)

		return nil, diags
	}

	sponsorInfoApprovedVal, ok := sponsorInfoApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_approved expected to be basetypes.StringValue, was: %T`, sponsorInfoApprovedAttribute))
	}

	sponsorInfoDeniedAttribute, ok := attributes["sponsor_info_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_denied is missing from object`)

		return nil, diags
	}

	sponsorInfoDeniedVal, ok := sponsorInfoDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_denied expected to be basetypes.StringValue, was: %T`, sponsorInfoDeniedAttribute))
	}

	sponsorInfoPendingAttribute, ok := attributes["sponsor_info_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_pending is missing from object`)

		return nil, diags
	}

	sponsorInfoPendingVal, ok := sponsorInfoPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_pending expected to be basetypes.StringValue, was: %T`, sponsorInfoPendingAttribute))
	}

	sponsorNameAttribute, ok := attributes["sponsor_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name is missing from object`)

		return nil, diags
	}

	sponsorNameVal, ok := sponsorNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name expected to be basetypes.StringValue, was: %T`, sponsorNameAttribute))
	}

	sponsorNameErrorAttribute, ok := attributes["sponsor_name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name_error is missing from object`)

		return nil, diags
	}

	sponsorNameErrorVal, ok := sponsorNameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name_error expected to be basetypes.StringValue, was: %T`, sponsorNameErrorAttribute))
	}

	sponsorNotePendingAttribute, ok := attributes["sponsor_note_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_note_pending is missing from object`)

		return nil, diags
	}

	sponsorNotePendingVal, ok := sponsorNotePendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_note_pending expected to be basetypes.StringValue, was: %T`, sponsorNotePendingAttribute))
	}

	sponsorRequestAccessAttribute, ok := attributes["sponsor_request_access"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_request_access is missing from object`)

		return nil, diags
	}

	sponsorRequestAccessVal, ok := sponsorRequestAccessAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_request_access expected to be basetypes.StringValue, was: %T`, sponsorRequestAccessAttribute))
	}

	sponsorStatusApprovedAttribute, ok := attributes["sponsor_status_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_approved is missing from object`)

		return nil, diags
	}

	sponsorStatusApprovedVal, ok := sponsorStatusApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_approved expected to be basetypes.StringValue, was: %T`, sponsorStatusApprovedAttribute))
	}

	sponsorStatusDeniedAttribute, ok := attributes["sponsor_status_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_denied is missing from object`)

		return nil, diags
	}

	sponsorStatusDeniedVal, ok := sponsorStatusDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_denied expected to be basetypes.StringValue, was: %T`, sponsorStatusDeniedAttribute))
	}

	sponsorStatusPendingAttribute, ok := attributes["sponsor_status_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_pending is missing from object`)

		return nil, diags
	}

	sponsorStatusPendingVal, ok := sponsorStatusPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_pending expected to be basetypes.StringValue, was: %T`, sponsorStatusPendingAttribute))
	}

	sponsorSubmitAttribute, ok := attributes["sponsor_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_submit is missing from object`)

		return nil, diags
	}

	sponsorSubmitVal, ok := sponsorSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_submit expected to be basetypes.StringValue, was: %T`, sponsorSubmitAttribute))
	}

	sponsorsErrorAttribute, ok := attributes["sponsors_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_error is missing from object`)

		return nil, diags
	}

	sponsorsErrorVal, ok := sponsorsErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_error expected to be basetypes.StringValue, was: %T`, sponsorsErrorAttribute))
	}

	sponsorsFieldLabelAttribute, ok := attributes["sponsors_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_field_label is missing from object`)

		return nil, diags
	}

	sponsorsFieldLabelVal, ok := sponsorsFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_field_label expected to be basetypes.StringValue, was: %T`, sponsorsFieldLabelAttribute))
	}

	tosAttribute, ok := attributes["tos"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos is missing from object`)

		return nil, diags
	}

	tosVal, ok := tosAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos expected to be basetypes.BoolValue, was: %T`, tosAttribute))
	}

	tosAcceptLabelAttribute, ok := attributes["tos_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_accept_label is missing from object`)

		return nil, diags
	}

	tosAcceptLabelVal, ok := tosAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_accept_label expected to be basetypes.StringValue, was: %T`, tosAcceptLabelAttribute))
	}

	tosErrorAttribute, ok := attributes["tos_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_error is missing from object`)

		return nil, diags
	}

	tosErrorVal, ok := tosErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_error expected to be basetypes.StringValue, was: %T`, tosErrorAttribute))
	}

	tosLinkAttribute, ok := attributes["tos_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_link is missing from object`)

		return nil, diags
	}

	tosLinkVal, ok := tosLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_link expected to be basetypes.StringValue, was: %T`, tosLinkAttribute))
	}

	tosTextAttribute, ok := attributes["tos_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_text is missing from object`)

		return nil, diags
	}

	tosTextVal, ok := tosTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_text expected to be basetypes.StringValue, was: %T`, tosTextAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PortalTemplateValue{
		AccessCodeAlternateEmail: accessCodeAlternateEmailVal,
		Alignment:                alignmentVal,
		AuthButtonAmazon:         authButtonAmazonVal,
		AuthButtonAzure:          authButtonAzureVal,
		AuthButtonEmail:          authButtonEmailVal,
		AuthButtonFacebook:       authButtonFacebookVal,
		AuthButtonGoogle:         authButtonGoogleVal,
		AuthButtonMicrosoft:      authButtonMicrosoftVal,
		AuthButtonPassphrase:     authButtonPassphraseVal,
		AuthButtonSms:            authButtonSmsVal,
		AuthButtonSponsor:        authButtonSponsorVal,
		AuthLabel:                authLabelVal,
		BackLink:                 backLinkVal,
		Color:                    colorVal,
		ColorDark:                colorDarkVal,
		ColorLight:               colorLightVal,
		Company:                  companyVal,
		CompanyError:             companyErrorVal,
		CompanyLabel:             companyLabelVal,
		Email:                    emailVal,
		EmailAccessDomainError:   emailAccessDomainErrorVal,
		EmailCancel:              emailCancelVal,
		EmailCodeCancel:          emailCodeCancelVal,
		EmailCodeError:           emailCodeErrorVal,
		EmailCodeFieldLabel:      emailCodeFieldLabelVal,
		EmailCodeMessage:         emailCodeMessageVal,
		EmailCodeSubmit:          emailCodeSubmitVal,
		EmailCodeTitle:           emailCodeTitleVal,
		EmailError:               emailErrorVal,
		EmailFieldLabel:          emailFieldLabelVal,
		EmailLabel:               emailLabelVal,
		EmailMessage:             emailMessageVal,
		EmailSubmit:              emailSubmitVal,
		EmailTitle:               emailTitleVal,
		Field1:                   field1Val,
		Field1error:              field1errorVal,
		Field1label:              field1labelVal,
		Field1required:           field1requiredVal,
		Field2:                   field2Val,
		Field2error:              field2errorVal,
		Field2label:              field2labelVal,
		Field2required:           field2requiredVal,
		Field3:                   field3Val,
		Field3error:              field3errorVal,
		Field3label:              field3labelVal,
		Field3required:           field3requiredVal,
		Field4:                   field4Val,
		Field4error:              field4errorVal,
		Field4label:              field4labelVal,
		Field4required:           field4requiredVal,
		Locales:                  localesVal,
		Message:                  messageVal,
		MultiAuth:                multiAuthVal,
		Name:                     nameVal,
		NameError:                nameErrorVal,
		NameLabel:                nameLabelVal,
		OptOutDefault:            optOutDefaultVal,
		Optout:                   optoutVal,
		OptoutLabel:              optoutLabelVal,
		PageTitle:                pageTitleVal,
		PassphraseCancel:         passphraseCancelVal,
		PassphraseError:          passphraseErrorVal,
		PassphraseLabel:          passphraseLabelVal,
		PassphraseMessage:        passphraseMessageVal,
		PassphraseSubmit:         passphraseSubmitVal,
		PassphraseTitle:          passphraseTitleVal,
		PoweredBy:                poweredByVal,
		Privacy:                  privacyVal,
		PrivacyPolicyAcceptLabel: privacyPolicyAcceptLabelVal,
		PrivacyPolicyError:       privacyPolicyErrorVal,
		PrivacyPolicyLink:        privacyPolicyLinkVal,
		PrivacyPolicyText:        privacyPolicyTextVal,
		RequiredFieldLabel:       requiredFieldLabelVal,
		ResponsiveLayout:         responsiveLayoutVal,
		SignInLabel:              signInLabelVal,
		SmsCarrierDefault:        smsCarrierDefaultVal,
		SmsCarrierError:          smsCarrierErrorVal,
		SmsCarrierFieldLabel:     smsCarrierFieldLabelVal,
		SmsCodeCancel:            smsCodeCancelVal,
		SmsCodeError:             smsCodeErrorVal,
		SmsCodeFieldLabel:        smsCodeFieldLabelVal,
		SmsCodeMessage:           smsCodeMessageVal,
		SmsCodeSubmit:            smsCodeSubmitVal,
		SmsCodeTitle:             smsCodeTitleVal,
		SmsCountryFieldLabel:     smsCountryFieldLabelVal,
		SmsCountryFormat:         smsCountryFormatVal,
		SmsHaveAccessCode:        smsHaveAccessCodeVal,
		SmsIsTwilio:              smsIsTwilioVal,
		SmsMessageFormat:         smsMessageFormatVal,
		SmsNumberCancel:          smsNumberCancelVal,
		SmsNumberError:           smsNumberErrorVal,
		SmsNumberFieldLabel:      smsNumberFieldLabelVal,
		SmsNumberFormat:          smsNumberFormatVal,
		SmsNumberMessage:         smsNumberMessageVal,
		SmsNumberSubmit:          smsNumberSubmitVal,
		SmsNumberTitle:           smsNumberTitleVal,
		SmsUsernameFormat:        smsUsernameFormatVal,
		SmsValidityDuration:      smsValidityDurationVal,
		SponsorBackLink:          sponsorBackLinkVal,
		SponsorCancel:            sponsorCancelVal,
		SponsorEmail:             sponsorEmailVal,
		SponsorEmailError:        sponsorEmailErrorVal,
		SponsorEmailTemplate:     sponsorEmailTemplateVal,
		SponsorInfoApproved:      sponsorInfoApprovedVal,
		SponsorInfoDenied:        sponsorInfoDeniedVal,
		SponsorInfoPending:       sponsorInfoPendingVal,
		SponsorName:              sponsorNameVal,
		SponsorNameError:         sponsorNameErrorVal,
		SponsorNotePending:       sponsorNotePendingVal,
		SponsorRequestAccess:     sponsorRequestAccessVal,
		SponsorStatusApproved:    sponsorStatusApprovedVal,
		SponsorStatusDenied:      sponsorStatusDeniedVal,
		SponsorStatusPending:     sponsorStatusPendingVal,
		SponsorSubmit:            sponsorSubmitVal,
		SponsorsError:            sponsorsErrorVal,
		SponsorsFieldLabel:       sponsorsFieldLabelVal,
		Tos:                      tosVal,
		TosAcceptLabel:           tosAcceptLabelVal,
		TosError:                 tosErrorVal,
		TosLink:                  tosLinkVal,
		TosText:                  tosTextVal,
		state:                    attr.ValueStateKnown,
	}, diags
}

func NewPortalTemplateValueNull() PortalTemplateValue {
	return PortalTemplateValue{
		state: attr.ValueStateNull,
	}
}

func NewPortalTemplateValueUnknown() PortalTemplateValue {
	return PortalTemplateValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPortalTemplateValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PortalTemplateValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PortalTemplateValue Attribute Value",
				"While creating a PortalTemplateValue value, a missing attribute value was detected. "+
					"A PortalTemplateValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PortalTemplateValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PortalTemplateValue Attribute Type",
				"While creating a PortalTemplateValue value, an invalid attribute value was detected. "+
					"A PortalTemplateValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PortalTemplateValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PortalTemplateValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PortalTemplateValue Attribute Value",
				"While creating a PortalTemplateValue value, an extra attribute value was detected. "+
					"A PortalTemplateValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PortalTemplateValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPortalTemplateValueUnknown(), diags
	}

	accessCodeAlternateEmailAttribute, ok := attributes["access_code_alternate_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`access_code_alternate_email is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	accessCodeAlternateEmailVal, ok := accessCodeAlternateEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`access_code_alternate_email expected to be basetypes.StringValue, was: %T`, accessCodeAlternateEmailAttribute))
	}

	alignmentAttribute, ok := attributes["alignment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`alignment is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	alignmentVal, ok := alignmentAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`alignment expected to be basetypes.StringValue, was: %T`, alignmentAttribute))
	}

	authButtonAmazonAttribute, ok := attributes["auth_button_amazon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_amazon is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonAmazonVal, ok := authButtonAmazonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_amazon expected to be basetypes.StringValue, was: %T`, authButtonAmazonAttribute))
	}

	authButtonAzureAttribute, ok := attributes["auth_button_azure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_azure is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonAzureVal, ok := authButtonAzureAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_azure expected to be basetypes.StringValue, was: %T`, authButtonAzureAttribute))
	}

	authButtonEmailAttribute, ok := attributes["auth_button_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_email is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonEmailVal, ok := authButtonEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_email expected to be basetypes.StringValue, was: %T`, authButtonEmailAttribute))
	}

	authButtonFacebookAttribute, ok := attributes["auth_button_facebook"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_facebook is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonFacebookVal, ok := authButtonFacebookAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_facebook expected to be basetypes.StringValue, was: %T`, authButtonFacebookAttribute))
	}

	authButtonGoogleAttribute, ok := attributes["auth_button_google"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_google is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonGoogleVal, ok := authButtonGoogleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_google expected to be basetypes.StringValue, was: %T`, authButtonGoogleAttribute))
	}

	authButtonMicrosoftAttribute, ok := attributes["auth_button_microsoft"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_microsoft is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonMicrosoftVal, ok := authButtonMicrosoftAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_microsoft expected to be basetypes.StringValue, was: %T`, authButtonMicrosoftAttribute))
	}

	authButtonPassphraseAttribute, ok := attributes["auth_button_passphrase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_passphrase is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonPassphraseVal, ok := authButtonPassphraseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_passphrase expected to be basetypes.StringValue, was: %T`, authButtonPassphraseAttribute))
	}

	authButtonSmsAttribute, ok := attributes["auth_button_sms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sms is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonSmsVal, ok := authButtonSmsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sms expected to be basetypes.StringValue, was: %T`, authButtonSmsAttribute))
	}

	authButtonSponsorAttribute, ok := attributes["auth_button_sponsor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sponsor is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authButtonSponsorVal, ok := authButtonSponsorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sponsor expected to be basetypes.StringValue, was: %T`, authButtonSponsorAttribute))
	}

	authLabelAttribute, ok := attributes["auth_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	authLabelVal, ok := authLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_label expected to be basetypes.StringValue, was: %T`, authLabelAttribute))
	}

	backLinkAttribute, ok := attributes["back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`back_link is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	backLinkVal, ok := backLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`back_link expected to be basetypes.StringValue, was: %T`, backLinkAttribute))
	}

	colorAttribute, ok := attributes["color"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	colorVal, ok := colorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color expected to be basetypes.StringValue, was: %T`, colorAttribute))
	}

	colorDarkAttribute, ok := attributes["color_dark"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color_dark is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	colorDarkVal, ok := colorDarkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color_dark expected to be basetypes.StringValue, was: %T`, colorDarkAttribute))
	}

	colorLightAttribute, ok := attributes["color_light"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`color_light is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	colorLightVal, ok := colorLightAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`color_light expected to be basetypes.StringValue, was: %T`, colorLightAttribute))
	}

	companyAttribute, ok := attributes["company"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	companyVal, ok := companyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company expected to be basetypes.BoolValue, was: %T`, companyAttribute))
	}

	companyErrorAttribute, ok := attributes["company_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	companyErrorVal, ok := companyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_error expected to be basetypes.StringValue, was: %T`, companyErrorAttribute))
	}

	companyLabelAttribute, ok := attributes["company_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	companyLabelVal, ok := companyLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_label expected to be basetypes.StringValue, was: %T`, companyLabelAttribute))
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailVal, ok := emailAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.BoolValue, was: %T`, emailAttribute))
	}

	emailAccessDomainErrorAttribute, ok := attributes["email_access_domain_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_access_domain_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailAccessDomainErrorVal, ok := emailAccessDomainErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_access_domain_error expected to be basetypes.StringValue, was: %T`, emailAccessDomainErrorAttribute))
	}

	emailCancelAttribute, ok := attributes["email_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_cancel is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailCancelVal, ok := emailCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_cancel expected to be basetypes.StringValue, was: %T`, emailCancelAttribute))
	}

	emailCodeCancelAttribute, ok := attributes["email_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_cancel is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailCodeCancelVal, ok := emailCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_cancel expected to be basetypes.StringValue, was: %T`, emailCodeCancelAttribute))
	}

	emailCodeErrorAttribute, ok := attributes["email_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailCodeErrorVal, ok := emailCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_error expected to be basetypes.StringValue, was: %T`, emailCodeErrorAttribute))
	}

	emailCodeFieldLabelAttribute, ok := attributes["email_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailCodeFieldLabelVal, ok := emailCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_field_label expected to be basetypes.StringValue, was: %T`, emailCodeFieldLabelAttribute))
	}

	emailCodeMessageAttribute, ok := attributes["email_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_message is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailCodeMessageVal, ok := emailCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_message expected to be basetypes.StringValue, was: %T`, emailCodeMessageAttribute))
	}

	emailCodeSubmitAttribute, ok := attributes["email_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_submit is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailCodeSubmitVal, ok := emailCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_submit expected to be basetypes.StringValue, was: %T`, emailCodeSubmitAttribute))
	}

	emailCodeTitleAttribute, ok := attributes["email_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_title is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailCodeTitleVal, ok := emailCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_title expected to be basetypes.StringValue, was: %T`, emailCodeTitleAttribute))
	}

	emailErrorAttribute, ok := attributes["email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailErrorVal, ok := emailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_error expected to be basetypes.StringValue, was: %T`, emailErrorAttribute))
	}

	emailFieldLabelAttribute, ok := attributes["email_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailFieldLabelVal, ok := emailFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_field_label expected to be basetypes.StringValue, was: %T`, emailFieldLabelAttribute))
	}

	emailLabelAttribute, ok := attributes["email_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailLabelVal, ok := emailLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_label expected to be basetypes.StringValue, was: %T`, emailLabelAttribute))
	}

	emailMessageAttribute, ok := attributes["email_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_message is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailMessageVal, ok := emailMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_message expected to be basetypes.StringValue, was: %T`, emailMessageAttribute))
	}

	emailSubmitAttribute, ok := attributes["email_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_submit is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailSubmitVal, ok := emailSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_submit expected to be basetypes.StringValue, was: %T`, emailSubmitAttribute))
	}

	emailTitleAttribute, ok := attributes["email_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_title is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	emailTitleVal, ok := emailTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_title expected to be basetypes.StringValue, was: %T`, emailTitleAttribute))
	}

	field1Attribute, ok := attributes["field1"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1 is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field1Val, ok := field1Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1 expected to be basetypes.BoolValue, was: %T`, field1Attribute))
	}

	field1errorAttribute, ok := attributes["field1error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field1errorVal, ok := field1errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1error expected to be basetypes.StringValue, was: %T`, field1errorAttribute))
	}

	field1labelAttribute, ok := attributes["field1label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field1labelVal, ok := field1labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1label expected to be basetypes.StringValue, was: %T`, field1labelAttribute))
	}

	field1requiredAttribute, ok := attributes["field1required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1required is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field1requiredVal, ok := field1requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1required expected to be basetypes.BoolValue, was: %T`, field1requiredAttribute))
	}

	field2Attribute, ok := attributes["field2"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2 is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field2Val, ok := field2Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2 expected to be basetypes.BoolValue, was: %T`, field2Attribute))
	}

	field2errorAttribute, ok := attributes["field2error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field2errorVal, ok := field2errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2error expected to be basetypes.StringValue, was: %T`, field2errorAttribute))
	}

	field2labelAttribute, ok := attributes["field2label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field2labelVal, ok := field2labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2label expected to be basetypes.StringValue, was: %T`, field2labelAttribute))
	}

	field2requiredAttribute, ok := attributes["field2required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2required is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field2requiredVal, ok := field2requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2required expected to be basetypes.BoolValue, was: %T`, field2requiredAttribute))
	}

	field3Attribute, ok := attributes["field3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3 is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field3Val, ok := field3Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3 expected to be basetypes.BoolValue, was: %T`, field3Attribute))
	}

	field3errorAttribute, ok := attributes["field3error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field3errorVal, ok := field3errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3error expected to be basetypes.StringValue, was: %T`, field3errorAttribute))
	}

	field3labelAttribute, ok := attributes["field3label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field3labelVal, ok := field3labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3label expected to be basetypes.StringValue, was: %T`, field3labelAttribute))
	}

	field3requiredAttribute, ok := attributes["field3required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3required is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field3requiredVal, ok := field3requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3required expected to be basetypes.BoolValue, was: %T`, field3requiredAttribute))
	}

	field4Attribute, ok := attributes["field4"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4 is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field4Val, ok := field4Attribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4 expected to be basetypes.BoolValue, was: %T`, field4Attribute))
	}

	field4errorAttribute, ok := attributes["field4error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field4errorVal, ok := field4errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4error expected to be basetypes.StringValue, was: %T`, field4errorAttribute))
	}

	field4labelAttribute, ok := attributes["field4label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field4labelVal, ok := field4labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4label expected to be basetypes.StringValue, was: %T`, field4labelAttribute))
	}

	field4requiredAttribute, ok := attributes["field4required"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4required is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	field4requiredVal, ok := field4requiredAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4required expected to be basetypes.BoolValue, was: %T`, field4requiredAttribute))
	}

	localesAttribute, ok := attributes["locales"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`locales is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	localesVal, ok := localesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`locales expected to be basetypes.MapValue, was: %T`, localesAttribute))
	}

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	multiAuthAttribute, ok := attributes["multi_auth"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`multi_auth is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	multiAuthVal, ok := multiAuthAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`multi_auth expected to be basetypes.BoolValue, was: %T`, multiAuthAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.BoolValue, was: %T`, nameAttribute))
	}

	nameErrorAttribute, ok := attributes["name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	nameErrorVal, ok := nameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_error expected to be basetypes.StringValue, was: %T`, nameErrorAttribute))
	}

	nameLabelAttribute, ok := attributes["name_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	nameLabelVal, ok := nameLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_label expected to be basetypes.StringValue, was: %T`, nameLabelAttribute))
	}

	optOutDefaultAttribute, ok := attributes["opt_out_default"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`opt_out_default is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	optOutDefaultVal, ok := optOutDefaultAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`opt_out_default expected to be basetypes.BoolValue, was: %T`, optOutDefaultAttribute))
	}

	optoutAttribute, ok := attributes["optout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optout is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	optoutVal, ok := optoutAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optout expected to be basetypes.BoolValue, was: %T`, optoutAttribute))
	}

	optoutLabelAttribute, ok := attributes["optout_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optout_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	optoutLabelVal, ok := optoutLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optout_label expected to be basetypes.StringValue, was: %T`, optoutLabelAttribute))
	}

	pageTitleAttribute, ok := attributes["page_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`page_title is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	pageTitleVal, ok := pageTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`page_title expected to be basetypes.StringValue, was: %T`, pageTitleAttribute))
	}

	passphraseCancelAttribute, ok := attributes["passphrase_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_cancel is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	passphraseCancelVal, ok := passphraseCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_cancel expected to be basetypes.StringValue, was: %T`, passphraseCancelAttribute))
	}

	passphraseErrorAttribute, ok := attributes["passphrase_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	passphraseErrorVal, ok := passphraseErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_error expected to be basetypes.StringValue, was: %T`, passphraseErrorAttribute))
	}

	passphraseLabelAttribute, ok := attributes["passphrase_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	passphraseLabelVal, ok := passphraseLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_label expected to be basetypes.StringValue, was: %T`, passphraseLabelAttribute))
	}

	passphraseMessageAttribute, ok := attributes["passphrase_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_message is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	passphraseMessageVal, ok := passphraseMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_message expected to be basetypes.StringValue, was: %T`, passphraseMessageAttribute))
	}

	passphraseSubmitAttribute, ok := attributes["passphrase_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_submit is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	passphraseSubmitVal, ok := passphraseSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_submit expected to be basetypes.StringValue, was: %T`, passphraseSubmitAttribute))
	}

	passphraseTitleAttribute, ok := attributes["passphrase_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_title is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	passphraseTitleVal, ok := passphraseTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_title expected to be basetypes.StringValue, was: %T`, passphraseTitleAttribute))
	}

	poweredByAttribute, ok := attributes["powered_by"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`powered_by is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	poweredByVal, ok := poweredByAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`powered_by expected to be basetypes.BoolValue, was: %T`, poweredByAttribute))
	}

	privacyAttribute, ok := attributes["privacy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	privacyVal, ok := privacyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy expected to be basetypes.BoolValue, was: %T`, privacyAttribute))
	}

	privacyPolicyAcceptLabelAttribute, ok := attributes["privacy_policy_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_accept_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	privacyPolicyAcceptLabelVal, ok := privacyPolicyAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_accept_label expected to be basetypes.StringValue, was: %T`, privacyPolicyAcceptLabelAttribute))
	}

	privacyPolicyErrorAttribute, ok := attributes["privacy_policy_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	privacyPolicyErrorVal, ok := privacyPolicyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_error expected to be basetypes.StringValue, was: %T`, privacyPolicyErrorAttribute))
	}

	privacyPolicyLinkAttribute, ok := attributes["privacy_policy_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_link is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	privacyPolicyLinkVal, ok := privacyPolicyLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_link expected to be basetypes.StringValue, was: %T`, privacyPolicyLinkAttribute))
	}

	privacyPolicyTextAttribute, ok := attributes["privacy_policy_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_text is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	privacyPolicyTextVal, ok := privacyPolicyTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_text expected to be basetypes.StringValue, was: %T`, privacyPolicyTextAttribute))
	}

	requiredFieldLabelAttribute, ok := attributes["required_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`required_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	requiredFieldLabelVal, ok := requiredFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`required_field_label expected to be basetypes.StringValue, was: %T`, requiredFieldLabelAttribute))
	}

	responsiveLayoutAttribute, ok := attributes["responsive_layout"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`responsive_layout is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	responsiveLayoutVal, ok := responsiveLayoutAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`responsive_layout expected to be basetypes.BoolValue, was: %T`, responsiveLayoutAttribute))
	}

	signInLabelAttribute, ok := attributes["sign_in_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sign_in_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	signInLabelVal, ok := signInLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sign_in_label expected to be basetypes.StringValue, was: %T`, signInLabelAttribute))
	}

	smsCarrierDefaultAttribute, ok := attributes["sms_carrier_default"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_default is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCarrierDefaultVal, ok := smsCarrierDefaultAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_default expected to be basetypes.StringValue, was: %T`, smsCarrierDefaultAttribute))
	}

	smsCarrierErrorAttribute, ok := attributes["sms_carrier_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCarrierErrorVal, ok := smsCarrierErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_error expected to be basetypes.StringValue, was: %T`, smsCarrierErrorAttribute))
	}

	smsCarrierFieldLabelAttribute, ok := attributes["sms_carrier_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCarrierFieldLabelVal, ok := smsCarrierFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_field_label expected to be basetypes.StringValue, was: %T`, smsCarrierFieldLabelAttribute))
	}

	smsCodeCancelAttribute, ok := attributes["sms_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_cancel is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCodeCancelVal, ok := smsCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_cancel expected to be basetypes.StringValue, was: %T`, smsCodeCancelAttribute))
	}

	smsCodeErrorAttribute, ok := attributes["sms_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCodeErrorVal, ok := smsCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_error expected to be basetypes.StringValue, was: %T`, smsCodeErrorAttribute))
	}

	smsCodeFieldLabelAttribute, ok := attributes["sms_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCodeFieldLabelVal, ok := smsCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_field_label expected to be basetypes.StringValue, was: %T`, smsCodeFieldLabelAttribute))
	}

	smsCodeMessageAttribute, ok := attributes["sms_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_message is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCodeMessageVal, ok := smsCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_message expected to be basetypes.StringValue, was: %T`, smsCodeMessageAttribute))
	}

	smsCodeSubmitAttribute, ok := attributes["sms_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_submit is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCodeSubmitVal, ok := smsCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_submit expected to be basetypes.StringValue, was: %T`, smsCodeSubmitAttribute))
	}

	smsCodeTitleAttribute, ok := attributes["sms_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_title is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCodeTitleVal, ok := smsCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_title expected to be basetypes.StringValue, was: %T`, smsCodeTitleAttribute))
	}

	smsCountryFieldLabelAttribute, ok := attributes["sms_country_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCountryFieldLabelVal, ok := smsCountryFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_field_label expected to be basetypes.StringValue, was: %T`, smsCountryFieldLabelAttribute))
	}

	smsCountryFormatAttribute, ok := attributes["sms_country_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_format is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsCountryFormatVal, ok := smsCountryFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_format expected to be basetypes.StringValue, was: %T`, smsCountryFormatAttribute))
	}

	smsHaveAccessCodeAttribute, ok := attributes["sms_have_access_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_have_access_code is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsHaveAccessCodeVal, ok := smsHaveAccessCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_have_access_code expected to be basetypes.StringValue, was: %T`, smsHaveAccessCodeAttribute))
	}

	smsIsTwilioAttribute, ok := attributes["sms_is_twilio"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_is_twilio is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsIsTwilioVal, ok := smsIsTwilioAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_is_twilio expected to be basetypes.BoolValue, was: %T`, smsIsTwilioAttribute))
	}

	smsMessageFormatAttribute, ok := attributes["sms_message_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_message_format is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsMessageFormatVal, ok := smsMessageFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_message_format expected to be basetypes.StringValue, was: %T`, smsMessageFormatAttribute))
	}

	smsNumberCancelAttribute, ok := attributes["sms_number_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_cancel is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsNumberCancelVal, ok := smsNumberCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_cancel expected to be basetypes.StringValue, was: %T`, smsNumberCancelAttribute))
	}

	smsNumberErrorAttribute, ok := attributes["sms_number_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsNumberErrorVal, ok := smsNumberErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_error expected to be basetypes.StringValue, was: %T`, smsNumberErrorAttribute))
	}

	smsNumberFieldLabelAttribute, ok := attributes["sms_number_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsNumberFieldLabelVal, ok := smsNumberFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_field_label expected to be basetypes.StringValue, was: %T`, smsNumberFieldLabelAttribute))
	}

	smsNumberFormatAttribute, ok := attributes["sms_number_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_format is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsNumberFormatVal, ok := smsNumberFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_format expected to be basetypes.StringValue, was: %T`, smsNumberFormatAttribute))
	}

	smsNumberMessageAttribute, ok := attributes["sms_number_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_message is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsNumberMessageVal, ok := smsNumberMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_message expected to be basetypes.StringValue, was: %T`, smsNumberMessageAttribute))
	}

	smsNumberSubmitAttribute, ok := attributes["sms_number_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_submit is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsNumberSubmitVal, ok := smsNumberSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_submit expected to be basetypes.StringValue, was: %T`, smsNumberSubmitAttribute))
	}

	smsNumberTitleAttribute, ok := attributes["sms_number_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_title is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsNumberTitleVal, ok := smsNumberTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_title expected to be basetypes.StringValue, was: %T`, smsNumberTitleAttribute))
	}

	smsUsernameFormatAttribute, ok := attributes["sms_username_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_username_format is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsUsernameFormatVal, ok := smsUsernameFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_username_format expected to be basetypes.StringValue, was: %T`, smsUsernameFormatAttribute))
	}

	smsValidityDurationAttribute, ok := attributes["sms_validity_duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_validity_duration is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	smsValidityDurationVal, ok := smsValidityDurationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_validity_duration expected to be basetypes.Int64Value, was: %T`, smsValidityDurationAttribute))
	}

	sponsorBackLinkAttribute, ok := attributes["sponsor_back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_back_link is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorBackLinkVal, ok := sponsorBackLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_back_link expected to be basetypes.StringValue, was: %T`, sponsorBackLinkAttribute))
	}

	sponsorCancelAttribute, ok := attributes["sponsor_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_cancel is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorCancelVal, ok := sponsorCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_cancel expected to be basetypes.StringValue, was: %T`, sponsorCancelAttribute))
	}

	sponsorEmailAttribute, ok := attributes["sponsor_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorEmailVal, ok := sponsorEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email expected to be basetypes.StringValue, was: %T`, sponsorEmailAttribute))
	}

	sponsorEmailErrorAttribute, ok := attributes["sponsor_email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorEmailErrorVal, ok := sponsorEmailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email_error expected to be basetypes.StringValue, was: %T`, sponsorEmailErrorAttribute))
	}

	sponsorEmailTemplateAttribute, ok := attributes["sponsor_email_template"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email_template is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorEmailTemplateVal, ok := sponsorEmailTemplateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email_template expected to be basetypes.StringValue, was: %T`, sponsorEmailTemplateAttribute))
	}

	sponsorInfoApprovedAttribute, ok := attributes["sponsor_info_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_approved is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorInfoApprovedVal, ok := sponsorInfoApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_approved expected to be basetypes.StringValue, was: %T`, sponsorInfoApprovedAttribute))
	}

	sponsorInfoDeniedAttribute, ok := attributes["sponsor_info_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_denied is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorInfoDeniedVal, ok := sponsorInfoDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_denied expected to be basetypes.StringValue, was: %T`, sponsorInfoDeniedAttribute))
	}

	sponsorInfoPendingAttribute, ok := attributes["sponsor_info_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_pending is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorInfoPendingVal, ok := sponsorInfoPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_pending expected to be basetypes.StringValue, was: %T`, sponsorInfoPendingAttribute))
	}

	sponsorNameAttribute, ok := attributes["sponsor_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorNameVal, ok := sponsorNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name expected to be basetypes.StringValue, was: %T`, sponsorNameAttribute))
	}

	sponsorNameErrorAttribute, ok := attributes["sponsor_name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorNameErrorVal, ok := sponsorNameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name_error expected to be basetypes.StringValue, was: %T`, sponsorNameErrorAttribute))
	}

	sponsorNotePendingAttribute, ok := attributes["sponsor_note_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_note_pending is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorNotePendingVal, ok := sponsorNotePendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_note_pending expected to be basetypes.StringValue, was: %T`, sponsorNotePendingAttribute))
	}

	sponsorRequestAccessAttribute, ok := attributes["sponsor_request_access"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_request_access is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorRequestAccessVal, ok := sponsorRequestAccessAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_request_access expected to be basetypes.StringValue, was: %T`, sponsorRequestAccessAttribute))
	}

	sponsorStatusApprovedAttribute, ok := attributes["sponsor_status_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_approved is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorStatusApprovedVal, ok := sponsorStatusApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_approved expected to be basetypes.StringValue, was: %T`, sponsorStatusApprovedAttribute))
	}

	sponsorStatusDeniedAttribute, ok := attributes["sponsor_status_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_denied is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorStatusDeniedVal, ok := sponsorStatusDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_denied expected to be basetypes.StringValue, was: %T`, sponsorStatusDeniedAttribute))
	}

	sponsorStatusPendingAttribute, ok := attributes["sponsor_status_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_pending is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorStatusPendingVal, ok := sponsorStatusPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_pending expected to be basetypes.StringValue, was: %T`, sponsorStatusPendingAttribute))
	}

	sponsorSubmitAttribute, ok := attributes["sponsor_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_submit is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorSubmitVal, ok := sponsorSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_submit expected to be basetypes.StringValue, was: %T`, sponsorSubmitAttribute))
	}

	sponsorsErrorAttribute, ok := attributes["sponsors_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorsErrorVal, ok := sponsorsErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_error expected to be basetypes.StringValue, was: %T`, sponsorsErrorAttribute))
	}

	sponsorsFieldLabelAttribute, ok := attributes["sponsors_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_field_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	sponsorsFieldLabelVal, ok := sponsorsFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_field_label expected to be basetypes.StringValue, was: %T`, sponsorsFieldLabelAttribute))
	}

	tosAttribute, ok := attributes["tos"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	tosVal, ok := tosAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos expected to be basetypes.BoolValue, was: %T`, tosAttribute))
	}

	tosAcceptLabelAttribute, ok := attributes["tos_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_accept_label is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	tosAcceptLabelVal, ok := tosAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_accept_label expected to be basetypes.StringValue, was: %T`, tosAcceptLabelAttribute))
	}

	tosErrorAttribute, ok := attributes["tos_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_error is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	tosErrorVal, ok := tosErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_error expected to be basetypes.StringValue, was: %T`, tosErrorAttribute))
	}

	tosLinkAttribute, ok := attributes["tos_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_link is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	tosLinkVal, ok := tosLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_link expected to be basetypes.StringValue, was: %T`, tosLinkAttribute))
	}

	tosTextAttribute, ok := attributes["tos_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_text is missing from object`)

		return NewPortalTemplateValueUnknown(), diags
	}

	tosTextVal, ok := tosTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_text expected to be basetypes.StringValue, was: %T`, tosTextAttribute))
	}

	if diags.HasError() {
		return NewPortalTemplateValueUnknown(), diags
	}

	return PortalTemplateValue{
		AccessCodeAlternateEmail: accessCodeAlternateEmailVal,
		Alignment:                alignmentVal,
		AuthButtonAmazon:         authButtonAmazonVal,
		AuthButtonAzure:          authButtonAzureVal,
		AuthButtonEmail:          authButtonEmailVal,
		AuthButtonFacebook:       authButtonFacebookVal,
		AuthButtonGoogle:         authButtonGoogleVal,
		AuthButtonMicrosoft:      authButtonMicrosoftVal,
		AuthButtonPassphrase:     authButtonPassphraseVal,
		AuthButtonSms:            authButtonSmsVal,
		AuthButtonSponsor:        authButtonSponsorVal,
		AuthLabel:                authLabelVal,
		BackLink:                 backLinkVal,
		Color:                    colorVal,
		ColorDark:                colorDarkVal,
		ColorLight:               colorLightVal,
		Company:                  companyVal,
		CompanyError:             companyErrorVal,
		CompanyLabel:             companyLabelVal,
		Email:                    emailVal,
		EmailAccessDomainError:   emailAccessDomainErrorVal,
		EmailCancel:              emailCancelVal,
		EmailCodeCancel:          emailCodeCancelVal,
		EmailCodeError:           emailCodeErrorVal,
		EmailCodeFieldLabel:      emailCodeFieldLabelVal,
		EmailCodeMessage:         emailCodeMessageVal,
		EmailCodeSubmit:          emailCodeSubmitVal,
		EmailCodeTitle:           emailCodeTitleVal,
		EmailError:               emailErrorVal,
		EmailFieldLabel:          emailFieldLabelVal,
		EmailLabel:               emailLabelVal,
		EmailMessage:             emailMessageVal,
		EmailSubmit:              emailSubmitVal,
		EmailTitle:               emailTitleVal,
		Field1:                   field1Val,
		Field1error:              field1errorVal,
		Field1label:              field1labelVal,
		Field1required:           field1requiredVal,
		Field2:                   field2Val,
		Field2error:              field2errorVal,
		Field2label:              field2labelVal,
		Field2required:           field2requiredVal,
		Field3:                   field3Val,
		Field3error:              field3errorVal,
		Field3label:              field3labelVal,
		Field3required:           field3requiredVal,
		Field4:                   field4Val,
		Field4error:              field4errorVal,
		Field4label:              field4labelVal,
		Field4required:           field4requiredVal,
		Locales:                  localesVal,
		Message:                  messageVal,
		MultiAuth:                multiAuthVal,
		Name:                     nameVal,
		NameError:                nameErrorVal,
		NameLabel:                nameLabelVal,
		OptOutDefault:            optOutDefaultVal,
		Optout:                   optoutVal,
		OptoutLabel:              optoutLabelVal,
		PageTitle:                pageTitleVal,
		PassphraseCancel:         passphraseCancelVal,
		PassphraseError:          passphraseErrorVal,
		PassphraseLabel:          passphraseLabelVal,
		PassphraseMessage:        passphraseMessageVal,
		PassphraseSubmit:         passphraseSubmitVal,
		PassphraseTitle:          passphraseTitleVal,
		PoweredBy:                poweredByVal,
		Privacy:                  privacyVal,
		PrivacyPolicyAcceptLabel: privacyPolicyAcceptLabelVal,
		PrivacyPolicyError:       privacyPolicyErrorVal,
		PrivacyPolicyLink:        privacyPolicyLinkVal,
		PrivacyPolicyText:        privacyPolicyTextVal,
		RequiredFieldLabel:       requiredFieldLabelVal,
		ResponsiveLayout:         responsiveLayoutVal,
		SignInLabel:              signInLabelVal,
		SmsCarrierDefault:        smsCarrierDefaultVal,
		SmsCarrierError:          smsCarrierErrorVal,
		SmsCarrierFieldLabel:     smsCarrierFieldLabelVal,
		SmsCodeCancel:            smsCodeCancelVal,
		SmsCodeError:             smsCodeErrorVal,
		SmsCodeFieldLabel:        smsCodeFieldLabelVal,
		SmsCodeMessage:           smsCodeMessageVal,
		SmsCodeSubmit:            smsCodeSubmitVal,
		SmsCodeTitle:             smsCodeTitleVal,
		SmsCountryFieldLabel:     smsCountryFieldLabelVal,
		SmsCountryFormat:         smsCountryFormatVal,
		SmsHaveAccessCode:        smsHaveAccessCodeVal,
		SmsIsTwilio:              smsIsTwilioVal,
		SmsMessageFormat:         smsMessageFormatVal,
		SmsNumberCancel:          smsNumberCancelVal,
		SmsNumberError:           smsNumberErrorVal,
		SmsNumberFieldLabel:      smsNumberFieldLabelVal,
		SmsNumberFormat:          smsNumberFormatVal,
		SmsNumberMessage:         smsNumberMessageVal,
		SmsNumberSubmit:          smsNumberSubmitVal,
		SmsNumberTitle:           smsNumberTitleVal,
		SmsUsernameFormat:        smsUsernameFormatVal,
		SmsValidityDuration:      smsValidityDurationVal,
		SponsorBackLink:          sponsorBackLinkVal,
		SponsorCancel:            sponsorCancelVal,
		SponsorEmail:             sponsorEmailVal,
		SponsorEmailError:        sponsorEmailErrorVal,
		SponsorEmailTemplate:     sponsorEmailTemplateVal,
		SponsorInfoApproved:      sponsorInfoApprovedVal,
		SponsorInfoDenied:        sponsorInfoDeniedVal,
		SponsorInfoPending:       sponsorInfoPendingVal,
		SponsorName:              sponsorNameVal,
		SponsorNameError:         sponsorNameErrorVal,
		SponsorNotePending:       sponsorNotePendingVal,
		SponsorRequestAccess:     sponsorRequestAccessVal,
		SponsorStatusApproved:    sponsorStatusApprovedVal,
		SponsorStatusDenied:      sponsorStatusDeniedVal,
		SponsorStatusPending:     sponsorStatusPendingVal,
		SponsorSubmit:            sponsorSubmitVal,
		SponsorsError:            sponsorsErrorVal,
		SponsorsFieldLabel:       sponsorsFieldLabelVal,
		Tos:                      tosVal,
		TosAcceptLabel:           tosAcceptLabelVal,
		TosError:                 tosErrorVal,
		TosLink:                  tosLinkVal,
		TosText:                  tosTextVal,
		state:                    attr.ValueStateKnown,
	}, diags
}

func NewPortalTemplateValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PortalTemplateValue {
	object, diags := NewPortalTemplateValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPortalTemplateValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PortalTemplateType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPortalTemplateValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPortalTemplateValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPortalTemplateValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPortalTemplateValueMust(PortalTemplateValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PortalTemplateType) ValueType(ctx context.Context) attr.Value {
	return PortalTemplateValue{}
}

var _ basetypes.ObjectValuable = PortalTemplateValue{}

type PortalTemplateValue struct {
	AccessCodeAlternateEmail basetypes.StringValue `tfsdk:"access_code_alternate_email"`
	Alignment                basetypes.StringValue `tfsdk:"alignment"`
	AuthButtonAmazon         basetypes.StringValue `tfsdk:"auth_button_amazon"`
	AuthButtonAzure          basetypes.StringValue `tfsdk:"auth_button_azure"`
	AuthButtonEmail          basetypes.StringValue `tfsdk:"auth_button_email"`
	AuthButtonFacebook       basetypes.StringValue `tfsdk:"auth_button_facebook"`
	AuthButtonGoogle         basetypes.StringValue `tfsdk:"auth_button_google"`
	AuthButtonMicrosoft      basetypes.StringValue `tfsdk:"auth_button_microsoft"`
	AuthButtonPassphrase     basetypes.StringValue `tfsdk:"auth_button_passphrase"`
	AuthButtonSms            basetypes.StringValue `tfsdk:"auth_button_sms"`
	AuthButtonSponsor        basetypes.StringValue `tfsdk:"auth_button_sponsor"`
	AuthLabel                basetypes.StringValue `tfsdk:"auth_label"`
	BackLink                 basetypes.StringValue `tfsdk:"back_link"`
	Color                    basetypes.StringValue `tfsdk:"color"`
	ColorDark                basetypes.StringValue `tfsdk:"color_dark"`
	ColorLight               basetypes.StringValue `tfsdk:"color_light"`
	Company                  basetypes.BoolValue   `tfsdk:"company"`
	CompanyError             basetypes.StringValue `tfsdk:"company_error"`
	CompanyLabel             basetypes.StringValue `tfsdk:"company_label"`
	Email                    basetypes.BoolValue   `tfsdk:"email"`
	EmailAccessDomainError   basetypes.StringValue `tfsdk:"email_access_domain_error"`
	EmailCancel              basetypes.StringValue `tfsdk:"email_cancel"`
	EmailCodeCancel          basetypes.StringValue `tfsdk:"email_code_cancel"`
	EmailCodeError           basetypes.StringValue `tfsdk:"email_code_error"`
	EmailCodeFieldLabel      basetypes.StringValue `tfsdk:"email_code_field_label"`
	EmailCodeMessage         basetypes.StringValue `tfsdk:"email_code_message"`
	EmailCodeSubmit          basetypes.StringValue `tfsdk:"email_code_submit"`
	EmailCodeTitle           basetypes.StringValue `tfsdk:"email_code_title"`
	EmailError               basetypes.StringValue `tfsdk:"email_error"`
	EmailFieldLabel          basetypes.StringValue `tfsdk:"email_field_label"`
	EmailLabel               basetypes.StringValue `tfsdk:"email_label"`
	EmailMessage             basetypes.StringValue `tfsdk:"email_message"`
	EmailSubmit              basetypes.StringValue `tfsdk:"email_submit"`
	EmailTitle               basetypes.StringValue `tfsdk:"email_title"`
	Field1                   basetypes.BoolValue   `tfsdk:"field1"`
	Field1error              basetypes.StringValue `tfsdk:"field1error"`
	Field1label              basetypes.StringValue `tfsdk:"field1label"`
	Field1required           basetypes.BoolValue   `tfsdk:"field1required"`
	Field2                   basetypes.BoolValue   `tfsdk:"field2"`
	Field2error              basetypes.StringValue `tfsdk:"field2error"`
	Field2label              basetypes.StringValue `tfsdk:"field2label"`
	Field2required           basetypes.BoolValue   `tfsdk:"field2required"`
	Field3                   basetypes.BoolValue   `tfsdk:"field3"`
	Field3error              basetypes.StringValue `tfsdk:"field3error"`
	Field3label              basetypes.StringValue `tfsdk:"field3label"`
	Field3required           basetypes.BoolValue   `tfsdk:"field3required"`
	Field4                   basetypes.BoolValue   `tfsdk:"field4"`
	Field4error              basetypes.StringValue `tfsdk:"field4error"`
	Field4label              basetypes.StringValue `tfsdk:"field4label"`
	Field4required           basetypes.BoolValue   `tfsdk:"field4required"`
	Locales                  basetypes.MapValue    `tfsdk:"locales"`
	Message                  basetypes.StringValue `tfsdk:"message"`
	MultiAuth                basetypes.BoolValue   `tfsdk:"multi_auth"`
	Name                     basetypes.BoolValue   `tfsdk:"name"`
	NameError                basetypes.StringValue `tfsdk:"name_error"`
	NameLabel                basetypes.StringValue `tfsdk:"name_label"`
	OptOutDefault            basetypes.BoolValue   `tfsdk:"opt_out_default"`
	Optout                   basetypes.BoolValue   `tfsdk:"optout"`
	OptoutLabel              basetypes.StringValue `tfsdk:"optout_label"`
	PageTitle                basetypes.StringValue `tfsdk:"page_title"`
	PassphraseCancel         basetypes.StringValue `tfsdk:"passphrase_cancel"`
	PassphraseError          basetypes.StringValue `tfsdk:"passphrase_error"`
	PassphraseLabel          basetypes.StringValue `tfsdk:"passphrase_label"`
	PassphraseMessage        basetypes.StringValue `tfsdk:"passphrase_message"`
	PassphraseSubmit         basetypes.StringValue `tfsdk:"passphrase_submit"`
	PassphraseTitle          basetypes.StringValue `tfsdk:"passphrase_title"`
	PoweredBy                basetypes.BoolValue   `tfsdk:"powered_by"`
	Privacy                  basetypes.BoolValue   `tfsdk:"privacy"`
	PrivacyPolicyAcceptLabel basetypes.StringValue `tfsdk:"privacy_policy_accept_label"`
	PrivacyPolicyError       basetypes.StringValue `tfsdk:"privacy_policy_error"`
	PrivacyPolicyLink        basetypes.StringValue `tfsdk:"privacy_policy_link"`
	PrivacyPolicyText        basetypes.StringValue `tfsdk:"privacy_policy_text"`
	RequiredFieldLabel       basetypes.StringValue `tfsdk:"required_field_label"`
	ResponsiveLayout         basetypes.BoolValue   `tfsdk:"responsive_layout"`
	SignInLabel              basetypes.StringValue `tfsdk:"sign_in_label"`
	SmsCarrierDefault        basetypes.StringValue `tfsdk:"sms_carrier_default"`
	SmsCarrierError          basetypes.StringValue `tfsdk:"sms_carrier_error"`
	SmsCarrierFieldLabel     basetypes.StringValue `tfsdk:"sms_carrier_field_label"`
	SmsCodeCancel            basetypes.StringValue `tfsdk:"sms_code_cancel"`
	SmsCodeError             basetypes.StringValue `tfsdk:"sms_code_error"`
	SmsCodeFieldLabel        basetypes.StringValue `tfsdk:"sms_code_field_label"`
	SmsCodeMessage           basetypes.StringValue `tfsdk:"sms_code_message"`
	SmsCodeSubmit            basetypes.StringValue `tfsdk:"sms_code_submit"`
	SmsCodeTitle             basetypes.StringValue `tfsdk:"sms_code_title"`
	SmsCountryFieldLabel     basetypes.StringValue `tfsdk:"sms_country_field_label"`
	SmsCountryFormat         basetypes.StringValue `tfsdk:"sms_country_format"`
	SmsHaveAccessCode        basetypes.StringValue `tfsdk:"sms_have_access_code"`
	SmsIsTwilio              basetypes.BoolValue   `tfsdk:"sms_is_twilio"`
	SmsMessageFormat         basetypes.StringValue `tfsdk:"sms_message_format"`
	SmsNumberCancel          basetypes.StringValue `tfsdk:"sms_number_cancel"`
	SmsNumberError           basetypes.StringValue `tfsdk:"sms_number_error"`
	SmsNumberFieldLabel      basetypes.StringValue `tfsdk:"sms_number_field_label"`
	SmsNumberFormat          basetypes.StringValue `tfsdk:"sms_number_format"`
	SmsNumberMessage         basetypes.StringValue `tfsdk:"sms_number_message"`
	SmsNumberSubmit          basetypes.StringValue `tfsdk:"sms_number_submit"`
	SmsNumberTitle           basetypes.StringValue `tfsdk:"sms_number_title"`
	SmsUsernameFormat        basetypes.StringValue `tfsdk:"sms_username_format"`
	SmsValidityDuration      basetypes.Int64Value  `tfsdk:"sms_validity_duration"`
	SponsorBackLink          basetypes.StringValue `tfsdk:"sponsor_back_link"`
	SponsorCancel            basetypes.StringValue `tfsdk:"sponsor_cancel"`
	SponsorEmail             basetypes.StringValue `tfsdk:"sponsor_email"`
	SponsorEmailError        basetypes.StringValue `tfsdk:"sponsor_email_error"`
	SponsorEmailTemplate     basetypes.StringValue `tfsdk:"sponsor_email_template"`
	SponsorInfoApproved      basetypes.StringValue `tfsdk:"sponsor_info_approved"`
	SponsorInfoDenied        basetypes.StringValue `tfsdk:"sponsor_info_denied"`
	SponsorInfoPending       basetypes.StringValue `tfsdk:"sponsor_info_pending"`
	SponsorName              basetypes.StringValue `tfsdk:"sponsor_name"`
	SponsorNameError         basetypes.StringValue `tfsdk:"sponsor_name_error"`
	SponsorNotePending       basetypes.StringValue `tfsdk:"sponsor_note_pending"`
	SponsorRequestAccess     basetypes.StringValue `tfsdk:"sponsor_request_access"`
	SponsorStatusApproved    basetypes.StringValue `tfsdk:"sponsor_status_approved"`
	SponsorStatusDenied      basetypes.StringValue `tfsdk:"sponsor_status_denied"`
	SponsorStatusPending     basetypes.StringValue `tfsdk:"sponsor_status_pending"`
	SponsorSubmit            basetypes.StringValue `tfsdk:"sponsor_submit"`
	SponsorsError            basetypes.StringValue `tfsdk:"sponsors_error"`
	SponsorsFieldLabel       basetypes.StringValue `tfsdk:"sponsors_field_label"`
	Tos                      basetypes.BoolValue   `tfsdk:"tos"`
	TosAcceptLabel           basetypes.StringValue `tfsdk:"tos_accept_label"`
	TosError                 basetypes.StringValue `tfsdk:"tos_error"`
	TosLink                  basetypes.StringValue `tfsdk:"tos_link"`
	TosText                  basetypes.StringValue `tfsdk:"tos_text"`
	state                    attr.ValueState
}

func (v PortalTemplateValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 121)

	var val tftypes.Value
	var err error

	attrTypes["access_code_alternate_email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["alignment"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_amazon"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_azure"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_facebook"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_google"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_microsoft"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_passphrase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_sms"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_sponsor"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["back_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["color"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["color_dark"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["color_light"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["company"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["company_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["company_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["email_access_domain_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field1"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["field1error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field1label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field1required"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["field2"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["field2error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field2label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field2required"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["field3"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["field3error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field3label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field3required"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["field4"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["field4error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field4label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field4required"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["locales"] = basetypes.MapType{
		ElemType: LocalesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["multi_auth"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["opt_out_default"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["optout"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["optout_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["page_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["powered_by"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["privacy"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["privacy_policy_accept_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["privacy_policy_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["privacy_policy_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["privacy_policy_text"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["required_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["responsive_layout"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["sign_in_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_carrier_default"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_carrier_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_carrier_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_country_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_country_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_have_access_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_is_twilio"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["sms_message_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_username_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_validity_duration"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["sponsor_back_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_email_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_email_template"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_info_approved"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_info_denied"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_info_pending"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_name_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_note_pending"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_request_access"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_status_approved"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_status_denied"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_status_pending"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsors_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsors_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["tos_accept_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos_text"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 121)

		val, err = v.AccessCodeAlternateEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["access_code_alternate_email"] = val

		val, err = v.Alignment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["alignment"] = val

		val, err = v.AuthButtonAmazon.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_amazon"] = val

		val, err = v.AuthButtonAzure.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_azure"] = val

		val, err = v.AuthButtonEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_email"] = val

		val, err = v.AuthButtonFacebook.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_facebook"] = val

		val, err = v.AuthButtonGoogle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_google"] = val

		val, err = v.AuthButtonMicrosoft.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_microsoft"] = val

		val, err = v.AuthButtonPassphrase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_passphrase"] = val

		val, err = v.AuthButtonSms.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_sms"] = val

		val, err = v.AuthButtonSponsor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_sponsor"] = val

		val, err = v.AuthLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_label"] = val

		val, err = v.BackLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["back_link"] = val

		val, err = v.Color.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color"] = val

		val, err = v.ColorDark.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color_dark"] = val

		val, err = v.ColorLight.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["color_light"] = val

		val, err = v.Company.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["company"] = val

		val, err = v.CompanyError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["company_error"] = val

		val, err = v.CompanyLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["company_label"] = val

		val, err = v.Email.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email"] = val

		val, err = v.EmailAccessDomainError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_access_domain_error"] = val

		val, err = v.EmailCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_cancel"] = val

		val, err = v.EmailCodeCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_cancel"] = val

		val, err = v.EmailCodeError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_error"] = val

		val, err = v.EmailCodeFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_field_label"] = val

		val, err = v.EmailCodeMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_message"] = val

		val, err = v.EmailCodeSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_submit"] = val

		val, err = v.EmailCodeTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_title"] = val

		val, err = v.EmailError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_error"] = val

		val, err = v.EmailFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_field_label"] = val

		val, err = v.EmailLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_label"] = val

		val, err = v.EmailMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_message"] = val

		val, err = v.EmailSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_submit"] = val

		val, err = v.EmailTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_title"] = val

		val, err = v.Field1.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field1"] = val

		val, err = v.Field1error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field1error"] = val

		val, err = v.Field1label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field1label"] = val

		val, err = v.Field1required.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field1required"] = val

		val, err = v.Field2.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field2"] = val

		val, err = v.Field2error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field2error"] = val

		val, err = v.Field2label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field2label"] = val

		val, err = v.Field2required.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field2required"] = val

		val, err = v.Field3.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field3"] = val

		val, err = v.Field3error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field3error"] = val

		val, err = v.Field3label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field3label"] = val

		val, err = v.Field3required.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field3required"] = val

		val, err = v.Field4.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field4"] = val

		val, err = v.Field4error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field4error"] = val

		val, err = v.Field4label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field4label"] = val

		val, err = v.Field4required.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field4required"] = val

		val, err = v.Locales.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["locales"] = val

		val, err = v.Message.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["message"] = val

		val, err = v.MultiAuth.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["multi_auth"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.NameError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name_error"] = val

		val, err = v.NameLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name_label"] = val

		val, err = v.OptOutDefault.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["opt_out_default"] = val

		val, err = v.Optout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["optout"] = val

		val, err = v.OptoutLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["optout_label"] = val

		val, err = v.PageTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["page_title"] = val

		val, err = v.PassphraseCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_cancel"] = val

		val, err = v.PassphraseError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_error"] = val

		val, err = v.PassphraseLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_label"] = val

		val, err = v.PassphraseMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_message"] = val

		val, err = v.PassphraseSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_submit"] = val

		val, err = v.PassphraseTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_title"] = val

		val, err = v.PoweredBy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["powered_by"] = val

		val, err = v.Privacy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy"] = val

		val, err = v.PrivacyPolicyAcceptLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_accept_label"] = val

		val, err = v.PrivacyPolicyError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_error"] = val

		val, err = v.PrivacyPolicyLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_link"] = val

		val, err = v.PrivacyPolicyText.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_text"] = val

		val, err = v.RequiredFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["required_field_label"] = val

		val, err = v.ResponsiveLayout.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["responsive_layout"] = val

		val, err = v.SignInLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sign_in_label"] = val

		val, err = v.SmsCarrierDefault.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_carrier_default"] = val

		val, err = v.SmsCarrierError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_carrier_error"] = val

		val, err = v.SmsCarrierFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_carrier_field_label"] = val

		val, err = v.SmsCodeCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_cancel"] = val

		val, err = v.SmsCodeError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_error"] = val

		val, err = v.SmsCodeFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_field_label"] = val

		val, err = v.SmsCodeMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_message"] = val

		val, err = v.SmsCodeSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_submit"] = val

		val, err = v.SmsCodeTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_title"] = val

		val, err = v.SmsCountryFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_country_field_label"] = val

		val, err = v.SmsCountryFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_country_format"] = val

		val, err = v.SmsHaveAccessCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_have_access_code"] = val

		val, err = v.SmsIsTwilio.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_is_twilio"] = val

		val, err = v.SmsMessageFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_message_format"] = val

		val, err = v.SmsNumberCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_cancel"] = val

		val, err = v.SmsNumberError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_error"] = val

		val, err = v.SmsNumberFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_field_label"] = val

		val, err = v.SmsNumberFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_format"] = val

		val, err = v.SmsNumberMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_message"] = val

		val, err = v.SmsNumberSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_submit"] = val

		val, err = v.SmsNumberTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_title"] = val

		val, err = v.SmsUsernameFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_username_format"] = val

		val, err = v.SmsValidityDuration.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_validity_duration"] = val

		val, err = v.SponsorBackLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_back_link"] = val

		val, err = v.SponsorCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_cancel"] = val

		val, err = v.SponsorEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_email"] = val

		val, err = v.SponsorEmailError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_email_error"] = val

		val, err = v.SponsorEmailTemplate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_email_template"] = val

		val, err = v.SponsorInfoApproved.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_info_approved"] = val

		val, err = v.SponsorInfoDenied.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_info_denied"] = val

		val, err = v.SponsorInfoPending.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_info_pending"] = val

		val, err = v.SponsorName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_name"] = val

		val, err = v.SponsorNameError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_name_error"] = val

		val, err = v.SponsorNotePending.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_note_pending"] = val

		val, err = v.SponsorRequestAccess.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_request_access"] = val

		val, err = v.SponsorStatusApproved.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_status_approved"] = val

		val, err = v.SponsorStatusDenied.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_status_denied"] = val

		val, err = v.SponsorStatusPending.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_status_pending"] = val

		val, err = v.SponsorSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_submit"] = val

		val, err = v.SponsorsError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsors_error"] = val

		val, err = v.SponsorsFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsors_field_label"] = val

		val, err = v.Tos.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos"] = val

		val, err = v.TosAcceptLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_accept_label"] = val

		val, err = v.TosError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_error"] = val

		val, err = v.TosLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_link"] = val

		val, err = v.TosText.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_text"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PortalTemplateValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PortalTemplateValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PortalTemplateValue) String() string {
	return "PortalTemplateValue"
}

func (v PortalTemplateValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	locales := types.MapValueMust(
		LocalesType{
			basetypes.ObjectType{
				AttrTypes: LocalesValue{}.AttributeTypes(ctx),
			},
		},
		v.Locales.Elements(),
	)

	if v.Locales.IsNull() {
		locales = types.MapNull(
			LocalesType{
				basetypes.ObjectType{
					AttrTypes: LocalesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Locales.IsUnknown() {
		locales = types.MapUnknown(
			LocalesType{
				basetypes.ObjectType{
					AttrTypes: LocalesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"access_code_alternate_email": basetypes.StringType{},
		"alignment":                   basetypes.StringType{},
		"auth_button_amazon":          basetypes.StringType{},
		"auth_button_azure":           basetypes.StringType{},
		"auth_button_email":           basetypes.StringType{},
		"auth_button_facebook":        basetypes.StringType{},
		"auth_button_google":          basetypes.StringType{},
		"auth_button_microsoft":       basetypes.StringType{},
		"auth_button_passphrase":      basetypes.StringType{},
		"auth_button_sms":             basetypes.StringType{},
		"auth_button_sponsor":         basetypes.StringType{},
		"auth_label":                  basetypes.StringType{},
		"back_link":                   basetypes.StringType{},
		"color":                       basetypes.StringType{},
		"color_dark":                  basetypes.StringType{},
		"color_light":                 basetypes.StringType{},
		"company":                     basetypes.BoolType{},
		"company_error":               basetypes.StringType{},
		"company_label":               basetypes.StringType{},
		"email":                       basetypes.BoolType{},
		"email_access_domain_error":   basetypes.StringType{},
		"email_cancel":                basetypes.StringType{},
		"email_code_cancel":           basetypes.StringType{},
		"email_code_error":            basetypes.StringType{},
		"email_code_field_label":      basetypes.StringType{},
		"email_code_message":          basetypes.StringType{},
		"email_code_submit":           basetypes.StringType{},
		"email_code_title":            basetypes.StringType{},
		"email_error":                 basetypes.StringType{},
		"email_field_label":           basetypes.StringType{},
		"email_label":                 basetypes.StringType{},
		"email_message":               basetypes.StringType{},
		"email_submit":                basetypes.StringType{},
		"email_title":                 basetypes.StringType{},
		"field1":                      basetypes.BoolType{},
		"field1error":                 basetypes.StringType{},
		"field1label":                 basetypes.StringType{},
		"field1required":              basetypes.BoolType{},
		"field2":                      basetypes.BoolType{},
		"field2error":                 basetypes.StringType{},
		"field2label":                 basetypes.StringType{},
		"field2required":              basetypes.BoolType{},
		"field3":                      basetypes.BoolType{},
		"field3error":                 basetypes.StringType{},
		"field3label":                 basetypes.StringType{},
		"field3required":              basetypes.BoolType{},
		"field4":                      basetypes.BoolType{},
		"field4error":                 basetypes.StringType{},
		"field4label":                 basetypes.StringType{},
		"field4required":              basetypes.BoolType{},
		"locales": basetypes.MapType{
			ElemType: LocalesValue{}.Type(ctx),
		},
		"message":                     basetypes.StringType{},
		"multi_auth":                  basetypes.BoolType{},
		"name":                        basetypes.BoolType{},
		"name_error":                  basetypes.StringType{},
		"name_label":                  basetypes.StringType{},
		"opt_out_default":             basetypes.BoolType{},
		"optout":                      basetypes.BoolType{},
		"optout_label":                basetypes.StringType{},
		"page_title":                  basetypes.StringType{},
		"passphrase_cancel":           basetypes.StringType{},
		"passphrase_error":            basetypes.StringType{},
		"passphrase_label":            basetypes.StringType{},
		"passphrase_message":          basetypes.StringType{},
		"passphrase_submit":           basetypes.StringType{},
		"passphrase_title":            basetypes.StringType{},
		"powered_by":                  basetypes.BoolType{},
		"privacy":                     basetypes.BoolType{},
		"privacy_policy_accept_label": basetypes.StringType{},
		"privacy_policy_error":        basetypes.StringType{},
		"privacy_policy_link":         basetypes.StringType{},
		"privacy_policy_text":         basetypes.StringType{},
		"required_field_label":        basetypes.StringType{},
		"responsive_layout":           basetypes.BoolType{},
		"sign_in_label":               basetypes.StringType{},
		"sms_carrier_default":         basetypes.StringType{},
		"sms_carrier_error":           basetypes.StringType{},
		"sms_carrier_field_label":     basetypes.StringType{},
		"sms_code_cancel":             basetypes.StringType{},
		"sms_code_error":              basetypes.StringType{},
		"sms_code_field_label":        basetypes.StringType{},
		"sms_code_message":            basetypes.StringType{},
		"sms_code_submit":             basetypes.StringType{},
		"sms_code_title":              basetypes.StringType{},
		"sms_country_field_label":     basetypes.StringType{},
		"sms_country_format":          basetypes.StringType{},
		"sms_have_access_code":        basetypes.StringType{},
		"sms_is_twilio":               basetypes.BoolType{},
		"sms_message_format":          basetypes.StringType{},
		"sms_number_cancel":           basetypes.StringType{},
		"sms_number_error":            basetypes.StringType{},
		"sms_number_field_label":      basetypes.StringType{},
		"sms_number_format":           basetypes.StringType{},
		"sms_number_message":          basetypes.StringType{},
		"sms_number_submit":           basetypes.StringType{},
		"sms_number_title":            basetypes.StringType{},
		"sms_username_format":         basetypes.StringType{},
		"sms_validity_duration":       basetypes.Int64Type{},
		"sponsor_back_link":           basetypes.StringType{},
		"sponsor_cancel":              basetypes.StringType{},
		"sponsor_email":               basetypes.StringType{},
		"sponsor_email_error":         basetypes.StringType{},
		"sponsor_email_template":      basetypes.StringType{},
		"sponsor_info_approved":       basetypes.StringType{},
		"sponsor_info_denied":         basetypes.StringType{},
		"sponsor_info_pending":        basetypes.StringType{},
		"sponsor_name":                basetypes.StringType{},
		"sponsor_name_error":          basetypes.StringType{},
		"sponsor_note_pending":        basetypes.StringType{},
		"sponsor_request_access":      basetypes.StringType{},
		"sponsor_status_approved":     basetypes.StringType{},
		"sponsor_status_denied":       basetypes.StringType{},
		"sponsor_status_pending":      basetypes.StringType{},
		"sponsor_submit":              basetypes.StringType{},
		"sponsors_error":              basetypes.StringType{},
		"sponsors_field_label":        basetypes.StringType{},
		"tos":                         basetypes.BoolType{},
		"tos_accept_label":            basetypes.StringType{},
		"tos_error":                   basetypes.StringType{},
		"tos_link":                    basetypes.StringType{},
		"tos_text":                    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"access_code_alternate_email": v.AccessCodeAlternateEmail,
			"alignment":                   v.Alignment,
			"auth_button_amazon":          v.AuthButtonAmazon,
			"auth_button_azure":           v.AuthButtonAzure,
			"auth_button_email":           v.AuthButtonEmail,
			"auth_button_facebook":        v.AuthButtonFacebook,
			"auth_button_google":          v.AuthButtonGoogle,
			"auth_button_microsoft":       v.AuthButtonMicrosoft,
			"auth_button_passphrase":      v.AuthButtonPassphrase,
			"auth_button_sms":             v.AuthButtonSms,
			"auth_button_sponsor":         v.AuthButtonSponsor,
			"auth_label":                  v.AuthLabel,
			"back_link":                   v.BackLink,
			"color":                       v.Color,
			"color_dark":                  v.ColorDark,
			"color_light":                 v.ColorLight,
			"company":                     v.Company,
			"company_error":               v.CompanyError,
			"company_label":               v.CompanyLabel,
			"email":                       v.Email,
			"email_access_domain_error":   v.EmailAccessDomainError,
			"email_cancel":                v.EmailCancel,
			"email_code_cancel":           v.EmailCodeCancel,
			"email_code_error":            v.EmailCodeError,
			"email_code_field_label":      v.EmailCodeFieldLabel,
			"email_code_message":          v.EmailCodeMessage,
			"email_code_submit":           v.EmailCodeSubmit,
			"email_code_title":            v.EmailCodeTitle,
			"email_error":                 v.EmailError,
			"email_field_label":           v.EmailFieldLabel,
			"email_label":                 v.EmailLabel,
			"email_message":               v.EmailMessage,
			"email_submit":                v.EmailSubmit,
			"email_title":                 v.EmailTitle,
			"field1":                      v.Field1,
			"field1error":                 v.Field1error,
			"field1label":                 v.Field1label,
			"field1required":              v.Field1required,
			"field2":                      v.Field2,
			"field2error":                 v.Field2error,
			"field2label":                 v.Field2label,
			"field2required":              v.Field2required,
			"field3":                      v.Field3,
			"field3error":                 v.Field3error,
			"field3label":                 v.Field3label,
			"field3required":              v.Field3required,
			"field4":                      v.Field4,
			"field4error":                 v.Field4error,
			"field4label":                 v.Field4label,
			"field4required":              v.Field4required,
			"locales":                     locales,
			"message":                     v.Message,
			"multi_auth":                  v.MultiAuth,
			"name":                        v.Name,
			"name_error":                  v.NameError,
			"name_label":                  v.NameLabel,
			"opt_out_default":             v.OptOutDefault,
			"optout":                      v.Optout,
			"optout_label":                v.OptoutLabel,
			"page_title":                  v.PageTitle,
			"passphrase_cancel":           v.PassphraseCancel,
			"passphrase_error":            v.PassphraseError,
			"passphrase_label":            v.PassphraseLabel,
			"passphrase_message":          v.PassphraseMessage,
			"passphrase_submit":           v.PassphraseSubmit,
			"passphrase_title":            v.PassphraseTitle,
			"powered_by":                  v.PoweredBy,
			"privacy":                     v.Privacy,
			"privacy_policy_accept_label": v.PrivacyPolicyAcceptLabel,
			"privacy_policy_error":        v.PrivacyPolicyError,
			"privacy_policy_link":         v.PrivacyPolicyLink,
			"privacy_policy_text":         v.PrivacyPolicyText,
			"required_field_label":        v.RequiredFieldLabel,
			"responsive_layout":           v.ResponsiveLayout,
			"sign_in_label":               v.SignInLabel,
			"sms_carrier_default":         v.SmsCarrierDefault,
			"sms_carrier_error":           v.SmsCarrierError,
			"sms_carrier_field_label":     v.SmsCarrierFieldLabel,
			"sms_code_cancel":             v.SmsCodeCancel,
			"sms_code_error":              v.SmsCodeError,
			"sms_code_field_label":        v.SmsCodeFieldLabel,
			"sms_code_message":            v.SmsCodeMessage,
			"sms_code_submit":             v.SmsCodeSubmit,
			"sms_code_title":              v.SmsCodeTitle,
			"sms_country_field_label":     v.SmsCountryFieldLabel,
			"sms_country_format":          v.SmsCountryFormat,
			"sms_have_access_code":        v.SmsHaveAccessCode,
			"sms_is_twilio":               v.SmsIsTwilio,
			"sms_message_format":          v.SmsMessageFormat,
			"sms_number_cancel":           v.SmsNumberCancel,
			"sms_number_error":            v.SmsNumberError,
			"sms_number_field_label":      v.SmsNumberFieldLabel,
			"sms_number_format":           v.SmsNumberFormat,
			"sms_number_message":          v.SmsNumberMessage,
			"sms_number_submit":           v.SmsNumberSubmit,
			"sms_number_title":            v.SmsNumberTitle,
			"sms_username_format":         v.SmsUsernameFormat,
			"sms_validity_duration":       v.SmsValidityDuration,
			"sponsor_back_link":           v.SponsorBackLink,
			"sponsor_cancel":              v.SponsorCancel,
			"sponsor_email":               v.SponsorEmail,
			"sponsor_email_error":         v.SponsorEmailError,
			"sponsor_email_template":      v.SponsorEmailTemplate,
			"sponsor_info_approved":       v.SponsorInfoApproved,
			"sponsor_info_denied":         v.SponsorInfoDenied,
			"sponsor_info_pending":        v.SponsorInfoPending,
			"sponsor_name":                v.SponsorName,
			"sponsor_name_error":          v.SponsorNameError,
			"sponsor_note_pending":        v.SponsorNotePending,
			"sponsor_request_access":      v.SponsorRequestAccess,
			"sponsor_status_approved":     v.SponsorStatusApproved,
			"sponsor_status_denied":       v.SponsorStatusDenied,
			"sponsor_status_pending":      v.SponsorStatusPending,
			"sponsor_submit":              v.SponsorSubmit,
			"sponsors_error":              v.SponsorsError,
			"sponsors_field_label":        v.SponsorsFieldLabel,
			"tos":                         v.Tos,
			"tos_accept_label":            v.TosAcceptLabel,
			"tos_error":                   v.TosError,
			"tos_link":                    v.TosLink,
			"tos_text":                    v.TosText,
		})

	return objVal, diags
}

func (v PortalTemplateValue) Equal(o attr.Value) bool {
	other, ok := o.(PortalTemplateValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AccessCodeAlternateEmail.Equal(other.AccessCodeAlternateEmail) {
		return false
	}

	if !v.Alignment.Equal(other.Alignment) {
		return false
	}

	if !v.AuthButtonAmazon.Equal(other.AuthButtonAmazon) {
		return false
	}

	if !v.AuthButtonAzure.Equal(other.AuthButtonAzure) {
		return false
	}

	if !v.AuthButtonEmail.Equal(other.AuthButtonEmail) {
		return false
	}

	if !v.AuthButtonFacebook.Equal(other.AuthButtonFacebook) {
		return false
	}

	if !v.AuthButtonGoogle.Equal(other.AuthButtonGoogle) {
		return false
	}

	if !v.AuthButtonMicrosoft.Equal(other.AuthButtonMicrosoft) {
		return false
	}

	if !v.AuthButtonPassphrase.Equal(other.AuthButtonPassphrase) {
		return false
	}

	if !v.AuthButtonSms.Equal(other.AuthButtonSms) {
		return false
	}

	if !v.AuthButtonSponsor.Equal(other.AuthButtonSponsor) {
		return false
	}

	if !v.AuthLabel.Equal(other.AuthLabel) {
		return false
	}

	if !v.BackLink.Equal(other.BackLink) {
		return false
	}

	if !v.Color.Equal(other.Color) {
		return false
	}

	if !v.ColorDark.Equal(other.ColorDark) {
		return false
	}

	if !v.ColorLight.Equal(other.ColorLight) {
		return false
	}

	if !v.Company.Equal(other.Company) {
		return false
	}

	if !v.CompanyError.Equal(other.CompanyError) {
		return false
	}

	if !v.CompanyLabel.Equal(other.CompanyLabel) {
		return false
	}

	if !v.Email.Equal(other.Email) {
		return false
	}

	if !v.EmailAccessDomainError.Equal(other.EmailAccessDomainError) {
		return false
	}

	if !v.EmailCancel.Equal(other.EmailCancel) {
		return false
	}

	if !v.EmailCodeCancel.Equal(other.EmailCodeCancel) {
		return false
	}

	if !v.EmailCodeError.Equal(other.EmailCodeError) {
		return false
	}

	if !v.EmailCodeFieldLabel.Equal(other.EmailCodeFieldLabel) {
		return false
	}

	if !v.EmailCodeMessage.Equal(other.EmailCodeMessage) {
		return false
	}

	if !v.EmailCodeSubmit.Equal(other.EmailCodeSubmit) {
		return false
	}

	if !v.EmailCodeTitle.Equal(other.EmailCodeTitle) {
		return false
	}

	if !v.EmailError.Equal(other.EmailError) {
		return false
	}

	if !v.EmailFieldLabel.Equal(other.EmailFieldLabel) {
		return false
	}

	if !v.EmailLabel.Equal(other.EmailLabel) {
		return false
	}

	if !v.EmailMessage.Equal(other.EmailMessage) {
		return false
	}

	if !v.EmailSubmit.Equal(other.EmailSubmit) {
		return false
	}

	if !v.EmailTitle.Equal(other.EmailTitle) {
		return false
	}

	if !v.Field1.Equal(other.Field1) {
		return false
	}

	if !v.Field1error.Equal(other.Field1error) {
		return false
	}

	if !v.Field1label.Equal(other.Field1label) {
		return false
	}

	if !v.Field1required.Equal(other.Field1required) {
		return false
	}

	if !v.Field2.Equal(other.Field2) {
		return false
	}

	if !v.Field2error.Equal(other.Field2error) {
		return false
	}

	if !v.Field2label.Equal(other.Field2label) {
		return false
	}

	if !v.Field2required.Equal(other.Field2required) {
		return false
	}

	if !v.Field3.Equal(other.Field3) {
		return false
	}

	if !v.Field3error.Equal(other.Field3error) {
		return false
	}

	if !v.Field3label.Equal(other.Field3label) {
		return false
	}

	if !v.Field3required.Equal(other.Field3required) {
		return false
	}

	if !v.Field4.Equal(other.Field4) {
		return false
	}

	if !v.Field4error.Equal(other.Field4error) {
		return false
	}

	if !v.Field4label.Equal(other.Field4label) {
		return false
	}

	if !v.Field4required.Equal(other.Field4required) {
		return false
	}

	if !v.Locales.Equal(other.Locales) {
		return false
	}

	if !v.Message.Equal(other.Message) {
		return false
	}

	if !v.MultiAuth.Equal(other.MultiAuth) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.NameError.Equal(other.NameError) {
		return false
	}

	if !v.NameLabel.Equal(other.NameLabel) {
		return false
	}

	if !v.OptOutDefault.Equal(other.OptOutDefault) {
		return false
	}

	if !v.Optout.Equal(other.Optout) {
		return false
	}

	if !v.OptoutLabel.Equal(other.OptoutLabel) {
		return false
	}

	if !v.PageTitle.Equal(other.PageTitle) {
		return false
	}

	if !v.PassphraseCancel.Equal(other.PassphraseCancel) {
		return false
	}

	if !v.PassphraseError.Equal(other.PassphraseError) {
		return false
	}

	if !v.PassphraseLabel.Equal(other.PassphraseLabel) {
		return false
	}

	if !v.PassphraseMessage.Equal(other.PassphraseMessage) {
		return false
	}

	if !v.PassphraseSubmit.Equal(other.PassphraseSubmit) {
		return false
	}

	if !v.PassphraseTitle.Equal(other.PassphraseTitle) {
		return false
	}

	if !v.PoweredBy.Equal(other.PoweredBy) {
		return false
	}

	if !v.Privacy.Equal(other.Privacy) {
		return false
	}

	if !v.PrivacyPolicyAcceptLabel.Equal(other.PrivacyPolicyAcceptLabel) {
		return false
	}

	if !v.PrivacyPolicyError.Equal(other.PrivacyPolicyError) {
		return false
	}

	if !v.PrivacyPolicyLink.Equal(other.PrivacyPolicyLink) {
		return false
	}

	if !v.PrivacyPolicyText.Equal(other.PrivacyPolicyText) {
		return false
	}

	if !v.RequiredFieldLabel.Equal(other.RequiredFieldLabel) {
		return false
	}

	if !v.ResponsiveLayout.Equal(other.ResponsiveLayout) {
		return false
	}

	if !v.SignInLabel.Equal(other.SignInLabel) {
		return false
	}

	if !v.SmsCarrierDefault.Equal(other.SmsCarrierDefault) {
		return false
	}

	if !v.SmsCarrierError.Equal(other.SmsCarrierError) {
		return false
	}

	if !v.SmsCarrierFieldLabel.Equal(other.SmsCarrierFieldLabel) {
		return false
	}

	if !v.SmsCodeCancel.Equal(other.SmsCodeCancel) {
		return false
	}

	if !v.SmsCodeError.Equal(other.SmsCodeError) {
		return false
	}

	if !v.SmsCodeFieldLabel.Equal(other.SmsCodeFieldLabel) {
		return false
	}

	if !v.SmsCodeMessage.Equal(other.SmsCodeMessage) {
		return false
	}

	if !v.SmsCodeSubmit.Equal(other.SmsCodeSubmit) {
		return false
	}

	if !v.SmsCodeTitle.Equal(other.SmsCodeTitle) {
		return false
	}

	if !v.SmsCountryFieldLabel.Equal(other.SmsCountryFieldLabel) {
		return false
	}

	if !v.SmsCountryFormat.Equal(other.SmsCountryFormat) {
		return false
	}

	if !v.SmsHaveAccessCode.Equal(other.SmsHaveAccessCode) {
		return false
	}

	if !v.SmsIsTwilio.Equal(other.SmsIsTwilio) {
		return false
	}

	if !v.SmsMessageFormat.Equal(other.SmsMessageFormat) {
		return false
	}

	if !v.SmsNumberCancel.Equal(other.SmsNumberCancel) {
		return false
	}

	if !v.SmsNumberError.Equal(other.SmsNumberError) {
		return false
	}

	if !v.SmsNumberFieldLabel.Equal(other.SmsNumberFieldLabel) {
		return false
	}

	if !v.SmsNumberFormat.Equal(other.SmsNumberFormat) {
		return false
	}

	if !v.SmsNumberMessage.Equal(other.SmsNumberMessage) {
		return false
	}

	if !v.SmsNumberSubmit.Equal(other.SmsNumberSubmit) {
		return false
	}

	if !v.SmsNumberTitle.Equal(other.SmsNumberTitle) {
		return false
	}

	if !v.SmsUsernameFormat.Equal(other.SmsUsernameFormat) {
		return false
	}

	if !v.SmsValidityDuration.Equal(other.SmsValidityDuration) {
		return false
	}

	if !v.SponsorBackLink.Equal(other.SponsorBackLink) {
		return false
	}

	if !v.SponsorCancel.Equal(other.SponsorCancel) {
		return false
	}

	if !v.SponsorEmail.Equal(other.SponsorEmail) {
		return false
	}

	if !v.SponsorEmailError.Equal(other.SponsorEmailError) {
		return false
	}

	if !v.SponsorEmailTemplate.Equal(other.SponsorEmailTemplate) {
		return false
	}

	if !v.SponsorInfoApproved.Equal(other.SponsorInfoApproved) {
		return false
	}

	if !v.SponsorInfoDenied.Equal(other.SponsorInfoDenied) {
		return false
	}

	if !v.SponsorInfoPending.Equal(other.SponsorInfoPending) {
		return false
	}

	if !v.SponsorName.Equal(other.SponsorName) {
		return false
	}

	if !v.SponsorNameError.Equal(other.SponsorNameError) {
		return false
	}

	if !v.SponsorNotePending.Equal(other.SponsorNotePending) {
		return false
	}

	if !v.SponsorRequestAccess.Equal(other.SponsorRequestAccess) {
		return false
	}

	if !v.SponsorStatusApproved.Equal(other.SponsorStatusApproved) {
		return false
	}

	if !v.SponsorStatusDenied.Equal(other.SponsorStatusDenied) {
		return false
	}

	if !v.SponsorStatusPending.Equal(other.SponsorStatusPending) {
		return false
	}

	if !v.SponsorSubmit.Equal(other.SponsorSubmit) {
		return false
	}

	if !v.SponsorsError.Equal(other.SponsorsError) {
		return false
	}

	if !v.SponsorsFieldLabel.Equal(other.SponsorsFieldLabel) {
		return false
	}

	if !v.Tos.Equal(other.Tos) {
		return false
	}

	if !v.TosAcceptLabel.Equal(other.TosAcceptLabel) {
		return false
	}

	if !v.TosError.Equal(other.TosError) {
		return false
	}

	if !v.TosLink.Equal(other.TosLink) {
		return false
	}

	if !v.TosText.Equal(other.TosText) {
		return false
	}

	return true
}

func (v PortalTemplateValue) Type(ctx context.Context) attr.Type {
	return PortalTemplateType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PortalTemplateValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"access_code_alternate_email": basetypes.StringType{},
		"alignment":                   basetypes.StringType{},
		"auth_button_amazon":          basetypes.StringType{},
		"auth_button_azure":           basetypes.StringType{},
		"auth_button_email":           basetypes.StringType{},
		"auth_button_facebook":        basetypes.StringType{},
		"auth_button_google":          basetypes.StringType{},
		"auth_button_microsoft":       basetypes.StringType{},
		"auth_button_passphrase":      basetypes.StringType{},
		"auth_button_sms":             basetypes.StringType{},
		"auth_button_sponsor":         basetypes.StringType{},
		"auth_label":                  basetypes.StringType{},
		"back_link":                   basetypes.StringType{},
		"color":                       basetypes.StringType{},
		"color_dark":                  basetypes.StringType{},
		"color_light":                 basetypes.StringType{},
		"company":                     basetypes.BoolType{},
		"company_error":               basetypes.StringType{},
		"company_label":               basetypes.StringType{},
		"email":                       basetypes.BoolType{},
		"email_access_domain_error":   basetypes.StringType{},
		"email_cancel":                basetypes.StringType{},
		"email_code_cancel":           basetypes.StringType{},
		"email_code_error":            basetypes.StringType{},
		"email_code_field_label":      basetypes.StringType{},
		"email_code_message":          basetypes.StringType{},
		"email_code_submit":           basetypes.StringType{},
		"email_code_title":            basetypes.StringType{},
		"email_error":                 basetypes.StringType{},
		"email_field_label":           basetypes.StringType{},
		"email_label":                 basetypes.StringType{},
		"email_message":               basetypes.StringType{},
		"email_submit":                basetypes.StringType{},
		"email_title":                 basetypes.StringType{},
		"field1":                      basetypes.BoolType{},
		"field1error":                 basetypes.StringType{},
		"field1label":                 basetypes.StringType{},
		"field1required":              basetypes.BoolType{},
		"field2":                      basetypes.BoolType{},
		"field2error":                 basetypes.StringType{},
		"field2label":                 basetypes.StringType{},
		"field2required":              basetypes.BoolType{},
		"field3":                      basetypes.BoolType{},
		"field3error":                 basetypes.StringType{},
		"field3label":                 basetypes.StringType{},
		"field3required":              basetypes.BoolType{},
		"field4":                      basetypes.BoolType{},
		"field4error":                 basetypes.StringType{},
		"field4label":                 basetypes.StringType{},
		"field4required":              basetypes.BoolType{},
		"locales": basetypes.MapType{
			ElemType: LocalesValue{}.Type(ctx),
		},
		"message":                     basetypes.StringType{},
		"multi_auth":                  basetypes.BoolType{},
		"name":                        basetypes.BoolType{},
		"name_error":                  basetypes.StringType{},
		"name_label":                  basetypes.StringType{},
		"opt_out_default":             basetypes.BoolType{},
		"optout":                      basetypes.BoolType{},
		"optout_label":                basetypes.StringType{},
		"page_title":                  basetypes.StringType{},
		"passphrase_cancel":           basetypes.StringType{},
		"passphrase_error":            basetypes.StringType{},
		"passphrase_label":            basetypes.StringType{},
		"passphrase_message":          basetypes.StringType{},
		"passphrase_submit":           basetypes.StringType{},
		"passphrase_title":            basetypes.StringType{},
		"powered_by":                  basetypes.BoolType{},
		"privacy":                     basetypes.BoolType{},
		"privacy_policy_accept_label": basetypes.StringType{},
		"privacy_policy_error":        basetypes.StringType{},
		"privacy_policy_link":         basetypes.StringType{},
		"privacy_policy_text":         basetypes.StringType{},
		"required_field_label":        basetypes.StringType{},
		"responsive_layout":           basetypes.BoolType{},
		"sign_in_label":               basetypes.StringType{},
		"sms_carrier_default":         basetypes.StringType{},
		"sms_carrier_error":           basetypes.StringType{},
		"sms_carrier_field_label":     basetypes.StringType{},
		"sms_code_cancel":             basetypes.StringType{},
		"sms_code_error":              basetypes.StringType{},
		"sms_code_field_label":        basetypes.StringType{},
		"sms_code_message":            basetypes.StringType{},
		"sms_code_submit":             basetypes.StringType{},
		"sms_code_title":              basetypes.StringType{},
		"sms_country_field_label":     basetypes.StringType{},
		"sms_country_format":          basetypes.StringType{},
		"sms_have_access_code":        basetypes.StringType{},
		"sms_is_twilio":               basetypes.BoolType{},
		"sms_message_format":          basetypes.StringType{},
		"sms_number_cancel":           basetypes.StringType{},
		"sms_number_error":            basetypes.StringType{},
		"sms_number_field_label":      basetypes.StringType{},
		"sms_number_format":           basetypes.StringType{},
		"sms_number_message":          basetypes.StringType{},
		"sms_number_submit":           basetypes.StringType{},
		"sms_number_title":            basetypes.StringType{},
		"sms_username_format":         basetypes.StringType{},
		"sms_validity_duration":       basetypes.Int64Type{},
		"sponsor_back_link":           basetypes.StringType{},
		"sponsor_cancel":              basetypes.StringType{},
		"sponsor_email":               basetypes.StringType{},
		"sponsor_email_error":         basetypes.StringType{},
		"sponsor_email_template":      basetypes.StringType{},
		"sponsor_info_approved":       basetypes.StringType{},
		"sponsor_info_denied":         basetypes.StringType{},
		"sponsor_info_pending":        basetypes.StringType{},
		"sponsor_name":                basetypes.StringType{},
		"sponsor_name_error":          basetypes.StringType{},
		"sponsor_note_pending":        basetypes.StringType{},
		"sponsor_request_access":      basetypes.StringType{},
		"sponsor_status_approved":     basetypes.StringType{},
		"sponsor_status_denied":       basetypes.StringType{},
		"sponsor_status_pending":      basetypes.StringType{},
		"sponsor_submit":              basetypes.StringType{},
		"sponsors_error":              basetypes.StringType{},
		"sponsors_field_label":        basetypes.StringType{},
		"tos":                         basetypes.BoolType{},
		"tos_accept_label":            basetypes.StringType{},
		"tos_error":                   basetypes.StringType{},
		"tos_link":                    basetypes.StringType{},
		"tos_text":                    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LocalesType{}

type LocalesType struct {
	basetypes.ObjectType
}

func (t LocalesType) Equal(o attr.Type) bool {
	other, ok := o.(LocalesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LocalesType) String() string {
	return "LocalesType"
}

func (t LocalesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	authButtonAmazonAttribute, ok := attributes["auth_button_amazon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_amazon is missing from object`)

		return nil, diags
	}

	authButtonAmazonVal, ok := authButtonAmazonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_amazon expected to be basetypes.StringValue, was: %T`, authButtonAmazonAttribute))
	}

	authButtonAzureAttribute, ok := attributes["auth_button_azure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_azure is missing from object`)

		return nil, diags
	}

	authButtonAzureVal, ok := authButtonAzureAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_azure expected to be basetypes.StringValue, was: %T`, authButtonAzureAttribute))
	}

	authButtonEmailAttribute, ok := attributes["auth_button_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_email is missing from object`)

		return nil, diags
	}

	authButtonEmailVal, ok := authButtonEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_email expected to be basetypes.StringValue, was: %T`, authButtonEmailAttribute))
	}

	authButtonFacebookAttribute, ok := attributes["auth_button_facebook"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_facebook is missing from object`)

		return nil, diags
	}

	authButtonFacebookVal, ok := authButtonFacebookAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_facebook expected to be basetypes.StringValue, was: %T`, authButtonFacebookAttribute))
	}

	authButtonGoogleAttribute, ok := attributes["auth_button_google"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_google is missing from object`)

		return nil, diags
	}

	authButtonGoogleVal, ok := authButtonGoogleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_google expected to be basetypes.StringValue, was: %T`, authButtonGoogleAttribute))
	}

	authButtonMicrosoftAttribute, ok := attributes["auth_button_microsoft"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_microsoft is missing from object`)

		return nil, diags
	}

	authButtonMicrosoftVal, ok := authButtonMicrosoftAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_microsoft expected to be basetypes.StringValue, was: %T`, authButtonMicrosoftAttribute))
	}

	authButtonPassphraseAttribute, ok := attributes["auth_button_passphrase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_passphrase is missing from object`)

		return nil, diags
	}

	authButtonPassphraseVal, ok := authButtonPassphraseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_passphrase expected to be basetypes.StringValue, was: %T`, authButtonPassphraseAttribute))
	}

	authButtonSmsAttribute, ok := attributes["auth_button_sms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sms is missing from object`)

		return nil, diags
	}

	authButtonSmsVal, ok := authButtonSmsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sms expected to be basetypes.StringValue, was: %T`, authButtonSmsAttribute))
	}

	authButtonSponsorAttribute, ok := attributes["auth_button_sponsor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sponsor is missing from object`)

		return nil, diags
	}

	authButtonSponsorVal, ok := authButtonSponsorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sponsor expected to be basetypes.StringValue, was: %T`, authButtonSponsorAttribute))
	}

	authLabelAttribute, ok := attributes["auth_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_label is missing from object`)

		return nil, diags
	}

	authLabelVal, ok := authLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_label expected to be basetypes.StringValue, was: %T`, authLabelAttribute))
	}

	backLinkAttribute, ok := attributes["back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`back_link is missing from object`)

		return nil, diags
	}

	backLinkVal, ok := backLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`back_link expected to be basetypes.StringValue, was: %T`, backLinkAttribute))
	}

	companyErrorAttribute, ok := attributes["company_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_error is missing from object`)

		return nil, diags
	}

	companyErrorVal, ok := companyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_error expected to be basetypes.StringValue, was: %T`, companyErrorAttribute))
	}

	companyLabelAttribute, ok := attributes["company_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_label is missing from object`)

		return nil, diags
	}

	companyLabelVal, ok := companyLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_label expected to be basetypes.StringValue, was: %T`, companyLabelAttribute))
	}

	emailAccessDomainErrorAttribute, ok := attributes["email_access_domain_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_access_domain_error is missing from object`)

		return nil, diags
	}

	emailAccessDomainErrorVal, ok := emailAccessDomainErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_access_domain_error expected to be basetypes.StringValue, was: %T`, emailAccessDomainErrorAttribute))
	}

	emailCancelAttribute, ok := attributes["email_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_cancel is missing from object`)

		return nil, diags
	}

	emailCancelVal, ok := emailCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_cancel expected to be basetypes.StringValue, was: %T`, emailCancelAttribute))
	}

	emailCodeCancelAttribute, ok := attributes["email_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_cancel is missing from object`)

		return nil, diags
	}

	emailCodeCancelVal, ok := emailCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_cancel expected to be basetypes.StringValue, was: %T`, emailCodeCancelAttribute))
	}

	emailCodeErrorAttribute, ok := attributes["email_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_error is missing from object`)

		return nil, diags
	}

	emailCodeErrorVal, ok := emailCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_error expected to be basetypes.StringValue, was: %T`, emailCodeErrorAttribute))
	}

	emailCodeFieldLabelAttribute, ok := attributes["email_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_field_label is missing from object`)

		return nil, diags
	}

	emailCodeFieldLabelVal, ok := emailCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_field_label expected to be basetypes.StringValue, was: %T`, emailCodeFieldLabelAttribute))
	}

	emailCodeMessageAttribute, ok := attributes["email_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_message is missing from object`)

		return nil, diags
	}

	emailCodeMessageVal, ok := emailCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_message expected to be basetypes.StringValue, was: %T`, emailCodeMessageAttribute))
	}

	emailCodeSubmitAttribute, ok := attributes["email_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_submit is missing from object`)

		return nil, diags
	}

	emailCodeSubmitVal, ok := emailCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_submit expected to be basetypes.StringValue, was: %T`, emailCodeSubmitAttribute))
	}

	emailCodeTitleAttribute, ok := attributes["email_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_title is missing from object`)

		return nil, diags
	}

	emailCodeTitleVal, ok := emailCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_title expected to be basetypes.StringValue, was: %T`, emailCodeTitleAttribute))
	}

	emailErrorAttribute, ok := attributes["email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_error is missing from object`)

		return nil, diags
	}

	emailErrorVal, ok := emailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_error expected to be basetypes.StringValue, was: %T`, emailErrorAttribute))
	}

	emailFieldLabelAttribute, ok := attributes["email_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_field_label is missing from object`)

		return nil, diags
	}

	emailFieldLabelVal, ok := emailFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_field_label expected to be basetypes.StringValue, was: %T`, emailFieldLabelAttribute))
	}

	emailLabelAttribute, ok := attributes["email_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_label is missing from object`)

		return nil, diags
	}

	emailLabelVal, ok := emailLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_label expected to be basetypes.StringValue, was: %T`, emailLabelAttribute))
	}

	emailMessageAttribute, ok := attributes["email_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_message is missing from object`)

		return nil, diags
	}

	emailMessageVal, ok := emailMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_message expected to be basetypes.StringValue, was: %T`, emailMessageAttribute))
	}

	emailSubmitAttribute, ok := attributes["email_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_submit is missing from object`)

		return nil, diags
	}

	emailSubmitVal, ok := emailSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_submit expected to be basetypes.StringValue, was: %T`, emailSubmitAttribute))
	}

	emailTitleAttribute, ok := attributes["email_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_title is missing from object`)

		return nil, diags
	}

	emailTitleVal, ok := emailTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_title expected to be basetypes.StringValue, was: %T`, emailTitleAttribute))
	}

	field1errorAttribute, ok := attributes["field1error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1error is missing from object`)

		return nil, diags
	}

	field1errorVal, ok := field1errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1error expected to be basetypes.StringValue, was: %T`, field1errorAttribute))
	}

	field1labelAttribute, ok := attributes["field1label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1label is missing from object`)

		return nil, diags
	}

	field1labelVal, ok := field1labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1label expected to be basetypes.StringValue, was: %T`, field1labelAttribute))
	}

	field2errorAttribute, ok := attributes["field2error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2error is missing from object`)

		return nil, diags
	}

	field2errorVal, ok := field2errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2error expected to be basetypes.StringValue, was: %T`, field2errorAttribute))
	}

	field2labelAttribute, ok := attributes["field2label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2label is missing from object`)

		return nil, diags
	}

	field2labelVal, ok := field2labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2label expected to be basetypes.StringValue, was: %T`, field2labelAttribute))
	}

	field3errorAttribute, ok := attributes["field3error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3error is missing from object`)

		return nil, diags
	}

	field3errorVal, ok := field3errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3error expected to be basetypes.StringValue, was: %T`, field3errorAttribute))
	}

	field3labelAttribute, ok := attributes["field3label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3label is missing from object`)

		return nil, diags
	}

	field3labelVal, ok := field3labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3label expected to be basetypes.StringValue, was: %T`, field3labelAttribute))
	}

	field4errorAttribute, ok := attributes["field4error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4error is missing from object`)

		return nil, diags
	}

	field4errorVal, ok := field4errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4error expected to be basetypes.StringValue, was: %T`, field4errorAttribute))
	}

	field4labelAttribute, ok := attributes["field4label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4label is missing from object`)

		return nil, diags
	}

	field4labelVal, ok := field4labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4label expected to be basetypes.StringValue, was: %T`, field4labelAttribute))
	}

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return nil, diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	nameErrorAttribute, ok := attributes["name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_error is missing from object`)

		return nil, diags
	}

	nameErrorVal, ok := nameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_error expected to be basetypes.StringValue, was: %T`, nameErrorAttribute))
	}

	nameLabelAttribute, ok := attributes["name_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_label is missing from object`)

		return nil, diags
	}

	nameLabelVal, ok := nameLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_label expected to be basetypes.StringValue, was: %T`, nameLabelAttribute))
	}

	optoutLabelAttribute, ok := attributes["optout_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optout_label is missing from object`)

		return nil, diags
	}

	optoutLabelVal, ok := optoutLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optout_label expected to be basetypes.StringValue, was: %T`, optoutLabelAttribute))
	}

	pageTitleAttribute, ok := attributes["page_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`page_title is missing from object`)

		return nil, diags
	}

	pageTitleVal, ok := pageTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`page_title expected to be basetypes.StringValue, was: %T`, pageTitleAttribute))
	}

	passphraseCancelAttribute, ok := attributes["passphrase_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_cancel is missing from object`)

		return nil, diags
	}

	passphraseCancelVal, ok := passphraseCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_cancel expected to be basetypes.StringValue, was: %T`, passphraseCancelAttribute))
	}

	passphraseErrorAttribute, ok := attributes["passphrase_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_error is missing from object`)

		return nil, diags
	}

	passphraseErrorVal, ok := passphraseErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_error expected to be basetypes.StringValue, was: %T`, passphraseErrorAttribute))
	}

	passphraseLabelAttribute, ok := attributes["passphrase_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_label is missing from object`)

		return nil, diags
	}

	passphraseLabelVal, ok := passphraseLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_label expected to be basetypes.StringValue, was: %T`, passphraseLabelAttribute))
	}

	passphraseMessageAttribute, ok := attributes["passphrase_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_message is missing from object`)

		return nil, diags
	}

	passphraseMessageVal, ok := passphraseMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_message expected to be basetypes.StringValue, was: %T`, passphraseMessageAttribute))
	}

	passphraseSubmitAttribute, ok := attributes["passphrase_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_submit is missing from object`)

		return nil, diags
	}

	passphraseSubmitVal, ok := passphraseSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_submit expected to be basetypes.StringValue, was: %T`, passphraseSubmitAttribute))
	}

	passphraseTitleAttribute, ok := attributes["passphrase_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_title is missing from object`)

		return nil, diags
	}

	passphraseTitleVal, ok := passphraseTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_title expected to be basetypes.StringValue, was: %T`, passphraseTitleAttribute))
	}

	privacyPolicyAcceptLabelAttribute, ok := attributes["privacy_policy_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_accept_label is missing from object`)

		return nil, diags
	}

	privacyPolicyAcceptLabelVal, ok := privacyPolicyAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_accept_label expected to be basetypes.StringValue, was: %T`, privacyPolicyAcceptLabelAttribute))
	}

	privacyPolicyErrorAttribute, ok := attributes["privacy_policy_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_error is missing from object`)

		return nil, diags
	}

	privacyPolicyErrorVal, ok := privacyPolicyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_error expected to be basetypes.StringValue, was: %T`, privacyPolicyErrorAttribute))
	}

	privacyPolicyLinkAttribute, ok := attributes["privacy_policy_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_link is missing from object`)

		return nil, diags
	}

	privacyPolicyLinkVal, ok := privacyPolicyLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_link expected to be basetypes.StringValue, was: %T`, privacyPolicyLinkAttribute))
	}

	privacyPolicyTextAttribute, ok := attributes["privacy_policy_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_text is missing from object`)

		return nil, diags
	}

	privacyPolicyTextVal, ok := privacyPolicyTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_text expected to be basetypes.StringValue, was: %T`, privacyPolicyTextAttribute))
	}

	requiredFieldLabelAttribute, ok := attributes["required_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`required_field_label is missing from object`)

		return nil, diags
	}

	requiredFieldLabelVal, ok := requiredFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`required_field_label expected to be basetypes.StringValue, was: %T`, requiredFieldLabelAttribute))
	}

	signInLabelAttribute, ok := attributes["sign_in_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sign_in_label is missing from object`)

		return nil, diags
	}

	signInLabelVal, ok := signInLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sign_in_label expected to be basetypes.StringValue, was: %T`, signInLabelAttribute))
	}

	smsCarrierDefaultAttribute, ok := attributes["sms_carrier_default"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_default is missing from object`)

		return nil, diags
	}

	smsCarrierDefaultVal, ok := smsCarrierDefaultAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_default expected to be basetypes.StringValue, was: %T`, smsCarrierDefaultAttribute))
	}

	smsCarrierErrorAttribute, ok := attributes["sms_carrier_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_error is missing from object`)

		return nil, diags
	}

	smsCarrierErrorVal, ok := smsCarrierErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_error expected to be basetypes.StringValue, was: %T`, smsCarrierErrorAttribute))
	}

	smsCarrierFieldLabelAttribute, ok := attributes["sms_carrier_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_field_label is missing from object`)

		return nil, diags
	}

	smsCarrierFieldLabelVal, ok := smsCarrierFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_field_label expected to be basetypes.StringValue, was: %T`, smsCarrierFieldLabelAttribute))
	}

	smsCodeCancelAttribute, ok := attributes["sms_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_cancel is missing from object`)

		return nil, diags
	}

	smsCodeCancelVal, ok := smsCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_cancel expected to be basetypes.StringValue, was: %T`, smsCodeCancelAttribute))
	}

	smsCodeErrorAttribute, ok := attributes["sms_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_error is missing from object`)

		return nil, diags
	}

	smsCodeErrorVal, ok := smsCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_error expected to be basetypes.StringValue, was: %T`, smsCodeErrorAttribute))
	}

	smsCodeFieldLabelAttribute, ok := attributes["sms_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_field_label is missing from object`)

		return nil, diags
	}

	smsCodeFieldLabelVal, ok := smsCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_field_label expected to be basetypes.StringValue, was: %T`, smsCodeFieldLabelAttribute))
	}

	smsCodeMessageAttribute, ok := attributes["sms_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_message is missing from object`)

		return nil, diags
	}

	smsCodeMessageVal, ok := smsCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_message expected to be basetypes.StringValue, was: %T`, smsCodeMessageAttribute))
	}

	smsCodeSubmitAttribute, ok := attributes["sms_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_submit is missing from object`)

		return nil, diags
	}

	smsCodeSubmitVal, ok := smsCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_submit expected to be basetypes.StringValue, was: %T`, smsCodeSubmitAttribute))
	}

	smsCodeTitleAttribute, ok := attributes["sms_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_title is missing from object`)

		return nil, diags
	}

	smsCodeTitleVal, ok := smsCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_title expected to be basetypes.StringValue, was: %T`, smsCodeTitleAttribute))
	}

	smsCountryFieldLabelAttribute, ok := attributes["sms_country_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_field_label is missing from object`)

		return nil, diags
	}

	smsCountryFieldLabelVal, ok := smsCountryFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_field_label expected to be basetypes.StringValue, was: %T`, smsCountryFieldLabelAttribute))
	}

	smsCountryFormatAttribute, ok := attributes["sms_country_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_format is missing from object`)

		return nil, diags
	}

	smsCountryFormatVal, ok := smsCountryFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_format expected to be basetypes.StringValue, was: %T`, smsCountryFormatAttribute))
	}

	smsHaveAccessCodeAttribute, ok := attributes["sms_have_access_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_have_access_code is missing from object`)

		return nil, diags
	}

	smsHaveAccessCodeVal, ok := smsHaveAccessCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_have_access_code expected to be basetypes.StringValue, was: %T`, smsHaveAccessCodeAttribute))
	}

	smsMessageFormatAttribute, ok := attributes["sms_message_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_message_format is missing from object`)

		return nil, diags
	}

	smsMessageFormatVal, ok := smsMessageFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_message_format expected to be basetypes.StringValue, was: %T`, smsMessageFormatAttribute))
	}

	smsNumberCancelAttribute, ok := attributes["sms_number_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_cancel is missing from object`)

		return nil, diags
	}

	smsNumberCancelVal, ok := smsNumberCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_cancel expected to be basetypes.StringValue, was: %T`, smsNumberCancelAttribute))
	}

	smsNumberErrorAttribute, ok := attributes["sms_number_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_error is missing from object`)

		return nil, diags
	}

	smsNumberErrorVal, ok := smsNumberErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_error expected to be basetypes.StringValue, was: %T`, smsNumberErrorAttribute))
	}

	smsNumberFieldLabelAttribute, ok := attributes["sms_number_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_field_label is missing from object`)

		return nil, diags
	}

	smsNumberFieldLabelVal, ok := smsNumberFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_field_label expected to be basetypes.StringValue, was: %T`, smsNumberFieldLabelAttribute))
	}

	smsNumberFormatAttribute, ok := attributes["sms_number_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_format is missing from object`)

		return nil, diags
	}

	smsNumberFormatVal, ok := smsNumberFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_format expected to be basetypes.StringValue, was: %T`, smsNumberFormatAttribute))
	}

	smsNumberMessageAttribute, ok := attributes["sms_number_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_message is missing from object`)

		return nil, diags
	}

	smsNumberMessageVal, ok := smsNumberMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_message expected to be basetypes.StringValue, was: %T`, smsNumberMessageAttribute))
	}

	smsNumberSubmitAttribute, ok := attributes["sms_number_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_submit is missing from object`)

		return nil, diags
	}

	smsNumberSubmitVal, ok := smsNumberSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_submit expected to be basetypes.StringValue, was: %T`, smsNumberSubmitAttribute))
	}

	smsNumberTitleAttribute, ok := attributes["sms_number_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_title is missing from object`)

		return nil, diags
	}

	smsNumberTitleVal, ok := smsNumberTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_title expected to be basetypes.StringValue, was: %T`, smsNumberTitleAttribute))
	}

	smsUsernameFormatAttribute, ok := attributes["sms_username_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_username_format is missing from object`)

		return nil, diags
	}

	smsUsernameFormatVal, ok := smsUsernameFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_username_format expected to be basetypes.StringValue, was: %T`, smsUsernameFormatAttribute))
	}

	sponsorBackLinkAttribute, ok := attributes["sponsor_back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_back_link is missing from object`)

		return nil, diags
	}

	sponsorBackLinkVal, ok := sponsorBackLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_back_link expected to be basetypes.StringValue, was: %T`, sponsorBackLinkAttribute))
	}

	sponsorCancelAttribute, ok := attributes["sponsor_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_cancel is missing from object`)

		return nil, diags
	}

	sponsorCancelVal, ok := sponsorCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_cancel expected to be basetypes.StringValue, was: %T`, sponsorCancelAttribute))
	}

	sponsorEmailAttribute, ok := attributes["sponsor_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email is missing from object`)

		return nil, diags
	}

	sponsorEmailVal, ok := sponsorEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email expected to be basetypes.StringValue, was: %T`, sponsorEmailAttribute))
	}

	sponsorEmailErrorAttribute, ok := attributes["sponsor_email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email_error is missing from object`)

		return nil, diags
	}

	sponsorEmailErrorVal, ok := sponsorEmailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email_error expected to be basetypes.StringValue, was: %T`, sponsorEmailErrorAttribute))
	}

	sponsorInfoApprovedAttribute, ok := attributes["sponsor_info_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_approved is missing from object`)

		return nil, diags
	}

	sponsorInfoApprovedVal, ok := sponsorInfoApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_approved expected to be basetypes.StringValue, was: %T`, sponsorInfoApprovedAttribute))
	}

	sponsorInfoDeniedAttribute, ok := attributes["sponsor_info_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_denied is missing from object`)

		return nil, diags
	}

	sponsorInfoDeniedVal, ok := sponsorInfoDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_denied expected to be basetypes.StringValue, was: %T`, sponsorInfoDeniedAttribute))
	}

	sponsorInfoPendingAttribute, ok := attributes["sponsor_info_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_pending is missing from object`)

		return nil, diags
	}

	sponsorInfoPendingVal, ok := sponsorInfoPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_pending expected to be basetypes.StringValue, was: %T`, sponsorInfoPendingAttribute))
	}

	sponsorNameAttribute, ok := attributes["sponsor_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name is missing from object`)

		return nil, diags
	}

	sponsorNameVal, ok := sponsorNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name expected to be basetypes.StringValue, was: %T`, sponsorNameAttribute))
	}

	sponsorNameErrorAttribute, ok := attributes["sponsor_name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name_error is missing from object`)

		return nil, diags
	}

	sponsorNameErrorVal, ok := sponsorNameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name_error expected to be basetypes.StringValue, was: %T`, sponsorNameErrorAttribute))
	}

	sponsorNotePendingAttribute, ok := attributes["sponsor_note_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_note_pending is missing from object`)

		return nil, diags
	}

	sponsorNotePendingVal, ok := sponsorNotePendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_note_pending expected to be basetypes.StringValue, was: %T`, sponsorNotePendingAttribute))
	}

	sponsorRequestAccessAttribute, ok := attributes["sponsor_request_access"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_request_access is missing from object`)

		return nil, diags
	}

	sponsorRequestAccessVal, ok := sponsorRequestAccessAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_request_access expected to be basetypes.StringValue, was: %T`, sponsorRequestAccessAttribute))
	}

	sponsorStatusApprovedAttribute, ok := attributes["sponsor_status_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_approved is missing from object`)

		return nil, diags
	}

	sponsorStatusApprovedVal, ok := sponsorStatusApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_approved expected to be basetypes.StringValue, was: %T`, sponsorStatusApprovedAttribute))
	}

	sponsorStatusDeniedAttribute, ok := attributes["sponsor_status_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_denied is missing from object`)

		return nil, diags
	}

	sponsorStatusDeniedVal, ok := sponsorStatusDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_denied expected to be basetypes.StringValue, was: %T`, sponsorStatusDeniedAttribute))
	}

	sponsorStatusPendingAttribute, ok := attributes["sponsor_status_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_pending is missing from object`)

		return nil, diags
	}

	sponsorStatusPendingVal, ok := sponsorStatusPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_pending expected to be basetypes.StringValue, was: %T`, sponsorStatusPendingAttribute))
	}

	sponsorSubmitAttribute, ok := attributes["sponsor_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_submit is missing from object`)

		return nil, diags
	}

	sponsorSubmitVal, ok := sponsorSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_submit expected to be basetypes.StringValue, was: %T`, sponsorSubmitAttribute))
	}

	sponsorsErrorAttribute, ok := attributes["sponsors_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_error is missing from object`)

		return nil, diags
	}

	sponsorsErrorVal, ok := sponsorsErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_error expected to be basetypes.StringValue, was: %T`, sponsorsErrorAttribute))
	}

	sponsorsFieldLabelAttribute, ok := attributes["sponsors_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_field_label is missing from object`)

		return nil, diags
	}

	sponsorsFieldLabelVal, ok := sponsorsFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_field_label expected to be basetypes.StringValue, was: %T`, sponsorsFieldLabelAttribute))
	}

	tosAcceptLabelAttribute, ok := attributes["tos_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_accept_label is missing from object`)

		return nil, diags
	}

	tosAcceptLabelVal, ok := tosAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_accept_label expected to be basetypes.StringValue, was: %T`, tosAcceptLabelAttribute))
	}

	tosErrorAttribute, ok := attributes["tos_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_error is missing from object`)

		return nil, diags
	}

	tosErrorVal, ok := tosErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_error expected to be basetypes.StringValue, was: %T`, tosErrorAttribute))
	}

	tosLinkAttribute, ok := attributes["tos_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_link is missing from object`)

		return nil, diags
	}

	tosLinkVal, ok := tosLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_link expected to be basetypes.StringValue, was: %T`, tosLinkAttribute))
	}

	tosTextAttribute, ok := attributes["tos_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_text is missing from object`)

		return nil, diags
	}

	tosTextVal, ok := tosTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_text expected to be basetypes.StringValue, was: %T`, tosTextAttribute))
	}

	uthButtonAmazonAttribute, ok := attributes["uth_button_amazon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uth_button_amazon is missing from object`)

		return nil, diags
	}

	uthButtonAmazonVal, ok := uthButtonAmazonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uth_button_amazon expected to be basetypes.StringValue, was: %T`, uthButtonAmazonAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LocalesValue{
		AuthButtonAmazon:         authButtonAmazonVal,
		AuthButtonAzure:          authButtonAzureVal,
		AuthButtonEmail:          authButtonEmailVal,
		AuthButtonFacebook:       authButtonFacebookVal,
		AuthButtonGoogle:         authButtonGoogleVal,
		AuthButtonMicrosoft:      authButtonMicrosoftVal,
		AuthButtonPassphrase:     authButtonPassphraseVal,
		AuthButtonSms:            authButtonSmsVal,
		AuthButtonSponsor:        authButtonSponsorVal,
		AuthLabel:                authLabelVal,
		BackLink:                 backLinkVal,
		CompanyError:             companyErrorVal,
		CompanyLabel:             companyLabelVal,
		EmailAccessDomainError:   emailAccessDomainErrorVal,
		EmailCancel:              emailCancelVal,
		EmailCodeCancel:          emailCodeCancelVal,
		EmailCodeError:           emailCodeErrorVal,
		EmailCodeFieldLabel:      emailCodeFieldLabelVal,
		EmailCodeMessage:         emailCodeMessageVal,
		EmailCodeSubmit:          emailCodeSubmitVal,
		EmailCodeTitle:           emailCodeTitleVal,
		EmailError:               emailErrorVal,
		EmailFieldLabel:          emailFieldLabelVal,
		EmailLabel:               emailLabelVal,
		EmailMessage:             emailMessageVal,
		EmailSubmit:              emailSubmitVal,
		EmailTitle:               emailTitleVal,
		Field1error:              field1errorVal,
		Field1label:              field1labelVal,
		Field2error:              field2errorVal,
		Field2label:              field2labelVal,
		Field3error:              field3errorVal,
		Field3label:              field3labelVal,
		Field4error:              field4errorVal,
		Field4label:              field4labelVal,
		Message:                  messageVal,
		NameError:                nameErrorVal,
		NameLabel:                nameLabelVal,
		OptoutLabel:              optoutLabelVal,
		PageTitle:                pageTitleVal,
		PassphraseCancel:         passphraseCancelVal,
		PassphraseError:          passphraseErrorVal,
		PassphraseLabel:          passphraseLabelVal,
		PassphraseMessage:        passphraseMessageVal,
		PassphraseSubmit:         passphraseSubmitVal,
		PassphraseTitle:          passphraseTitleVal,
		PrivacyPolicyAcceptLabel: privacyPolicyAcceptLabelVal,
		PrivacyPolicyError:       privacyPolicyErrorVal,
		PrivacyPolicyLink:        privacyPolicyLinkVal,
		PrivacyPolicyText:        privacyPolicyTextVal,
		RequiredFieldLabel:       requiredFieldLabelVal,
		SignInLabel:              signInLabelVal,
		SmsCarrierDefault:        smsCarrierDefaultVal,
		SmsCarrierError:          smsCarrierErrorVal,
		SmsCarrierFieldLabel:     smsCarrierFieldLabelVal,
		SmsCodeCancel:            smsCodeCancelVal,
		SmsCodeError:             smsCodeErrorVal,
		SmsCodeFieldLabel:        smsCodeFieldLabelVal,
		SmsCodeMessage:           smsCodeMessageVal,
		SmsCodeSubmit:            smsCodeSubmitVal,
		SmsCodeTitle:             smsCodeTitleVal,
		SmsCountryFieldLabel:     smsCountryFieldLabelVal,
		SmsCountryFormat:         smsCountryFormatVal,
		SmsHaveAccessCode:        smsHaveAccessCodeVal,
		SmsMessageFormat:         smsMessageFormatVal,
		SmsNumberCancel:          smsNumberCancelVal,
		SmsNumberError:           smsNumberErrorVal,
		SmsNumberFieldLabel:      smsNumberFieldLabelVal,
		SmsNumberFormat:          smsNumberFormatVal,
		SmsNumberMessage:         smsNumberMessageVal,
		SmsNumberSubmit:          smsNumberSubmitVal,
		SmsNumberTitle:           smsNumberTitleVal,
		SmsUsernameFormat:        smsUsernameFormatVal,
		SponsorBackLink:          sponsorBackLinkVal,
		SponsorCancel:            sponsorCancelVal,
		SponsorEmail:             sponsorEmailVal,
		SponsorEmailError:        sponsorEmailErrorVal,
		SponsorInfoApproved:      sponsorInfoApprovedVal,
		SponsorInfoDenied:        sponsorInfoDeniedVal,
		SponsorInfoPending:       sponsorInfoPendingVal,
		SponsorName:              sponsorNameVal,
		SponsorNameError:         sponsorNameErrorVal,
		SponsorNotePending:       sponsorNotePendingVal,
		SponsorRequestAccess:     sponsorRequestAccessVal,
		SponsorStatusApproved:    sponsorStatusApprovedVal,
		SponsorStatusDenied:      sponsorStatusDeniedVal,
		SponsorStatusPending:     sponsorStatusPendingVal,
		SponsorSubmit:            sponsorSubmitVal,
		SponsorsError:            sponsorsErrorVal,
		SponsorsFieldLabel:       sponsorsFieldLabelVal,
		TosAcceptLabel:           tosAcceptLabelVal,
		TosError:                 tosErrorVal,
		TosLink:                  tosLinkVal,
		TosText:                  tosTextVal,
		UthButtonAmazon:          uthButtonAmazonVal,
		state:                    attr.ValueStateKnown,
	}, diags
}

func NewLocalesValueNull() LocalesValue {
	return LocalesValue{
		state: attr.ValueStateNull,
	}
}

func NewLocalesValueUnknown() LocalesValue {
	return LocalesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLocalesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LocalesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LocalesValue Attribute Value",
				"While creating a LocalesValue value, a missing attribute value was detected. "+
					"A LocalesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocalesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LocalesValue Attribute Type",
				"While creating a LocalesValue value, an invalid attribute value was detected. "+
					"A LocalesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocalesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LocalesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LocalesValue Attribute Value",
				"While creating a LocalesValue value, an extra attribute value was detected. "+
					"A LocalesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LocalesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLocalesValueUnknown(), diags
	}

	authButtonAmazonAttribute, ok := attributes["auth_button_amazon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_amazon is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonAmazonVal, ok := authButtonAmazonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_amazon expected to be basetypes.StringValue, was: %T`, authButtonAmazonAttribute))
	}

	authButtonAzureAttribute, ok := attributes["auth_button_azure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_azure is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonAzureVal, ok := authButtonAzureAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_azure expected to be basetypes.StringValue, was: %T`, authButtonAzureAttribute))
	}

	authButtonEmailAttribute, ok := attributes["auth_button_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_email is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonEmailVal, ok := authButtonEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_email expected to be basetypes.StringValue, was: %T`, authButtonEmailAttribute))
	}

	authButtonFacebookAttribute, ok := attributes["auth_button_facebook"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_facebook is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonFacebookVal, ok := authButtonFacebookAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_facebook expected to be basetypes.StringValue, was: %T`, authButtonFacebookAttribute))
	}

	authButtonGoogleAttribute, ok := attributes["auth_button_google"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_google is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonGoogleVal, ok := authButtonGoogleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_google expected to be basetypes.StringValue, was: %T`, authButtonGoogleAttribute))
	}

	authButtonMicrosoftAttribute, ok := attributes["auth_button_microsoft"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_microsoft is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonMicrosoftVal, ok := authButtonMicrosoftAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_microsoft expected to be basetypes.StringValue, was: %T`, authButtonMicrosoftAttribute))
	}

	authButtonPassphraseAttribute, ok := attributes["auth_button_passphrase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_passphrase is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonPassphraseVal, ok := authButtonPassphraseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_passphrase expected to be basetypes.StringValue, was: %T`, authButtonPassphraseAttribute))
	}

	authButtonSmsAttribute, ok := attributes["auth_button_sms"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sms is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonSmsVal, ok := authButtonSmsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sms expected to be basetypes.StringValue, was: %T`, authButtonSmsAttribute))
	}

	authButtonSponsorAttribute, ok := attributes["auth_button_sponsor"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_button_sponsor is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authButtonSponsorVal, ok := authButtonSponsorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_button_sponsor expected to be basetypes.StringValue, was: %T`, authButtonSponsorAttribute))
	}

	authLabelAttribute, ok := attributes["auth_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	authLabelVal, ok := authLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_label expected to be basetypes.StringValue, was: %T`, authLabelAttribute))
	}

	backLinkAttribute, ok := attributes["back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`back_link is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	backLinkVal, ok := backLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`back_link expected to be basetypes.StringValue, was: %T`, backLinkAttribute))
	}

	companyErrorAttribute, ok := attributes["company_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	companyErrorVal, ok := companyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_error expected to be basetypes.StringValue, was: %T`, companyErrorAttribute))
	}

	companyLabelAttribute, ok := attributes["company_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`company_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	companyLabelVal, ok := companyLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`company_label expected to be basetypes.StringValue, was: %T`, companyLabelAttribute))
	}

	emailAccessDomainErrorAttribute, ok := attributes["email_access_domain_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_access_domain_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailAccessDomainErrorVal, ok := emailAccessDomainErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_access_domain_error expected to be basetypes.StringValue, was: %T`, emailAccessDomainErrorAttribute))
	}

	emailCancelAttribute, ok := attributes["email_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_cancel is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailCancelVal, ok := emailCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_cancel expected to be basetypes.StringValue, was: %T`, emailCancelAttribute))
	}

	emailCodeCancelAttribute, ok := attributes["email_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_cancel is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailCodeCancelVal, ok := emailCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_cancel expected to be basetypes.StringValue, was: %T`, emailCodeCancelAttribute))
	}

	emailCodeErrorAttribute, ok := attributes["email_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailCodeErrorVal, ok := emailCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_error expected to be basetypes.StringValue, was: %T`, emailCodeErrorAttribute))
	}

	emailCodeFieldLabelAttribute, ok := attributes["email_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailCodeFieldLabelVal, ok := emailCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_field_label expected to be basetypes.StringValue, was: %T`, emailCodeFieldLabelAttribute))
	}

	emailCodeMessageAttribute, ok := attributes["email_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_message is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailCodeMessageVal, ok := emailCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_message expected to be basetypes.StringValue, was: %T`, emailCodeMessageAttribute))
	}

	emailCodeSubmitAttribute, ok := attributes["email_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_submit is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailCodeSubmitVal, ok := emailCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_submit expected to be basetypes.StringValue, was: %T`, emailCodeSubmitAttribute))
	}

	emailCodeTitleAttribute, ok := attributes["email_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_code_title is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailCodeTitleVal, ok := emailCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_code_title expected to be basetypes.StringValue, was: %T`, emailCodeTitleAttribute))
	}

	emailErrorAttribute, ok := attributes["email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailErrorVal, ok := emailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_error expected to be basetypes.StringValue, was: %T`, emailErrorAttribute))
	}

	emailFieldLabelAttribute, ok := attributes["email_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailFieldLabelVal, ok := emailFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_field_label expected to be basetypes.StringValue, was: %T`, emailFieldLabelAttribute))
	}

	emailLabelAttribute, ok := attributes["email_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailLabelVal, ok := emailLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_label expected to be basetypes.StringValue, was: %T`, emailLabelAttribute))
	}

	emailMessageAttribute, ok := attributes["email_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_message is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailMessageVal, ok := emailMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_message expected to be basetypes.StringValue, was: %T`, emailMessageAttribute))
	}

	emailSubmitAttribute, ok := attributes["email_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_submit is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailSubmitVal, ok := emailSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_submit expected to be basetypes.StringValue, was: %T`, emailSubmitAttribute))
	}

	emailTitleAttribute, ok := attributes["email_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email_title is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	emailTitleVal, ok := emailTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email_title expected to be basetypes.StringValue, was: %T`, emailTitleAttribute))
	}

	field1errorAttribute, ok := attributes["field1error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field1errorVal, ok := field1errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1error expected to be basetypes.StringValue, was: %T`, field1errorAttribute))
	}

	field1labelAttribute, ok := attributes["field1label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field1label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field1labelVal, ok := field1labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field1label expected to be basetypes.StringValue, was: %T`, field1labelAttribute))
	}

	field2errorAttribute, ok := attributes["field2error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field2errorVal, ok := field2errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2error expected to be basetypes.StringValue, was: %T`, field2errorAttribute))
	}

	field2labelAttribute, ok := attributes["field2label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field2label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field2labelVal, ok := field2labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field2label expected to be basetypes.StringValue, was: %T`, field2labelAttribute))
	}

	field3errorAttribute, ok := attributes["field3error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field3errorVal, ok := field3errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3error expected to be basetypes.StringValue, was: %T`, field3errorAttribute))
	}

	field3labelAttribute, ok := attributes["field3label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field3label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field3labelVal, ok := field3labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field3label expected to be basetypes.StringValue, was: %T`, field3labelAttribute))
	}

	field4errorAttribute, ok := attributes["field4error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field4errorVal, ok := field4errorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4error expected to be basetypes.StringValue, was: %T`, field4errorAttribute))
	}

	field4labelAttribute, ok := attributes["field4label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field4label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	field4labelVal, ok := field4labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field4label expected to be basetypes.StringValue, was: %T`, field4labelAttribute))
	}

	messageAttribute, ok := attributes["message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`message is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	messageVal, ok := messageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`message expected to be basetypes.StringValue, was: %T`, messageAttribute))
	}

	nameErrorAttribute, ok := attributes["name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	nameErrorVal, ok := nameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_error expected to be basetypes.StringValue, was: %T`, nameErrorAttribute))
	}

	nameLabelAttribute, ok := attributes["name_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	nameLabelVal, ok := nameLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name_label expected to be basetypes.StringValue, was: %T`, nameLabelAttribute))
	}

	optoutLabelAttribute, ok := attributes["optout_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`optout_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	optoutLabelVal, ok := optoutLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`optout_label expected to be basetypes.StringValue, was: %T`, optoutLabelAttribute))
	}

	pageTitleAttribute, ok := attributes["page_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`page_title is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	pageTitleVal, ok := pageTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`page_title expected to be basetypes.StringValue, was: %T`, pageTitleAttribute))
	}

	passphraseCancelAttribute, ok := attributes["passphrase_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_cancel is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	passphraseCancelVal, ok := passphraseCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_cancel expected to be basetypes.StringValue, was: %T`, passphraseCancelAttribute))
	}

	passphraseErrorAttribute, ok := attributes["passphrase_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	passphraseErrorVal, ok := passphraseErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_error expected to be basetypes.StringValue, was: %T`, passphraseErrorAttribute))
	}

	passphraseLabelAttribute, ok := attributes["passphrase_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	passphraseLabelVal, ok := passphraseLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_label expected to be basetypes.StringValue, was: %T`, passphraseLabelAttribute))
	}

	passphraseMessageAttribute, ok := attributes["passphrase_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_message is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	passphraseMessageVal, ok := passphraseMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_message expected to be basetypes.StringValue, was: %T`, passphraseMessageAttribute))
	}

	passphraseSubmitAttribute, ok := attributes["passphrase_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_submit is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	passphraseSubmitVal, ok := passphraseSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_submit expected to be basetypes.StringValue, was: %T`, passphraseSubmitAttribute))
	}

	passphraseTitleAttribute, ok := attributes["passphrase_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`passphrase_title is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	passphraseTitleVal, ok := passphraseTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`passphrase_title expected to be basetypes.StringValue, was: %T`, passphraseTitleAttribute))
	}

	privacyPolicyAcceptLabelAttribute, ok := attributes["privacy_policy_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_accept_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	privacyPolicyAcceptLabelVal, ok := privacyPolicyAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_accept_label expected to be basetypes.StringValue, was: %T`, privacyPolicyAcceptLabelAttribute))
	}

	privacyPolicyErrorAttribute, ok := attributes["privacy_policy_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	privacyPolicyErrorVal, ok := privacyPolicyErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_error expected to be basetypes.StringValue, was: %T`, privacyPolicyErrorAttribute))
	}

	privacyPolicyLinkAttribute, ok := attributes["privacy_policy_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_link is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	privacyPolicyLinkVal, ok := privacyPolicyLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_link expected to be basetypes.StringValue, was: %T`, privacyPolicyLinkAttribute))
	}

	privacyPolicyTextAttribute, ok := attributes["privacy_policy_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`privacy_policy_text is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	privacyPolicyTextVal, ok := privacyPolicyTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`privacy_policy_text expected to be basetypes.StringValue, was: %T`, privacyPolicyTextAttribute))
	}

	requiredFieldLabelAttribute, ok := attributes["required_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`required_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	requiredFieldLabelVal, ok := requiredFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`required_field_label expected to be basetypes.StringValue, was: %T`, requiredFieldLabelAttribute))
	}

	signInLabelAttribute, ok := attributes["sign_in_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sign_in_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	signInLabelVal, ok := signInLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sign_in_label expected to be basetypes.StringValue, was: %T`, signInLabelAttribute))
	}

	smsCarrierDefaultAttribute, ok := attributes["sms_carrier_default"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_default is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCarrierDefaultVal, ok := smsCarrierDefaultAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_default expected to be basetypes.StringValue, was: %T`, smsCarrierDefaultAttribute))
	}

	smsCarrierErrorAttribute, ok := attributes["sms_carrier_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCarrierErrorVal, ok := smsCarrierErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_error expected to be basetypes.StringValue, was: %T`, smsCarrierErrorAttribute))
	}

	smsCarrierFieldLabelAttribute, ok := attributes["sms_carrier_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_carrier_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCarrierFieldLabelVal, ok := smsCarrierFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_carrier_field_label expected to be basetypes.StringValue, was: %T`, smsCarrierFieldLabelAttribute))
	}

	smsCodeCancelAttribute, ok := attributes["sms_code_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_cancel is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCodeCancelVal, ok := smsCodeCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_cancel expected to be basetypes.StringValue, was: %T`, smsCodeCancelAttribute))
	}

	smsCodeErrorAttribute, ok := attributes["sms_code_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCodeErrorVal, ok := smsCodeErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_error expected to be basetypes.StringValue, was: %T`, smsCodeErrorAttribute))
	}

	smsCodeFieldLabelAttribute, ok := attributes["sms_code_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCodeFieldLabelVal, ok := smsCodeFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_field_label expected to be basetypes.StringValue, was: %T`, smsCodeFieldLabelAttribute))
	}

	smsCodeMessageAttribute, ok := attributes["sms_code_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_message is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCodeMessageVal, ok := smsCodeMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_message expected to be basetypes.StringValue, was: %T`, smsCodeMessageAttribute))
	}

	smsCodeSubmitAttribute, ok := attributes["sms_code_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_submit is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCodeSubmitVal, ok := smsCodeSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_submit expected to be basetypes.StringValue, was: %T`, smsCodeSubmitAttribute))
	}

	smsCodeTitleAttribute, ok := attributes["sms_code_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_code_title is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCodeTitleVal, ok := smsCodeTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_code_title expected to be basetypes.StringValue, was: %T`, smsCodeTitleAttribute))
	}

	smsCountryFieldLabelAttribute, ok := attributes["sms_country_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCountryFieldLabelVal, ok := smsCountryFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_field_label expected to be basetypes.StringValue, was: %T`, smsCountryFieldLabelAttribute))
	}

	smsCountryFormatAttribute, ok := attributes["sms_country_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_country_format is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsCountryFormatVal, ok := smsCountryFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_country_format expected to be basetypes.StringValue, was: %T`, smsCountryFormatAttribute))
	}

	smsHaveAccessCodeAttribute, ok := attributes["sms_have_access_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_have_access_code is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsHaveAccessCodeVal, ok := smsHaveAccessCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_have_access_code expected to be basetypes.StringValue, was: %T`, smsHaveAccessCodeAttribute))
	}

	smsMessageFormatAttribute, ok := attributes["sms_message_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_message_format is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsMessageFormatVal, ok := smsMessageFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_message_format expected to be basetypes.StringValue, was: %T`, smsMessageFormatAttribute))
	}

	smsNumberCancelAttribute, ok := attributes["sms_number_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_cancel is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsNumberCancelVal, ok := smsNumberCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_cancel expected to be basetypes.StringValue, was: %T`, smsNumberCancelAttribute))
	}

	smsNumberErrorAttribute, ok := attributes["sms_number_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsNumberErrorVal, ok := smsNumberErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_error expected to be basetypes.StringValue, was: %T`, smsNumberErrorAttribute))
	}

	smsNumberFieldLabelAttribute, ok := attributes["sms_number_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsNumberFieldLabelVal, ok := smsNumberFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_field_label expected to be basetypes.StringValue, was: %T`, smsNumberFieldLabelAttribute))
	}

	smsNumberFormatAttribute, ok := attributes["sms_number_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_format is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsNumberFormatVal, ok := smsNumberFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_format expected to be basetypes.StringValue, was: %T`, smsNumberFormatAttribute))
	}

	smsNumberMessageAttribute, ok := attributes["sms_number_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_message is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsNumberMessageVal, ok := smsNumberMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_message expected to be basetypes.StringValue, was: %T`, smsNumberMessageAttribute))
	}

	smsNumberSubmitAttribute, ok := attributes["sms_number_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_submit is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsNumberSubmitVal, ok := smsNumberSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_submit expected to be basetypes.StringValue, was: %T`, smsNumberSubmitAttribute))
	}

	smsNumberTitleAttribute, ok := attributes["sms_number_title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_number_title is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsNumberTitleVal, ok := smsNumberTitleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_number_title expected to be basetypes.StringValue, was: %T`, smsNumberTitleAttribute))
	}

	smsUsernameFormatAttribute, ok := attributes["sms_username_format"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sms_username_format is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	smsUsernameFormatVal, ok := smsUsernameFormatAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sms_username_format expected to be basetypes.StringValue, was: %T`, smsUsernameFormatAttribute))
	}

	sponsorBackLinkAttribute, ok := attributes["sponsor_back_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_back_link is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorBackLinkVal, ok := sponsorBackLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_back_link expected to be basetypes.StringValue, was: %T`, sponsorBackLinkAttribute))
	}

	sponsorCancelAttribute, ok := attributes["sponsor_cancel"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_cancel is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorCancelVal, ok := sponsorCancelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_cancel expected to be basetypes.StringValue, was: %T`, sponsorCancelAttribute))
	}

	sponsorEmailAttribute, ok := attributes["sponsor_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorEmailVal, ok := sponsorEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email expected to be basetypes.StringValue, was: %T`, sponsorEmailAttribute))
	}

	sponsorEmailErrorAttribute, ok := attributes["sponsor_email_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_email_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorEmailErrorVal, ok := sponsorEmailErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_email_error expected to be basetypes.StringValue, was: %T`, sponsorEmailErrorAttribute))
	}

	sponsorInfoApprovedAttribute, ok := attributes["sponsor_info_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_approved is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorInfoApprovedVal, ok := sponsorInfoApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_approved expected to be basetypes.StringValue, was: %T`, sponsorInfoApprovedAttribute))
	}

	sponsorInfoDeniedAttribute, ok := attributes["sponsor_info_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_denied is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorInfoDeniedVal, ok := sponsorInfoDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_denied expected to be basetypes.StringValue, was: %T`, sponsorInfoDeniedAttribute))
	}

	sponsorInfoPendingAttribute, ok := attributes["sponsor_info_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_info_pending is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorInfoPendingVal, ok := sponsorInfoPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_info_pending expected to be basetypes.StringValue, was: %T`, sponsorInfoPendingAttribute))
	}

	sponsorNameAttribute, ok := attributes["sponsor_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorNameVal, ok := sponsorNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name expected to be basetypes.StringValue, was: %T`, sponsorNameAttribute))
	}

	sponsorNameErrorAttribute, ok := attributes["sponsor_name_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_name_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorNameErrorVal, ok := sponsorNameErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_name_error expected to be basetypes.StringValue, was: %T`, sponsorNameErrorAttribute))
	}

	sponsorNotePendingAttribute, ok := attributes["sponsor_note_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_note_pending is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorNotePendingVal, ok := sponsorNotePendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_note_pending expected to be basetypes.StringValue, was: %T`, sponsorNotePendingAttribute))
	}

	sponsorRequestAccessAttribute, ok := attributes["sponsor_request_access"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_request_access is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorRequestAccessVal, ok := sponsorRequestAccessAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_request_access expected to be basetypes.StringValue, was: %T`, sponsorRequestAccessAttribute))
	}

	sponsorStatusApprovedAttribute, ok := attributes["sponsor_status_approved"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_approved is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorStatusApprovedVal, ok := sponsorStatusApprovedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_approved expected to be basetypes.StringValue, was: %T`, sponsorStatusApprovedAttribute))
	}

	sponsorStatusDeniedAttribute, ok := attributes["sponsor_status_denied"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_denied is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorStatusDeniedVal, ok := sponsorStatusDeniedAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_denied expected to be basetypes.StringValue, was: %T`, sponsorStatusDeniedAttribute))
	}

	sponsorStatusPendingAttribute, ok := attributes["sponsor_status_pending"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_status_pending is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorStatusPendingVal, ok := sponsorStatusPendingAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_status_pending expected to be basetypes.StringValue, was: %T`, sponsorStatusPendingAttribute))
	}

	sponsorSubmitAttribute, ok := attributes["sponsor_submit"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsor_submit is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorSubmitVal, ok := sponsorSubmitAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsor_submit expected to be basetypes.StringValue, was: %T`, sponsorSubmitAttribute))
	}

	sponsorsErrorAttribute, ok := attributes["sponsors_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorsErrorVal, ok := sponsorsErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_error expected to be basetypes.StringValue, was: %T`, sponsorsErrorAttribute))
	}

	sponsorsFieldLabelAttribute, ok := attributes["sponsors_field_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sponsors_field_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	sponsorsFieldLabelVal, ok := sponsorsFieldLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sponsors_field_label expected to be basetypes.StringValue, was: %T`, sponsorsFieldLabelAttribute))
	}

	tosAcceptLabelAttribute, ok := attributes["tos_accept_label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_accept_label is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	tosAcceptLabelVal, ok := tosAcceptLabelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_accept_label expected to be basetypes.StringValue, was: %T`, tosAcceptLabelAttribute))
	}

	tosErrorAttribute, ok := attributes["tos_error"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_error is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	tosErrorVal, ok := tosErrorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_error expected to be basetypes.StringValue, was: %T`, tosErrorAttribute))
	}

	tosLinkAttribute, ok := attributes["tos_link"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_link is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	tosLinkVal, ok := tosLinkAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_link expected to be basetypes.StringValue, was: %T`, tosLinkAttribute))
	}

	tosTextAttribute, ok := attributes["tos_text"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tos_text is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	tosTextVal, ok := tosTextAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tos_text expected to be basetypes.StringValue, was: %T`, tosTextAttribute))
	}

	uthButtonAmazonAttribute, ok := attributes["uth_button_amazon"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uth_button_amazon is missing from object`)

		return NewLocalesValueUnknown(), diags
	}

	uthButtonAmazonVal, ok := uthButtonAmazonAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uth_button_amazon expected to be basetypes.StringValue, was: %T`, uthButtonAmazonAttribute))
	}

	if diags.HasError() {
		return NewLocalesValueUnknown(), diags
	}

	return LocalesValue{
		AuthButtonAmazon:         authButtonAmazonVal,
		AuthButtonAzure:          authButtonAzureVal,
		AuthButtonEmail:          authButtonEmailVal,
		AuthButtonFacebook:       authButtonFacebookVal,
		AuthButtonGoogle:         authButtonGoogleVal,
		AuthButtonMicrosoft:      authButtonMicrosoftVal,
		AuthButtonPassphrase:     authButtonPassphraseVal,
		AuthButtonSms:            authButtonSmsVal,
		AuthButtonSponsor:        authButtonSponsorVal,
		AuthLabel:                authLabelVal,
		BackLink:                 backLinkVal,
		CompanyError:             companyErrorVal,
		CompanyLabel:             companyLabelVal,
		EmailAccessDomainError:   emailAccessDomainErrorVal,
		EmailCancel:              emailCancelVal,
		EmailCodeCancel:          emailCodeCancelVal,
		EmailCodeError:           emailCodeErrorVal,
		EmailCodeFieldLabel:      emailCodeFieldLabelVal,
		EmailCodeMessage:         emailCodeMessageVal,
		EmailCodeSubmit:          emailCodeSubmitVal,
		EmailCodeTitle:           emailCodeTitleVal,
		EmailError:               emailErrorVal,
		EmailFieldLabel:          emailFieldLabelVal,
		EmailLabel:               emailLabelVal,
		EmailMessage:             emailMessageVal,
		EmailSubmit:              emailSubmitVal,
		EmailTitle:               emailTitleVal,
		Field1error:              field1errorVal,
		Field1label:              field1labelVal,
		Field2error:              field2errorVal,
		Field2label:              field2labelVal,
		Field3error:              field3errorVal,
		Field3label:              field3labelVal,
		Field4error:              field4errorVal,
		Field4label:              field4labelVal,
		Message:                  messageVal,
		NameError:                nameErrorVal,
		NameLabel:                nameLabelVal,
		OptoutLabel:              optoutLabelVal,
		PageTitle:                pageTitleVal,
		PassphraseCancel:         passphraseCancelVal,
		PassphraseError:          passphraseErrorVal,
		PassphraseLabel:          passphraseLabelVal,
		PassphraseMessage:        passphraseMessageVal,
		PassphraseSubmit:         passphraseSubmitVal,
		PassphraseTitle:          passphraseTitleVal,
		PrivacyPolicyAcceptLabel: privacyPolicyAcceptLabelVal,
		PrivacyPolicyError:       privacyPolicyErrorVal,
		PrivacyPolicyLink:        privacyPolicyLinkVal,
		PrivacyPolicyText:        privacyPolicyTextVal,
		RequiredFieldLabel:       requiredFieldLabelVal,
		SignInLabel:              signInLabelVal,
		SmsCarrierDefault:        smsCarrierDefaultVal,
		SmsCarrierError:          smsCarrierErrorVal,
		SmsCarrierFieldLabel:     smsCarrierFieldLabelVal,
		SmsCodeCancel:            smsCodeCancelVal,
		SmsCodeError:             smsCodeErrorVal,
		SmsCodeFieldLabel:        smsCodeFieldLabelVal,
		SmsCodeMessage:           smsCodeMessageVal,
		SmsCodeSubmit:            smsCodeSubmitVal,
		SmsCodeTitle:             smsCodeTitleVal,
		SmsCountryFieldLabel:     smsCountryFieldLabelVal,
		SmsCountryFormat:         smsCountryFormatVal,
		SmsHaveAccessCode:        smsHaveAccessCodeVal,
		SmsMessageFormat:         smsMessageFormatVal,
		SmsNumberCancel:          smsNumberCancelVal,
		SmsNumberError:           smsNumberErrorVal,
		SmsNumberFieldLabel:      smsNumberFieldLabelVal,
		SmsNumberFormat:          smsNumberFormatVal,
		SmsNumberMessage:         smsNumberMessageVal,
		SmsNumberSubmit:          smsNumberSubmitVal,
		SmsNumberTitle:           smsNumberTitleVal,
		SmsUsernameFormat:        smsUsernameFormatVal,
		SponsorBackLink:          sponsorBackLinkVal,
		SponsorCancel:            sponsorCancelVal,
		SponsorEmail:             sponsorEmailVal,
		SponsorEmailError:        sponsorEmailErrorVal,
		SponsorInfoApproved:      sponsorInfoApprovedVal,
		SponsorInfoDenied:        sponsorInfoDeniedVal,
		SponsorInfoPending:       sponsorInfoPendingVal,
		SponsorName:              sponsorNameVal,
		SponsorNameError:         sponsorNameErrorVal,
		SponsorNotePending:       sponsorNotePendingVal,
		SponsorRequestAccess:     sponsorRequestAccessVal,
		SponsorStatusApproved:    sponsorStatusApprovedVal,
		SponsorStatusDenied:      sponsorStatusDeniedVal,
		SponsorStatusPending:     sponsorStatusPendingVal,
		SponsorSubmit:            sponsorSubmitVal,
		SponsorsError:            sponsorsErrorVal,
		SponsorsFieldLabel:       sponsorsFieldLabelVal,
		TosAcceptLabel:           tosAcceptLabelVal,
		TosError:                 tosErrorVal,
		TosLink:                  tosLinkVal,
		TosText:                  tosTextVal,
		UthButtonAmazon:          uthButtonAmazonVal,
		state:                    attr.ValueStateKnown,
	}, diags
}

func NewLocalesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LocalesValue {
	object, diags := NewLocalesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLocalesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LocalesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLocalesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLocalesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLocalesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLocalesValueMust(LocalesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LocalesType) ValueType(ctx context.Context) attr.Value {
	return LocalesValue{}
}

var _ basetypes.ObjectValuable = LocalesValue{}

type LocalesValue struct {
	AuthButtonAmazon         basetypes.StringValue `tfsdk:"auth_button_amazon"`
	AuthButtonAzure          basetypes.StringValue `tfsdk:"auth_button_azure"`
	AuthButtonEmail          basetypes.StringValue `tfsdk:"auth_button_email"`
	AuthButtonFacebook       basetypes.StringValue `tfsdk:"auth_button_facebook"`
	AuthButtonGoogle         basetypes.StringValue `tfsdk:"auth_button_google"`
	AuthButtonMicrosoft      basetypes.StringValue `tfsdk:"auth_button_microsoft"`
	AuthButtonPassphrase     basetypes.StringValue `tfsdk:"auth_button_passphrase"`
	AuthButtonSms            basetypes.StringValue `tfsdk:"auth_button_sms"`
	AuthButtonSponsor        basetypes.StringValue `tfsdk:"auth_button_sponsor"`
	AuthLabel                basetypes.StringValue `tfsdk:"auth_label"`
	BackLink                 basetypes.StringValue `tfsdk:"back_link"`
	CompanyError             basetypes.StringValue `tfsdk:"company_error"`
	CompanyLabel             basetypes.StringValue `tfsdk:"company_label"`
	EmailAccessDomainError   basetypes.StringValue `tfsdk:"email_access_domain_error"`
	EmailCancel              basetypes.StringValue `tfsdk:"email_cancel"`
	EmailCodeCancel          basetypes.StringValue `tfsdk:"email_code_cancel"`
	EmailCodeError           basetypes.StringValue `tfsdk:"email_code_error"`
	EmailCodeFieldLabel      basetypes.StringValue `tfsdk:"email_code_field_label"`
	EmailCodeMessage         basetypes.StringValue `tfsdk:"email_code_message"`
	EmailCodeSubmit          basetypes.StringValue `tfsdk:"email_code_submit"`
	EmailCodeTitle           basetypes.StringValue `tfsdk:"email_code_title"`
	EmailError               basetypes.StringValue `tfsdk:"email_error"`
	EmailFieldLabel          basetypes.StringValue `tfsdk:"email_field_label"`
	EmailLabel               basetypes.StringValue `tfsdk:"email_label"`
	EmailMessage             basetypes.StringValue `tfsdk:"email_message"`
	EmailSubmit              basetypes.StringValue `tfsdk:"email_submit"`
	EmailTitle               basetypes.StringValue `tfsdk:"email_title"`
	Field1error              basetypes.StringValue `tfsdk:"field1error"`
	Field1label              basetypes.StringValue `tfsdk:"field1label"`
	Field2error              basetypes.StringValue `tfsdk:"field2error"`
	Field2label              basetypes.StringValue `tfsdk:"field2label"`
	Field3error              basetypes.StringValue `tfsdk:"field3error"`
	Field3label              basetypes.StringValue `tfsdk:"field3label"`
	Field4error              basetypes.StringValue `tfsdk:"field4error"`
	Field4label              basetypes.StringValue `tfsdk:"field4label"`
	Message                  basetypes.StringValue `tfsdk:"message"`
	NameError                basetypes.StringValue `tfsdk:"name_error"`
	NameLabel                basetypes.StringValue `tfsdk:"name_label"`
	OptoutLabel              basetypes.StringValue `tfsdk:"optout_label"`
	PageTitle                basetypes.StringValue `tfsdk:"page_title"`
	PassphraseCancel         basetypes.StringValue `tfsdk:"passphrase_cancel"`
	PassphraseError          basetypes.StringValue `tfsdk:"passphrase_error"`
	PassphraseLabel          basetypes.StringValue `tfsdk:"passphrase_label"`
	PassphraseMessage        basetypes.StringValue `tfsdk:"passphrase_message"`
	PassphraseSubmit         basetypes.StringValue `tfsdk:"passphrase_submit"`
	PassphraseTitle          basetypes.StringValue `tfsdk:"passphrase_title"`
	PrivacyPolicyAcceptLabel basetypes.StringValue `tfsdk:"privacy_policy_accept_label"`
	PrivacyPolicyError       basetypes.StringValue `tfsdk:"privacy_policy_error"`
	PrivacyPolicyLink        basetypes.StringValue `tfsdk:"privacy_policy_link"`
	PrivacyPolicyText        basetypes.StringValue `tfsdk:"privacy_policy_text"`
	RequiredFieldLabel       basetypes.StringValue `tfsdk:"required_field_label"`
	SignInLabel              basetypes.StringValue `tfsdk:"sign_in_label"`
	SmsCarrierDefault        basetypes.StringValue `tfsdk:"sms_carrier_default"`
	SmsCarrierError          basetypes.StringValue `tfsdk:"sms_carrier_error"`
	SmsCarrierFieldLabel     basetypes.StringValue `tfsdk:"sms_carrier_field_label"`
	SmsCodeCancel            basetypes.StringValue `tfsdk:"sms_code_cancel"`
	SmsCodeError             basetypes.StringValue `tfsdk:"sms_code_error"`
	SmsCodeFieldLabel        basetypes.StringValue `tfsdk:"sms_code_field_label"`
	SmsCodeMessage           basetypes.StringValue `tfsdk:"sms_code_message"`
	SmsCodeSubmit            basetypes.StringValue `tfsdk:"sms_code_submit"`
	SmsCodeTitle             basetypes.StringValue `tfsdk:"sms_code_title"`
	SmsCountryFieldLabel     basetypes.StringValue `tfsdk:"sms_country_field_label"`
	SmsCountryFormat         basetypes.StringValue `tfsdk:"sms_country_format"`
	SmsHaveAccessCode        basetypes.StringValue `tfsdk:"sms_have_access_code"`
	SmsMessageFormat         basetypes.StringValue `tfsdk:"sms_message_format"`
	SmsNumberCancel          basetypes.StringValue `tfsdk:"sms_number_cancel"`
	SmsNumberError           basetypes.StringValue `tfsdk:"sms_number_error"`
	SmsNumberFieldLabel      basetypes.StringValue `tfsdk:"sms_number_field_label"`
	SmsNumberFormat          basetypes.StringValue `tfsdk:"sms_number_format"`
	SmsNumberMessage         basetypes.StringValue `tfsdk:"sms_number_message"`
	SmsNumberSubmit          basetypes.StringValue `tfsdk:"sms_number_submit"`
	SmsNumberTitle           basetypes.StringValue `tfsdk:"sms_number_title"`
	SmsUsernameFormat        basetypes.StringValue `tfsdk:"sms_username_format"`
	SponsorBackLink          basetypes.StringValue `tfsdk:"sponsor_back_link"`
	SponsorCancel            basetypes.StringValue `tfsdk:"sponsor_cancel"`
	SponsorEmail             basetypes.StringValue `tfsdk:"sponsor_email"`
	SponsorEmailError        basetypes.StringValue `tfsdk:"sponsor_email_error"`
	SponsorInfoApproved      basetypes.StringValue `tfsdk:"sponsor_info_approved"`
	SponsorInfoDenied        basetypes.StringValue `tfsdk:"sponsor_info_denied"`
	SponsorInfoPending       basetypes.StringValue `tfsdk:"sponsor_info_pending"`
	SponsorName              basetypes.StringValue `tfsdk:"sponsor_name"`
	SponsorNameError         basetypes.StringValue `tfsdk:"sponsor_name_error"`
	SponsorNotePending       basetypes.StringValue `tfsdk:"sponsor_note_pending"`
	SponsorRequestAccess     basetypes.StringValue `tfsdk:"sponsor_request_access"`
	SponsorStatusApproved    basetypes.StringValue `tfsdk:"sponsor_status_approved"`
	SponsorStatusDenied      basetypes.StringValue `tfsdk:"sponsor_status_denied"`
	SponsorStatusPending     basetypes.StringValue `tfsdk:"sponsor_status_pending"`
	SponsorSubmit            basetypes.StringValue `tfsdk:"sponsor_submit"`
	SponsorsError            basetypes.StringValue `tfsdk:"sponsors_error"`
	SponsorsFieldLabel       basetypes.StringValue `tfsdk:"sponsors_field_label"`
	TosAcceptLabel           basetypes.StringValue `tfsdk:"tos_accept_label"`
	TosError                 basetypes.StringValue `tfsdk:"tos_error"`
	TosLink                  basetypes.StringValue `tfsdk:"tos_link"`
	TosText                  basetypes.StringValue `tfsdk:"tos_text"`
	UthButtonAmazon          basetypes.StringValue `tfsdk:"uth_button_amazon"`
	state                    attr.ValueState
}

func (v LocalesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 95)

	var val tftypes.Value
	var err error

	attrTypes["auth_button_amazon"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_azure"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_facebook"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_google"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_microsoft"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_passphrase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_sms"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_button_sponsor"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["back_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["company_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["company_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_access_domain_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_code_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["email_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field1error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field1label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field2error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field2label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field3error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field3label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field4error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field4label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["optout_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["page_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["passphrase_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["privacy_policy_accept_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["privacy_policy_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["privacy_policy_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["privacy_policy_text"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["required_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sign_in_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_carrier_default"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_carrier_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_carrier_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_code_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_country_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_country_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_have_access_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_message_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_number_title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sms_username_format"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_back_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_cancel"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_email_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_info_approved"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_info_denied"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_info_pending"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_name_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_note_pending"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_request_access"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_status_approved"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_status_denied"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_status_pending"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsor_submit"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsors_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sponsors_field_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos_accept_label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos_error"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos_link"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tos_text"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uth_button_amazon"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 95)

		val, err = v.AuthButtonAmazon.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_amazon"] = val

		val, err = v.AuthButtonAzure.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_azure"] = val

		val, err = v.AuthButtonEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_email"] = val

		val, err = v.AuthButtonFacebook.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_facebook"] = val

		val, err = v.AuthButtonGoogle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_google"] = val

		val, err = v.AuthButtonMicrosoft.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_microsoft"] = val

		val, err = v.AuthButtonPassphrase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_passphrase"] = val

		val, err = v.AuthButtonSms.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_sms"] = val

		val, err = v.AuthButtonSponsor.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_button_sponsor"] = val

		val, err = v.AuthLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_label"] = val

		val, err = v.BackLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["back_link"] = val

		val, err = v.CompanyError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["company_error"] = val

		val, err = v.CompanyLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["company_label"] = val

		val, err = v.EmailAccessDomainError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_access_domain_error"] = val

		val, err = v.EmailCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_cancel"] = val

		val, err = v.EmailCodeCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_cancel"] = val

		val, err = v.EmailCodeError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_error"] = val

		val, err = v.EmailCodeFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_field_label"] = val

		val, err = v.EmailCodeMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_message"] = val

		val, err = v.EmailCodeSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_submit"] = val

		val, err = v.EmailCodeTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_code_title"] = val

		val, err = v.EmailError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_error"] = val

		val, err = v.EmailFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_field_label"] = val

		val, err = v.EmailLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_label"] = val

		val, err = v.EmailMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_message"] = val

		val, err = v.EmailSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_submit"] = val

		val, err = v.EmailTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email_title"] = val

		val, err = v.Field1error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field1error"] = val

		val, err = v.Field1label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field1label"] = val

		val, err = v.Field2error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field2error"] = val

		val, err = v.Field2label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field2label"] = val

		val, err = v.Field3error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field3error"] = val

		val, err = v.Field3label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field3label"] = val

		val, err = v.Field4error.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field4error"] = val

		val, err = v.Field4label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field4label"] = val

		val, err = v.Message.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["message"] = val

		val, err = v.NameError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name_error"] = val

		val, err = v.NameLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name_label"] = val

		val, err = v.OptoutLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["optout_label"] = val

		val, err = v.PageTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["page_title"] = val

		val, err = v.PassphraseCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_cancel"] = val

		val, err = v.PassphraseError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_error"] = val

		val, err = v.PassphraseLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_label"] = val

		val, err = v.PassphraseMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_message"] = val

		val, err = v.PassphraseSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_submit"] = val

		val, err = v.PassphraseTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["passphrase_title"] = val

		val, err = v.PrivacyPolicyAcceptLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_accept_label"] = val

		val, err = v.PrivacyPolicyError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_error"] = val

		val, err = v.PrivacyPolicyLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_link"] = val

		val, err = v.PrivacyPolicyText.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["privacy_policy_text"] = val

		val, err = v.RequiredFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["required_field_label"] = val

		val, err = v.SignInLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sign_in_label"] = val

		val, err = v.SmsCarrierDefault.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_carrier_default"] = val

		val, err = v.SmsCarrierError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_carrier_error"] = val

		val, err = v.SmsCarrierFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_carrier_field_label"] = val

		val, err = v.SmsCodeCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_cancel"] = val

		val, err = v.SmsCodeError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_error"] = val

		val, err = v.SmsCodeFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_field_label"] = val

		val, err = v.SmsCodeMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_message"] = val

		val, err = v.SmsCodeSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_submit"] = val

		val, err = v.SmsCodeTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_code_title"] = val

		val, err = v.SmsCountryFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_country_field_label"] = val

		val, err = v.SmsCountryFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_country_format"] = val

		val, err = v.SmsHaveAccessCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_have_access_code"] = val

		val, err = v.SmsMessageFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_message_format"] = val

		val, err = v.SmsNumberCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_cancel"] = val

		val, err = v.SmsNumberError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_error"] = val

		val, err = v.SmsNumberFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_field_label"] = val

		val, err = v.SmsNumberFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_format"] = val

		val, err = v.SmsNumberMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_message"] = val

		val, err = v.SmsNumberSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_submit"] = val

		val, err = v.SmsNumberTitle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_number_title"] = val

		val, err = v.SmsUsernameFormat.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sms_username_format"] = val

		val, err = v.SponsorBackLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_back_link"] = val

		val, err = v.SponsorCancel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_cancel"] = val

		val, err = v.SponsorEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_email"] = val

		val, err = v.SponsorEmailError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_email_error"] = val

		val, err = v.SponsorInfoApproved.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_info_approved"] = val

		val, err = v.SponsorInfoDenied.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_info_denied"] = val

		val, err = v.SponsorInfoPending.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_info_pending"] = val

		val, err = v.SponsorName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_name"] = val

		val, err = v.SponsorNameError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_name_error"] = val

		val, err = v.SponsorNotePending.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_note_pending"] = val

		val, err = v.SponsorRequestAccess.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_request_access"] = val

		val, err = v.SponsorStatusApproved.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_status_approved"] = val

		val, err = v.SponsorStatusDenied.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_status_denied"] = val

		val, err = v.SponsorStatusPending.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_status_pending"] = val

		val, err = v.SponsorSubmit.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsor_submit"] = val

		val, err = v.SponsorsError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsors_error"] = val

		val, err = v.SponsorsFieldLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sponsors_field_label"] = val

		val, err = v.TosAcceptLabel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_accept_label"] = val

		val, err = v.TosError.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_error"] = val

		val, err = v.TosLink.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_link"] = val

		val, err = v.TosText.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tos_text"] = val

		val, err = v.UthButtonAmazon.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uth_button_amazon"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LocalesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LocalesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LocalesValue) String() string {
	return "LocalesValue"
}

func (v LocalesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"auth_button_amazon":          basetypes.StringType{},
		"auth_button_azure":           basetypes.StringType{},
		"auth_button_email":           basetypes.StringType{},
		"auth_button_facebook":        basetypes.StringType{},
		"auth_button_google":          basetypes.StringType{},
		"auth_button_microsoft":       basetypes.StringType{},
		"auth_button_passphrase":      basetypes.StringType{},
		"auth_button_sms":             basetypes.StringType{},
		"auth_button_sponsor":         basetypes.StringType{},
		"auth_label":                  basetypes.StringType{},
		"back_link":                   basetypes.StringType{},
		"company_error":               basetypes.StringType{},
		"company_label":               basetypes.StringType{},
		"email_access_domain_error":   basetypes.StringType{},
		"email_cancel":                basetypes.StringType{},
		"email_code_cancel":           basetypes.StringType{},
		"email_code_error":            basetypes.StringType{},
		"email_code_field_label":      basetypes.StringType{},
		"email_code_message":          basetypes.StringType{},
		"email_code_submit":           basetypes.StringType{},
		"email_code_title":            basetypes.StringType{},
		"email_error":                 basetypes.StringType{},
		"email_field_label":           basetypes.StringType{},
		"email_label":                 basetypes.StringType{},
		"email_message":               basetypes.StringType{},
		"email_submit":                basetypes.StringType{},
		"email_title":                 basetypes.StringType{},
		"field1error":                 basetypes.StringType{},
		"field1label":                 basetypes.StringType{},
		"field2error":                 basetypes.StringType{},
		"field2label":                 basetypes.StringType{},
		"field3error":                 basetypes.StringType{},
		"field3label":                 basetypes.StringType{},
		"field4error":                 basetypes.StringType{},
		"field4label":                 basetypes.StringType{},
		"message":                     basetypes.StringType{},
		"name_error":                  basetypes.StringType{},
		"name_label":                  basetypes.StringType{},
		"optout_label":                basetypes.StringType{},
		"page_title":                  basetypes.StringType{},
		"passphrase_cancel":           basetypes.StringType{},
		"passphrase_error":            basetypes.StringType{},
		"passphrase_label":            basetypes.StringType{},
		"passphrase_message":          basetypes.StringType{},
		"passphrase_submit":           basetypes.StringType{},
		"passphrase_title":            basetypes.StringType{},
		"privacy_policy_accept_label": basetypes.StringType{},
		"privacy_policy_error":        basetypes.StringType{},
		"privacy_policy_link":         basetypes.StringType{},
		"privacy_policy_text":         basetypes.StringType{},
		"required_field_label":        basetypes.StringType{},
		"sign_in_label":               basetypes.StringType{},
		"sms_carrier_default":         basetypes.StringType{},
		"sms_carrier_error":           basetypes.StringType{},
		"sms_carrier_field_label":     basetypes.StringType{},
		"sms_code_cancel":             basetypes.StringType{},
		"sms_code_error":              basetypes.StringType{},
		"sms_code_field_label":        basetypes.StringType{},
		"sms_code_message":            basetypes.StringType{},
		"sms_code_submit":             basetypes.StringType{},
		"sms_code_title":              basetypes.StringType{},
		"sms_country_field_label":     basetypes.StringType{},
		"sms_country_format":          basetypes.StringType{},
		"sms_have_access_code":        basetypes.StringType{},
		"sms_message_format":          basetypes.StringType{},
		"sms_number_cancel":           basetypes.StringType{},
		"sms_number_error":            basetypes.StringType{},
		"sms_number_field_label":      basetypes.StringType{},
		"sms_number_format":           basetypes.StringType{},
		"sms_number_message":          basetypes.StringType{},
		"sms_number_submit":           basetypes.StringType{},
		"sms_number_title":            basetypes.StringType{},
		"sms_username_format":         basetypes.StringType{},
		"sponsor_back_link":           basetypes.StringType{},
		"sponsor_cancel":              basetypes.StringType{},
		"sponsor_email":               basetypes.StringType{},
		"sponsor_email_error":         basetypes.StringType{},
		"sponsor_info_approved":       basetypes.StringType{},
		"sponsor_info_denied":         basetypes.StringType{},
		"sponsor_info_pending":        basetypes.StringType{},
		"sponsor_name":                basetypes.StringType{},
		"sponsor_name_error":          basetypes.StringType{},
		"sponsor_note_pending":        basetypes.StringType{},
		"sponsor_request_access":      basetypes.StringType{},
		"sponsor_status_approved":     basetypes.StringType{},
		"sponsor_status_denied":       basetypes.StringType{},
		"sponsor_status_pending":      basetypes.StringType{},
		"sponsor_submit":              basetypes.StringType{},
		"sponsors_error":              basetypes.StringType{},
		"sponsors_field_label":        basetypes.StringType{},
		"tos_accept_label":            basetypes.StringType{},
		"tos_error":                   basetypes.StringType{},
		"tos_link":                    basetypes.StringType{},
		"tos_text":                    basetypes.StringType{},
		"uth_button_amazon":           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"auth_button_amazon":          v.AuthButtonAmazon,
			"auth_button_azure":           v.AuthButtonAzure,
			"auth_button_email":           v.AuthButtonEmail,
			"auth_button_facebook":        v.AuthButtonFacebook,
			"auth_button_google":          v.AuthButtonGoogle,
			"auth_button_microsoft":       v.AuthButtonMicrosoft,
			"auth_button_passphrase":      v.AuthButtonPassphrase,
			"auth_button_sms":             v.AuthButtonSms,
			"auth_button_sponsor":         v.AuthButtonSponsor,
			"auth_label":                  v.AuthLabel,
			"back_link":                   v.BackLink,
			"company_error":               v.CompanyError,
			"company_label":               v.CompanyLabel,
			"email_access_domain_error":   v.EmailAccessDomainError,
			"email_cancel":                v.EmailCancel,
			"email_code_cancel":           v.EmailCodeCancel,
			"email_code_error":            v.EmailCodeError,
			"email_code_field_label":      v.EmailCodeFieldLabel,
			"email_code_message":          v.EmailCodeMessage,
			"email_code_submit":           v.EmailCodeSubmit,
			"email_code_title":            v.EmailCodeTitle,
			"email_error":                 v.EmailError,
			"email_field_label":           v.EmailFieldLabel,
			"email_label":                 v.EmailLabel,
			"email_message":               v.EmailMessage,
			"email_submit":                v.EmailSubmit,
			"email_title":                 v.EmailTitle,
			"field1error":                 v.Field1error,
			"field1label":                 v.Field1label,
			"field2error":                 v.Field2error,
			"field2label":                 v.Field2label,
			"field3error":                 v.Field3error,
			"field3label":                 v.Field3label,
			"field4error":                 v.Field4error,
			"field4label":                 v.Field4label,
			"message":                     v.Message,
			"name_error":                  v.NameError,
			"name_label":                  v.NameLabel,
			"optout_label":                v.OptoutLabel,
			"page_title":                  v.PageTitle,
			"passphrase_cancel":           v.PassphraseCancel,
			"passphrase_error":            v.PassphraseError,
			"passphrase_label":            v.PassphraseLabel,
			"passphrase_message":          v.PassphraseMessage,
			"passphrase_submit":           v.PassphraseSubmit,
			"passphrase_title":            v.PassphraseTitle,
			"privacy_policy_accept_label": v.PrivacyPolicyAcceptLabel,
			"privacy_policy_error":        v.PrivacyPolicyError,
			"privacy_policy_link":         v.PrivacyPolicyLink,
			"privacy_policy_text":         v.PrivacyPolicyText,
			"required_field_label":        v.RequiredFieldLabel,
			"sign_in_label":               v.SignInLabel,
			"sms_carrier_default":         v.SmsCarrierDefault,
			"sms_carrier_error":           v.SmsCarrierError,
			"sms_carrier_field_label":     v.SmsCarrierFieldLabel,
			"sms_code_cancel":             v.SmsCodeCancel,
			"sms_code_error":              v.SmsCodeError,
			"sms_code_field_label":        v.SmsCodeFieldLabel,
			"sms_code_message":            v.SmsCodeMessage,
			"sms_code_submit":             v.SmsCodeSubmit,
			"sms_code_title":              v.SmsCodeTitle,
			"sms_country_field_label":     v.SmsCountryFieldLabel,
			"sms_country_format":          v.SmsCountryFormat,
			"sms_have_access_code":        v.SmsHaveAccessCode,
			"sms_message_format":          v.SmsMessageFormat,
			"sms_number_cancel":           v.SmsNumberCancel,
			"sms_number_error":            v.SmsNumberError,
			"sms_number_field_label":      v.SmsNumberFieldLabel,
			"sms_number_format":           v.SmsNumberFormat,
			"sms_number_message":          v.SmsNumberMessage,
			"sms_number_submit":           v.SmsNumberSubmit,
			"sms_number_title":            v.SmsNumberTitle,
			"sms_username_format":         v.SmsUsernameFormat,
			"sponsor_back_link":           v.SponsorBackLink,
			"sponsor_cancel":              v.SponsorCancel,
			"sponsor_email":               v.SponsorEmail,
			"sponsor_email_error":         v.SponsorEmailError,
			"sponsor_info_approved":       v.SponsorInfoApproved,
			"sponsor_info_denied":         v.SponsorInfoDenied,
			"sponsor_info_pending":        v.SponsorInfoPending,
			"sponsor_name":                v.SponsorName,
			"sponsor_name_error":          v.SponsorNameError,
			"sponsor_note_pending":        v.SponsorNotePending,
			"sponsor_request_access":      v.SponsorRequestAccess,
			"sponsor_status_approved":     v.SponsorStatusApproved,
			"sponsor_status_denied":       v.SponsorStatusDenied,
			"sponsor_status_pending":      v.SponsorStatusPending,
			"sponsor_submit":              v.SponsorSubmit,
			"sponsors_error":              v.SponsorsError,
			"sponsors_field_label":        v.SponsorsFieldLabel,
			"tos_accept_label":            v.TosAcceptLabel,
			"tos_error":                   v.TosError,
			"tos_link":                    v.TosLink,
			"tos_text":                    v.TosText,
			"uth_button_amazon":           v.UthButtonAmazon,
		})

	return objVal, diags
}

func (v LocalesValue) Equal(o attr.Value) bool {
	other, ok := o.(LocalesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AuthButtonAmazon.Equal(other.AuthButtonAmazon) {
		return false
	}

	if !v.AuthButtonAzure.Equal(other.AuthButtonAzure) {
		return false
	}

	if !v.AuthButtonEmail.Equal(other.AuthButtonEmail) {
		return false
	}

	if !v.AuthButtonFacebook.Equal(other.AuthButtonFacebook) {
		return false
	}

	if !v.AuthButtonGoogle.Equal(other.AuthButtonGoogle) {
		return false
	}

	if !v.AuthButtonMicrosoft.Equal(other.AuthButtonMicrosoft) {
		return false
	}

	if !v.AuthButtonPassphrase.Equal(other.AuthButtonPassphrase) {
		return false
	}

	if !v.AuthButtonSms.Equal(other.AuthButtonSms) {
		return false
	}

	if !v.AuthButtonSponsor.Equal(other.AuthButtonSponsor) {
		return false
	}

	if !v.AuthLabel.Equal(other.AuthLabel) {
		return false
	}

	if !v.BackLink.Equal(other.BackLink) {
		return false
	}

	if !v.CompanyError.Equal(other.CompanyError) {
		return false
	}

	if !v.CompanyLabel.Equal(other.CompanyLabel) {
		return false
	}

	if !v.EmailAccessDomainError.Equal(other.EmailAccessDomainError) {
		return false
	}

	if !v.EmailCancel.Equal(other.EmailCancel) {
		return false
	}

	if !v.EmailCodeCancel.Equal(other.EmailCodeCancel) {
		return false
	}

	if !v.EmailCodeError.Equal(other.EmailCodeError) {
		return false
	}

	if !v.EmailCodeFieldLabel.Equal(other.EmailCodeFieldLabel) {
		return false
	}

	if !v.EmailCodeMessage.Equal(other.EmailCodeMessage) {
		return false
	}

	if !v.EmailCodeSubmit.Equal(other.EmailCodeSubmit) {
		return false
	}

	if !v.EmailCodeTitle.Equal(other.EmailCodeTitle) {
		return false
	}

	if !v.EmailError.Equal(other.EmailError) {
		return false
	}

	if !v.EmailFieldLabel.Equal(other.EmailFieldLabel) {
		return false
	}

	if !v.EmailLabel.Equal(other.EmailLabel) {
		return false
	}

	if !v.EmailMessage.Equal(other.EmailMessage) {
		return false
	}

	if !v.EmailSubmit.Equal(other.EmailSubmit) {
		return false
	}

	if !v.EmailTitle.Equal(other.EmailTitle) {
		return false
	}

	if !v.Field1error.Equal(other.Field1error) {
		return false
	}

	if !v.Field1label.Equal(other.Field1label) {
		return false
	}

	if !v.Field2error.Equal(other.Field2error) {
		return false
	}

	if !v.Field2label.Equal(other.Field2label) {
		return false
	}

	if !v.Field3error.Equal(other.Field3error) {
		return false
	}

	if !v.Field3label.Equal(other.Field3label) {
		return false
	}

	if !v.Field4error.Equal(other.Field4error) {
		return false
	}

	if !v.Field4label.Equal(other.Field4label) {
		return false
	}

	if !v.Message.Equal(other.Message) {
		return false
	}

	if !v.NameError.Equal(other.NameError) {
		return false
	}

	if !v.NameLabel.Equal(other.NameLabel) {
		return false
	}

	if !v.OptoutLabel.Equal(other.OptoutLabel) {
		return false
	}

	if !v.PageTitle.Equal(other.PageTitle) {
		return false
	}

	if !v.PassphraseCancel.Equal(other.PassphraseCancel) {
		return false
	}

	if !v.PassphraseError.Equal(other.PassphraseError) {
		return false
	}

	if !v.PassphraseLabel.Equal(other.PassphraseLabel) {
		return false
	}

	if !v.PassphraseMessage.Equal(other.PassphraseMessage) {
		return false
	}

	if !v.PassphraseSubmit.Equal(other.PassphraseSubmit) {
		return false
	}

	if !v.PassphraseTitle.Equal(other.PassphraseTitle) {
		return false
	}

	if !v.PrivacyPolicyAcceptLabel.Equal(other.PrivacyPolicyAcceptLabel) {
		return false
	}

	if !v.PrivacyPolicyError.Equal(other.PrivacyPolicyError) {
		return false
	}

	if !v.PrivacyPolicyLink.Equal(other.PrivacyPolicyLink) {
		return false
	}

	if !v.PrivacyPolicyText.Equal(other.PrivacyPolicyText) {
		return false
	}

	if !v.RequiredFieldLabel.Equal(other.RequiredFieldLabel) {
		return false
	}

	if !v.SignInLabel.Equal(other.SignInLabel) {
		return false
	}

	if !v.SmsCarrierDefault.Equal(other.SmsCarrierDefault) {
		return false
	}

	if !v.SmsCarrierError.Equal(other.SmsCarrierError) {
		return false
	}

	if !v.SmsCarrierFieldLabel.Equal(other.SmsCarrierFieldLabel) {
		return false
	}

	if !v.SmsCodeCancel.Equal(other.SmsCodeCancel) {
		return false
	}

	if !v.SmsCodeError.Equal(other.SmsCodeError) {
		return false
	}

	if !v.SmsCodeFieldLabel.Equal(other.SmsCodeFieldLabel) {
		return false
	}

	if !v.SmsCodeMessage.Equal(other.SmsCodeMessage) {
		return false
	}

	if !v.SmsCodeSubmit.Equal(other.SmsCodeSubmit) {
		return false
	}

	if !v.SmsCodeTitle.Equal(other.SmsCodeTitle) {
		return false
	}

	if !v.SmsCountryFieldLabel.Equal(other.SmsCountryFieldLabel) {
		return false
	}

	if !v.SmsCountryFormat.Equal(other.SmsCountryFormat) {
		return false
	}

	if !v.SmsHaveAccessCode.Equal(other.SmsHaveAccessCode) {
		return false
	}

	if !v.SmsMessageFormat.Equal(other.SmsMessageFormat) {
		return false
	}

	if !v.SmsNumberCancel.Equal(other.SmsNumberCancel) {
		return false
	}

	if !v.SmsNumberError.Equal(other.SmsNumberError) {
		return false
	}

	if !v.SmsNumberFieldLabel.Equal(other.SmsNumberFieldLabel) {
		return false
	}

	if !v.SmsNumberFormat.Equal(other.SmsNumberFormat) {
		return false
	}

	if !v.SmsNumberMessage.Equal(other.SmsNumberMessage) {
		return false
	}

	if !v.SmsNumberSubmit.Equal(other.SmsNumberSubmit) {
		return false
	}

	if !v.SmsNumberTitle.Equal(other.SmsNumberTitle) {
		return false
	}

	if !v.SmsUsernameFormat.Equal(other.SmsUsernameFormat) {
		return false
	}

	if !v.SponsorBackLink.Equal(other.SponsorBackLink) {
		return false
	}

	if !v.SponsorCancel.Equal(other.SponsorCancel) {
		return false
	}

	if !v.SponsorEmail.Equal(other.SponsorEmail) {
		return false
	}

	if !v.SponsorEmailError.Equal(other.SponsorEmailError) {
		return false
	}

	if !v.SponsorInfoApproved.Equal(other.SponsorInfoApproved) {
		return false
	}

	if !v.SponsorInfoDenied.Equal(other.SponsorInfoDenied) {
		return false
	}

	if !v.SponsorInfoPending.Equal(other.SponsorInfoPending) {
		return false
	}

	if !v.SponsorName.Equal(other.SponsorName) {
		return false
	}

	if !v.SponsorNameError.Equal(other.SponsorNameError) {
		return false
	}

	if !v.SponsorNotePending.Equal(other.SponsorNotePending) {
		return false
	}

	if !v.SponsorRequestAccess.Equal(other.SponsorRequestAccess) {
		return false
	}

	if !v.SponsorStatusApproved.Equal(other.SponsorStatusApproved) {
		return false
	}

	if !v.SponsorStatusDenied.Equal(other.SponsorStatusDenied) {
		return false
	}

	if !v.SponsorStatusPending.Equal(other.SponsorStatusPending) {
		return false
	}

	if !v.SponsorSubmit.Equal(other.SponsorSubmit) {
		return false
	}

	if !v.SponsorsError.Equal(other.SponsorsError) {
		return false
	}

	if !v.SponsorsFieldLabel.Equal(other.SponsorsFieldLabel) {
		return false
	}

	if !v.TosAcceptLabel.Equal(other.TosAcceptLabel) {
		return false
	}

	if !v.TosError.Equal(other.TosError) {
		return false
	}

	if !v.TosLink.Equal(other.TosLink) {
		return false
	}

	if !v.TosText.Equal(other.TosText) {
		return false
	}

	if !v.UthButtonAmazon.Equal(other.UthButtonAmazon) {
		return false
	}

	return true
}

func (v LocalesValue) Type(ctx context.Context) attr.Type {
	return LocalesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LocalesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"auth_button_amazon":          basetypes.StringType{},
		"auth_button_azure":           basetypes.StringType{},
		"auth_button_email":           basetypes.StringType{},
		"auth_button_facebook":        basetypes.StringType{},
		"auth_button_google":          basetypes.StringType{},
		"auth_button_microsoft":       basetypes.StringType{},
		"auth_button_passphrase":      basetypes.StringType{},
		"auth_button_sms":             basetypes.StringType{},
		"auth_button_sponsor":         basetypes.StringType{},
		"auth_label":                  basetypes.StringType{},
		"back_link":                   basetypes.StringType{},
		"company_error":               basetypes.StringType{},
		"company_label":               basetypes.StringType{},
		"email_access_domain_error":   basetypes.StringType{},
		"email_cancel":                basetypes.StringType{},
		"email_code_cancel":           basetypes.StringType{},
		"email_code_error":            basetypes.StringType{},
		"email_code_field_label":      basetypes.StringType{},
		"email_code_message":          basetypes.StringType{},
		"email_code_submit":           basetypes.StringType{},
		"email_code_title":            basetypes.StringType{},
		"email_error":                 basetypes.StringType{},
		"email_field_label":           basetypes.StringType{},
		"email_label":                 basetypes.StringType{},
		"email_message":               basetypes.StringType{},
		"email_submit":                basetypes.StringType{},
		"email_title":                 basetypes.StringType{},
		"field1error":                 basetypes.StringType{},
		"field1label":                 basetypes.StringType{},
		"field2error":                 basetypes.StringType{},
		"field2label":                 basetypes.StringType{},
		"field3error":                 basetypes.StringType{},
		"field3label":                 basetypes.StringType{},
		"field4error":                 basetypes.StringType{},
		"field4label":                 basetypes.StringType{},
		"message":                     basetypes.StringType{},
		"name_error":                  basetypes.StringType{},
		"name_label":                  basetypes.StringType{},
		"optout_label":                basetypes.StringType{},
		"page_title":                  basetypes.StringType{},
		"passphrase_cancel":           basetypes.StringType{},
		"passphrase_error":            basetypes.StringType{},
		"passphrase_label":            basetypes.StringType{},
		"passphrase_message":          basetypes.StringType{},
		"passphrase_submit":           basetypes.StringType{},
		"passphrase_title":            basetypes.StringType{},
		"privacy_policy_accept_label": basetypes.StringType{},
		"privacy_policy_error":        basetypes.StringType{},
		"privacy_policy_link":         basetypes.StringType{},
		"privacy_policy_text":         basetypes.StringType{},
		"required_field_label":        basetypes.StringType{},
		"sign_in_label":               basetypes.StringType{},
		"sms_carrier_default":         basetypes.StringType{},
		"sms_carrier_error":           basetypes.StringType{},
		"sms_carrier_field_label":     basetypes.StringType{},
		"sms_code_cancel":             basetypes.StringType{},
		"sms_code_error":              basetypes.StringType{},
		"sms_code_field_label":        basetypes.StringType{},
		"sms_code_message":            basetypes.StringType{},
		"sms_code_submit":             basetypes.StringType{},
		"sms_code_title":              basetypes.StringType{},
		"sms_country_field_label":     basetypes.StringType{},
		"sms_country_format":          basetypes.StringType{},
		"sms_have_access_code":        basetypes.StringType{},
		"sms_message_format":          basetypes.StringType{},
		"sms_number_cancel":           basetypes.StringType{},
		"sms_number_error":            basetypes.StringType{},
		"sms_number_field_label":      basetypes.StringType{},
		"sms_number_format":           basetypes.StringType{},
		"sms_number_message":          basetypes.StringType{},
		"sms_number_submit":           basetypes.StringType{},
		"sms_number_title":            basetypes.StringType{},
		"sms_username_format":         basetypes.StringType{},
		"sponsor_back_link":           basetypes.StringType{},
		"sponsor_cancel":              basetypes.StringType{},
		"sponsor_email":               basetypes.StringType{},
		"sponsor_email_error":         basetypes.StringType{},
		"sponsor_info_approved":       basetypes.StringType{},
		"sponsor_info_denied":         basetypes.StringType{},
		"sponsor_info_pending":        basetypes.StringType{},
		"sponsor_name":                basetypes.StringType{},
		"sponsor_name_error":          basetypes.StringType{},
		"sponsor_note_pending":        basetypes.StringType{},
		"sponsor_request_access":      basetypes.StringType{},
		"sponsor_status_approved":     basetypes.StringType{},
		"sponsor_status_denied":       basetypes.StringType{},
		"sponsor_status_pending":      basetypes.StringType{},
		"sponsor_submit":              basetypes.StringType{},
		"sponsors_error":              basetypes.StringType{},
		"sponsors_field_label":        basetypes.StringType{},
		"tos_accept_label":            basetypes.StringType{},
		"tos_error":                   basetypes.StringType{},
		"tos_link":                    basetypes.StringType{},
		"tos_text":                    basetypes.StringType{},
		"uth_button_amazon":           basetypes.StringType{},
	}
}
