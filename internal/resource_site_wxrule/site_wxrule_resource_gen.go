// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_site_wxrule

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func SiteWxruleResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"action": schema.StringAttribute{
				Required:            true,
				Description:         "type of action, allow / block. enum: `allow`, `block`",
				MarkdownDescription: "type of action, allow / block. enum: `allow`, `block`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"allow",
						"block",
					),
				},
			},
			"apply_tags": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
				},
			},
			"blocked_apps": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "Blocked apps (always blocking, ignoring action), the key of Get Application List",
				MarkdownDescription: "Blocked apps (always blocking, ignoring action), the key of Get Application List",
				Validators: []validator.List{
					listvalidator.SizeAtLeast(1),
				},
			},
			"dst_allow_wxtags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of WxTag UUID to indicate these tags are allowed access",
				MarkdownDescription: "List of WxTag UUID to indicate these tags are allowed access",
				Default:             listdefault.StaticValue(basetypes.NewListValueMust(basetypes.StringType{}, []attr.Value{})),
			},
			"dst_deny_wxtags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of WxTag UUID to indicate these tags are blocked access",
				MarkdownDescription: "List of WxTag UUID to indicate these tags are blocked access",
				Default:             listdefault.StaticValue(basetypes.NewListValueMust(basetypes.StringType{}, []attr.Value{})),
			},
			"dst_wxtags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of WxTag UUID",
				MarkdownDescription: "List of WxTag UUID",
				Default:             listdefault.StaticValue(basetypes.NewListValueMust(basetypes.StringType{}, []attr.Value{})),
			},
			"enabled": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				Default:  booldefault.StaticBool(true),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique ID of the object instance in the Mist Organization",
				MarkdownDescription: "Unique ID of the object instance in the Mist Organization",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"order": schema.Int64Attribute{
				Required:            true,
				Description:         "Order how rules would be looked up, > 0 and bigger order got matched first, -1 means LAST, uniqueness not checked",
				MarkdownDescription: "Order how rules would be looked up, > 0 and bigger order got matched first, -1 means LAST, uniqueness not checked",
				Validators: []validator.Int64{
					int64validator.Any(
						int64validator.Between(-1, -1),
						int64validator.AtLeast(1),
					),
				},
			},
			"site_id": schema.StringAttribute{
				Required: true,
			},
			"src_wxtags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of WxTag UUID to determine if this rule would match",
				MarkdownDescription: "List of WxTag UUID to determine if this rule would match",
				Default:             listdefault.StaticValue(basetypes.NewListValueMust(basetypes.StringType{}, []attr.Value{})),
			},
		},
	}
}

type SiteWxruleModel struct {
	Action         types.String `tfsdk:"action"`
	ApplyTags      types.List   `tfsdk:"apply_tags"`
	BlockedApps    types.List   `tfsdk:"blocked_apps"`
	DstAllowWxtags types.List   `tfsdk:"dst_allow_wxtags"`
	DstDenyWxtags  types.List   `tfsdk:"dst_deny_wxtags"`
	DstWxtags      types.List   `tfsdk:"dst_wxtags"`
	Enabled        types.Bool   `tfsdk:"enabled"`
	Id             types.String `tfsdk:"id"`
	Order          types.Int64  `tfsdk:"order"`
	SiteId         types.String `tfsdk:"site_id"`
	SrcWxtags      types.List   `tfsdk:"src_wxtags"`
}
