// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_upgrade_device

import (
	"context"
	"fmt"
	"github.com/Juniper/terraform-provider-mist/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UpgradeDeviceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"device_id": schema.StringAttribute{
				Required: true,
			},
			"fwupdate": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"progress": schema.Int64Attribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed:            true,
						Description:         "enum: `inprogress`, `failed`, `upgraded`",
						MarkdownDescription: "enum: `inprogress`, `failed`, `upgraded`",
					},
					"status_id": schema.Int64Attribute{
						Computed: true,
					},
					"timestamp": schema.Float64Attribute{
						Computed: true,
					},
					"will_retry": schema.BoolAttribute{
						Computed: true,
					},
				},
				CustomType: FwupdateType{
					ObjectType: types.ObjectType{
						AttrTypes: FwupdateValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"reboot": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For Junos devices only (APs are automatically rebooted). Reboot device immediately after upgrade is completed",
				MarkdownDescription: "For Junos devices only (APs are automatically rebooted). Reboot device immediately after upgrade is completed",
				Default:             booldefault.StaticBool(false),
			},
			"reboot_at": schema.Int64Attribute{
				Optional:            true,
				Description:         "For Junos devices only and if `reboot`==`true`. Reboot start time in epoch seconds, default is `start_time`",
				MarkdownDescription: "For Junos devices only and if `reboot`==`true`. Reboot start time in epoch seconds, default is `start_time`",
				Validators: []validator.Int64{
					mistvalidator.AllowedWhenValueIs(path.MatchRelative().AtParent().AtName("reboot"), types.BoolValue(true)),
				},
			},
			"site_id": schema.StringAttribute{
				Required: true,
			},
			"snapshot": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For Junos devices only. Perform recovery snapshot after device is rebooted",
				MarkdownDescription: "For Junos devices only. Perform recovery snapshot after device is rebooted",
				Default:             booldefault.StaticBool(false),
			},
			"start_time": schema.Int64Attribute{
				Optional:            true,
				Description:         "firmware download start time in epoch",
				MarkdownDescription: "firmware download start time in epoch",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "enum: `error`, `inprogress`, `scheduled`, `starting`, `success`",
				MarkdownDescription: "enum: `error`, `inprogress`, `scheduled`, `starting`, `success`",
			},
			"timestamp": schema.NumberAttribute{
				Computed:            true,
				Description:         "timestamp",
				MarkdownDescription: "timestamp",
			},
			"version": schema.StringAttribute{
				Required:            true,
				Description:         "specific version / `stable`, default is to use the latest",
				MarkdownDescription: "specific version / `stable`, default is to use the latest",
			},
		},
	}
}

type UpgradeDeviceModel struct {
	DeviceId  types.String  `tfsdk:"device_id"`
	Fwupdate  FwupdateValue `tfsdk:"fwupdate"`
	Reboot    types.Bool    `tfsdk:"reboot"`
	RebootAt  types.Int64   `tfsdk:"reboot_at"`
	SiteId    types.String  `tfsdk:"site_id"`
	Snapshot  types.Bool    `tfsdk:"snapshot"`
	StartTime types.Int64   `tfsdk:"start_time"`
	Status    types.String  `tfsdk:"status"`
	Timestamp types.Number  `tfsdk:"timestamp"`
	Version   types.String  `tfsdk:"version"`
}

var _ basetypes.ObjectTypable = FwupdateType{}

type FwupdateType struct {
	basetypes.ObjectType
}

func (t FwupdateType) Equal(o attr.Type) bool {
	other, ok := o.(FwupdateType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FwupdateType) String() string {
	return "FwupdateType"
}

func (t FwupdateType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	progressAttribute, ok := attributes["progress"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`progress is missing from object`)

		return nil, diags
	}

	progressVal, ok := progressAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`progress expected to be basetypes.Int64Value, was: %T`, progressAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	statusIdAttribute, ok := attributes["status_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_id is missing from object`)

		return nil, diags
	}

	statusIdVal, ok := statusIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_id expected to be basetypes.Int64Value, was: %T`, statusIdAttribute))
	}

	timestampAttribute, ok := attributes["timestamp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timestamp is missing from object`)

		return nil, diags
	}

	timestampVal, ok := timestampAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timestamp expected to be basetypes.Float64Value, was: %T`, timestampAttribute))
	}

	willRetryAttribute, ok := attributes["will_retry"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`will_retry is missing from object`)

		return nil, diags
	}

	willRetryVal, ok := willRetryAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`will_retry expected to be basetypes.BoolValue, was: %T`, willRetryAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FwupdateValue{
		Progress:  progressVal,
		Status:    statusVal,
		StatusId:  statusIdVal,
		Timestamp: timestampVal,
		WillRetry: willRetryVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewFwupdateValueNull() FwupdateValue {
	return FwupdateValue{
		state: attr.ValueStateNull,
	}
}

func NewFwupdateValueUnknown() FwupdateValue {
	return FwupdateValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFwupdateValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FwupdateValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FwupdateValue Attribute Value",
				"While creating a FwupdateValue value, a missing attribute value was detected. "+
					"A FwupdateValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FwupdateValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FwupdateValue Attribute Type",
				"While creating a FwupdateValue value, an invalid attribute value was detected. "+
					"A FwupdateValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FwupdateValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FwupdateValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FwupdateValue Attribute Value",
				"While creating a FwupdateValue value, an extra attribute value was detected. "+
					"A FwupdateValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FwupdateValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFwupdateValueUnknown(), diags
	}

	progressAttribute, ok := attributes["progress"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`progress is missing from object`)

		return NewFwupdateValueUnknown(), diags
	}

	progressVal, ok := progressAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`progress expected to be basetypes.Int64Value, was: %T`, progressAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewFwupdateValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	statusIdAttribute, ok := attributes["status_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_id is missing from object`)

		return NewFwupdateValueUnknown(), diags
	}

	statusIdVal, ok := statusIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_id expected to be basetypes.Int64Value, was: %T`, statusIdAttribute))
	}

	timestampAttribute, ok := attributes["timestamp"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`timestamp is missing from object`)

		return NewFwupdateValueUnknown(), diags
	}

	timestampVal, ok := timestampAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`timestamp expected to be basetypes.Float64Value, was: %T`, timestampAttribute))
	}

	willRetryAttribute, ok := attributes["will_retry"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`will_retry is missing from object`)

		return NewFwupdateValueUnknown(), diags
	}

	willRetryVal, ok := willRetryAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`will_retry expected to be basetypes.BoolValue, was: %T`, willRetryAttribute))
	}

	if diags.HasError() {
		return NewFwupdateValueUnknown(), diags
	}

	return FwupdateValue{
		Progress:  progressVal,
		Status:    statusVal,
		StatusId:  statusIdVal,
		Timestamp: timestampVal,
		WillRetry: willRetryVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewFwupdateValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FwupdateValue {
	object, diags := NewFwupdateValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFwupdateValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FwupdateType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFwupdateValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFwupdateValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFwupdateValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFwupdateValueMust(FwupdateValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FwupdateType) ValueType(ctx context.Context) attr.Value {
	return FwupdateValue{}
}

var _ basetypes.ObjectValuable = FwupdateValue{}

type FwupdateValue struct {
	Progress  basetypes.Int64Value   `tfsdk:"progress"`
	Status    basetypes.StringValue  `tfsdk:"status"`
	StatusId  basetypes.Int64Value   `tfsdk:"status_id"`
	Timestamp basetypes.Float64Value `tfsdk:"timestamp"`
	WillRetry basetypes.BoolValue    `tfsdk:"will_retry"`
	state     attr.ValueState
}

func (v FwupdateValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["progress"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["timestamp"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["will_retry"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Progress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["progress"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.StatusId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status_id"] = val

		val, err = v.Timestamp.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["timestamp"] = val

		val, err = v.WillRetry.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["will_retry"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FwupdateValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FwupdateValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FwupdateValue) String() string {
	return "FwupdateValue"
}

func (v FwupdateValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"progress":   basetypes.Int64Type{},
		"status":     basetypes.StringType{},
		"status_id":  basetypes.Int64Type{},
		"timestamp":  basetypes.Float64Type{},
		"will_retry": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"progress":   v.Progress,
			"status":     v.Status,
			"status_id":  v.StatusId,
			"timestamp":  v.Timestamp,
			"will_retry": v.WillRetry,
		})

	return objVal, diags
}

func (v FwupdateValue) Equal(o attr.Value) bool {
	other, ok := o.(FwupdateValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Progress.Equal(other.Progress) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.StatusId.Equal(other.StatusId) {
		return false
	}

	if !v.Timestamp.Equal(other.Timestamp) {
		return false
	}

	if !v.WillRetry.Equal(other.WillRetry) {
		return false
	}

	return true
}

func (v FwupdateValue) Type(ctx context.Context) attr.Type {
	return FwupdateType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FwupdateValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"progress":   basetypes.Int64Type{},
		"status":     basetypes.StringType{},
		"status_id":  basetypes.Int64Type{},
		"timestamp":  basetypes.Float64Type{},
		"will_retry": basetypes.BoolType{},
	}
}
