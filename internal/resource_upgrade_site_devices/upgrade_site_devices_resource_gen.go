// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_upgrade_site_devices

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UpgradeSiteDevicesResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"canary_phases": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Description:         "For APs only and if `strategy`==`canary`. Phases for canary deployment. Each phase represents percentage of devices that need to be upgraded in that phase.",
				MarkdownDescription: "For APs only and if `strategy`==`canary`. Phases for canary deployment. Each phase represents percentage of devices that need to be upgraded in that phase.",
			},
			"counts": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"download_requested": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "list of devices MAC Addresses which cloud has requested to download firmware",
						MarkdownDescription: "list of devices MAC Addresses which cloud has requested to download firmware",
					},
					"downloaded": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "list of devices MAC Addresses which have the firmware downloaded",
						MarkdownDescription: "list of devices MAC Addresses which have the firmware downloaded",
					},
					"failed": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "list of devices MAC Addresses which have failed to upgrade",
						MarkdownDescription: "list of devices MAC Addresses which have failed to upgrade",
					},
					"reboot_in_progress": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "list of devices MAC Addresses which are rebooting",
						MarkdownDescription: "list of devices MAC Addresses which are rebooting",
					},
					"rebooted": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "list of devices MAC Addresses which have rebooted successfully",
						MarkdownDescription: "list of devices MAC Addresses which have rebooted successfully",
					},
					"scheduled": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "list of devices MAC Addresses which cloud has scheduled an upgrade for",
						MarkdownDescription: "list of devices MAC Addresses which cloud has scheduled an upgrade for",
					},
					"skipped": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "list of devices MAC Addresses which skipped upgrade since requested version was same as running version. Use force to always upgrade",
						MarkdownDescription: "list of devices MAC Addresses which skipped upgrade since requested version was same as running version. Use force to always upgrade",
					},
					"total": schema.Int64Attribute{
						Computed:            true,
						Description:         "count of devices part of this upgrade",
						MarkdownDescription: "count of devices part of this upgrade",
					},
					"upgraded": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "count of devices which have upgraded successfully",
						MarkdownDescription: "count of devices which have upgraded successfully",
					},
				},
				CustomType: CountsType{
					ObjectType: types.ObjectType{
						AttrTypes: CountsValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"current_phase": schema.Int64Attribute{
				Computed:            true,
				Description:         "current canary or rrm phase in progress",
				MarkdownDescription: "current canary or rrm phase in progress",
			},
			"device_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "id’s of devices which will be selected for upgrade",
				MarkdownDescription: "id’s of devices which will be selected for upgrade",
			},
			"enable_p2p": schema.BoolAttribute{
				Optional:            true,
				Description:         "for APs only. whether to allow local AP-to-AP FW upgrade",
				MarkdownDescription: "for APs only. whether to allow local AP-to-AP FW upgrade",
			},
			"force": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "true will force upgrade when requested version is same as running version",
				MarkdownDescription: "true will force upgrade when requested version is same as running version",
				Default:             booldefault.StaticBool(false),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique ID of the object instance in the Mist Organnization",
				MarkdownDescription: "Unique ID of the object instance in the Mist Organnization",
			},
			"max_failure_percentage": schema.NumberAttribute{
				Optional:            true,
				Description:         "for APs only and if `strategy`!=`big_bang`. percentage of failures allowed across the entire upgrade",
				MarkdownDescription: "for APs only and if `strategy`!=`big_bang`. percentage of failures allowed across the entire upgrade",
			},
			"max_failures": schema.ListAttribute{
				ElementType:         types.Int64Type,
				Optional:            true,
				Description:         "For APs only and if `strategy`==`canary`. Number of failures allowed within each phase. Only applicable for `canary`. Array length should be same as `canary_phases`. Will be used if provided, else `max_failure_percentage` will be used",
				MarkdownDescription: "For APs only and if `strategy`==`canary`. Number of failures allowed within each phase. Only applicable for `canary`. Array length should be same as `canary_phases`. Will be used if provided, else `max_failure_percentage` will be used",
			},
			"models": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "models which will be selected for upgrade",
				MarkdownDescription: "models which will be selected for upgrade",
			},
			"p2p_cluster_size": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "For APs only and if `enable_p2p`==`true`.",
				MarkdownDescription: "For APs only and if `enable_p2p`==`true`.",
				Validators: []validator.Int64{
					int64validator.AtLeast(0),
				},
				Default: int64default.StaticInt64(10),
			},
			"p2p_parallelism": schema.Int64Attribute{
				Optional:            true,
				Description:         "For APs only and if `enable_p2p`==`true`. Number of parallel p2p download batches to create",
				MarkdownDescription: "For APs only and if `enable_p2p`==`true`. Number of parallel p2p download batches to create",
			},
			"reboot": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For Junos devices only (APs are automatically rebooted). Reboot device immediately after upgrade is completed",
				MarkdownDescription: "For Junos devices only (APs are automatically rebooted). Reboot device immediately after upgrade is completed",
				Default:             booldefault.StaticBool(false),
			},
			"reboot_at": schema.NumberAttribute{
				Optional:            true,
				Description:         "For Junos devices only and if `reboot`==`true`. Reboot start time in epoch seconds, default is `start_time`",
				MarkdownDescription: "For Junos devices only and if `reboot`==`true`. Reboot start time in epoch seconds, default is `start_time`",
			},
			"rrm_first_batch_percentage": schema.Int64Attribute{
				Optional:            true,
				Description:         "For APs only and if `strategy`==`rrm`. Percentage of APs that need to be present in the first RRM batch",
				MarkdownDescription: "For APs only and if `strategy`==`rrm`. Percentage of APs that need to be present in the first RRM batch",
			},
			"rrm_max_batch_percentage": schema.Int64Attribute{
				Optional:            true,
				Description:         "For APs only and if `strategy`==`rrm`. Max percentage of APs that need to be present in each RRM batch",
				MarkdownDescription: "For APs only and if `strategy`==`rrm`. Max percentage of APs that need to be present in each RRM batch",
			},
			"rrm_mesh_upgrade": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For APs only and if `strategy`==`rrm`. Whether to upgrade mesh AP’s parallelly or sequentially at the end of the upgrade. enum: `parallel`, `sequential`",
				MarkdownDescription: "For APs only and if `strategy`==`rrm`. Whether to upgrade mesh AP’s parallelly or sequentially at the end of the upgrade. enum: `parallel`, `sequential`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"parallel",
						"sequential",
					),
				},
				Default: stringdefault.StaticString("sequential"),
			},
			"rrm_node_order": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For APs only and if `strategy`==`rrm`. Used in rrm to determine whether to start upgrade from fringe or center AP’s. enum: `center_to_fringe`, `fringe_to_center`",
				MarkdownDescription: "For APs only and if `strategy`==`rrm`. Used in rrm to determine whether to start upgrade from fringe or center AP’s. enum: `center_to_fringe`, `fringe_to_center`",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"center_to_fringe",
						"fringe_to_center",
					),
				},
				Default: stringdefault.StaticString("fringe_to_center"),
			},
			"rrm_slow_ramp": schema.BoolAttribute{
				Optional:            true,
				Description:         "For APs only and if `strategy`==`rrm`. True will make rrm batch sizes slowly ramp up",
				MarkdownDescription: "For APs only and if `strategy`==`rrm`. True will make rrm batch sizes slowly ramp up",
			},
			"rules": schema.ListAttribute{
				ElementType: types.MapType{
					ElemType: types.StringType,
				},
				Optional:            true,
				Description:         "rules used to identify devices which will be selected for upgrade. Device will be selected as long as it satisfies any one rule",
				MarkdownDescription: "rules used to identify devices which will be selected for upgrade. Device will be selected as long as it satisfies any one rule",
			},
			"site_id": schema.StringAttribute{
				Optional: true,
			},
			"snapshot": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For Junos devices only. Perform recovery snapshot after device is rebooted",
				MarkdownDescription: "For Junos devices only. Perform recovery snapshot after device is rebooted",
				Default:             booldefault.StaticBool(false),
			},
			"start_time": schema.NumberAttribute{
				Optional:            true,
				Description:         "upgrade start time in epoch seconds, default is now",
				MarkdownDescription: "upgrade start time in epoch seconds, default is now",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "status upgrade is in. enum: `cancelled`, `completed`, `created`, `downloaded`, `downloading`, `failed`, `upgrading`",
				MarkdownDescription: "status upgrade is in. enum: `cancelled`, `completed`, `created`, `downloaded`, `downloading`, `failed`, `upgrading`",
			},
			"strategy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For APs only. enum: `big_bang` (upgrade all at once), `canary`, `rrm`, `serial` (one at a time)",
				MarkdownDescription: "For APs only. enum: `big_bang` (upgrade all at once), `canary`, `rrm`, `serial` (one at a time)",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"",
						"big_bang",
						"canary",
						"rrm",
						"serial",
					),
				},
				Default: stringdefault.StaticString("big_bang"),
			},
			"target_version": schema.StringAttribute{
				Computed:            true,
				Description:         "version to upgrade to",
				MarkdownDescription: "version to upgrade to",
			},
			"upgrade_id": schema.StringAttribute{
				Computed: true,
			},
			"upgrade_plan": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: UpgradePlanType{
					ObjectType: types.ObjectType{
						AttrTypes: UpgradePlanValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "a dictionary of rrm phase number to devices part of that phase",
				MarkdownDescription: "a dictionary of rrm phase number to devices part of that phase",
			},
			"version": schema.StringAttribute{
				Optional:            true,
				Description:         "specific version / stable, default is to use the lastest available version",
				MarkdownDescription: "specific version / stable, default is to use the lastest available version",
			},
		},
	}
}

type UpgradeSiteDevicesModel struct {
	CanaryPhases            types.List       `tfsdk:"canary_phases"`
	Counts                  CountsValue      `tfsdk:"counts"`
	CurrentPhase            types.Int64      `tfsdk:"current_phase"`
	DeviceIds               types.List       `tfsdk:"device_ids"`
	EnableP2p               types.Bool       `tfsdk:"enable_p2p"`
	Force                   types.Bool       `tfsdk:"force"`
	Id                      types.String     `tfsdk:"id"`
	MaxFailurePercentage    types.Number     `tfsdk:"max_failure_percentage"`
	MaxFailures             types.List       `tfsdk:"max_failures"`
	Models                  types.List       `tfsdk:"models"`
	P2pClusterSize          types.Int64      `tfsdk:"p2p_cluster_size"`
	P2pParallelism          types.Int64      `tfsdk:"p2p_parallelism"`
	Reboot                  types.Bool       `tfsdk:"reboot"`
	RebootAt                types.Number     `tfsdk:"reboot_at"`
	RrmFirstBatchPercentage types.Int64      `tfsdk:"rrm_first_batch_percentage"`
	RrmMaxBatchPercentage   types.Int64      `tfsdk:"rrm_max_batch_percentage"`
	RrmMeshUpgrade          types.String     `tfsdk:"rrm_mesh_upgrade"`
	RrmNodeOrder            types.String     `tfsdk:"rrm_node_order"`
	RrmSlowRamp             types.Bool       `tfsdk:"rrm_slow_ramp"`
	Rules                   types.List       `tfsdk:"rules"`
	SiteId                  types.String     `tfsdk:"site_id"`
	Snapshot                types.Bool       `tfsdk:"snapshot"`
	StartTime               types.Number     `tfsdk:"start_time"`
	Status                  types.String     `tfsdk:"status"`
	Strategy                types.String     `tfsdk:"strategy"`
	TargetVersion           types.String     `tfsdk:"target_version"`
	UpgradeId               types.String     `tfsdk:"upgrade_id"`
	UpgradePlan             UpgradePlanValue `tfsdk:"upgrade_plan"`
	Version                 types.String     `tfsdk:"version"`
}

var _ basetypes.ObjectTypable = CountsType{}

type CountsType struct {
	basetypes.ObjectType
}

func (t CountsType) Equal(o attr.Type) bool {
	other, ok := o.(CountsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CountsType) String() string {
	return "CountsType"
}

func (t CountsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	downloadRequestedAttribute, ok := attributes["download_requested"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`download_requested is missing from object`)

		return nil, diags
	}

	downloadRequestedVal, ok := downloadRequestedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`download_requested expected to be basetypes.ListValue, was: %T`, downloadRequestedAttribute))
	}

	downloadedAttribute, ok := attributes["downloaded"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`downloaded is missing from object`)

		return nil, diags
	}

	downloadedVal, ok := downloadedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`downloaded expected to be basetypes.ListValue, was: %T`, downloadedAttribute))
	}

	failedAttribute, ok := attributes["failed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`failed is missing from object`)

		return nil, diags
	}

	failedVal, ok := failedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`failed expected to be basetypes.ListValue, was: %T`, failedAttribute))
	}

	rebootInProgressAttribute, ok := attributes["reboot_in_progress"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`reboot_in_progress is missing from object`)

		return nil, diags
	}

	rebootInProgressVal, ok := rebootInProgressAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`reboot_in_progress expected to be basetypes.ListValue, was: %T`, rebootInProgressAttribute))
	}

	rebootedAttribute, ok := attributes["rebooted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rebooted is missing from object`)

		return nil, diags
	}

	rebootedVal, ok := rebootedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rebooted expected to be basetypes.ListValue, was: %T`, rebootedAttribute))
	}

	scheduledAttribute, ok := attributes["scheduled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`scheduled is missing from object`)

		return nil, diags
	}

	scheduledVal, ok := scheduledAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`scheduled expected to be basetypes.ListValue, was: %T`, scheduledAttribute))
	}

	skippedAttribute, ok := attributes["skipped"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skipped is missing from object`)

		return nil, diags
	}

	skippedVal, ok := skippedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skipped expected to be basetypes.ListValue, was: %T`, skippedAttribute))
	}

	totalAttribute, ok := attributes["total"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total is missing from object`)

		return nil, diags
	}

	totalVal, ok := totalAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total expected to be basetypes.Int64Value, was: %T`, totalAttribute))
	}

	upgradedAttribute, ok := attributes["upgraded"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`upgraded is missing from object`)

		return nil, diags
	}

	upgradedVal, ok := upgradedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`upgraded expected to be basetypes.ListValue, was: %T`, upgradedAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CountsValue{
		DownloadRequested: downloadRequestedVal,
		Downloaded:        downloadedVal,
		Failed:            failedVal,
		RebootInProgress:  rebootInProgressVal,
		Rebooted:          rebootedVal,
		Scheduled:         scheduledVal,
		Skipped:           skippedVal,
		Total:             totalVal,
		Upgraded:          upgradedVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewCountsValueNull() CountsValue {
	return CountsValue{
		state: attr.ValueStateNull,
	}
}

func NewCountsValueUnknown() CountsValue {
	return CountsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCountsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CountsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CountsValue Attribute Value",
				"While creating a CountsValue value, a missing attribute value was detected. "+
					"A CountsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CountsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CountsValue Attribute Type",
				"While creating a CountsValue value, an invalid attribute value was detected. "+
					"A CountsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CountsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CountsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CountsValue Attribute Value",
				"While creating a CountsValue value, an extra attribute value was detected. "+
					"A CountsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CountsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCountsValueUnknown(), diags
	}

	downloadRequestedAttribute, ok := attributes["download_requested"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`download_requested is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	downloadRequestedVal, ok := downloadRequestedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`download_requested expected to be basetypes.ListValue, was: %T`, downloadRequestedAttribute))
	}

	downloadedAttribute, ok := attributes["downloaded"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`downloaded is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	downloadedVal, ok := downloadedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`downloaded expected to be basetypes.ListValue, was: %T`, downloadedAttribute))
	}

	failedAttribute, ok := attributes["failed"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`failed is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	failedVal, ok := failedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`failed expected to be basetypes.ListValue, was: %T`, failedAttribute))
	}

	rebootInProgressAttribute, ok := attributes["reboot_in_progress"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`reboot_in_progress is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	rebootInProgressVal, ok := rebootInProgressAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`reboot_in_progress expected to be basetypes.ListValue, was: %T`, rebootInProgressAttribute))
	}

	rebootedAttribute, ok := attributes["rebooted"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rebooted is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	rebootedVal, ok := rebootedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rebooted expected to be basetypes.ListValue, was: %T`, rebootedAttribute))
	}

	scheduledAttribute, ok := attributes["scheduled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`scheduled is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	scheduledVal, ok := scheduledAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`scheduled expected to be basetypes.ListValue, was: %T`, scheduledAttribute))
	}

	skippedAttribute, ok := attributes["skipped"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skipped is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	skippedVal, ok := skippedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skipped expected to be basetypes.ListValue, was: %T`, skippedAttribute))
	}

	totalAttribute, ok := attributes["total"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`total is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	totalVal, ok := totalAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`total expected to be basetypes.Int64Value, was: %T`, totalAttribute))
	}

	upgradedAttribute, ok := attributes["upgraded"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`upgraded is missing from object`)

		return NewCountsValueUnknown(), diags
	}

	upgradedVal, ok := upgradedAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`upgraded expected to be basetypes.ListValue, was: %T`, upgradedAttribute))
	}

	if diags.HasError() {
		return NewCountsValueUnknown(), diags
	}

	return CountsValue{
		DownloadRequested: downloadRequestedVal,
		Downloaded:        downloadedVal,
		Failed:            failedVal,
		RebootInProgress:  rebootInProgressVal,
		Rebooted:          rebootedVal,
		Scheduled:         scheduledVal,
		Skipped:           skippedVal,
		Total:             totalVal,
		Upgraded:          upgradedVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewCountsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CountsValue {
	object, diags := NewCountsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCountsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CountsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCountsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCountsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCountsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCountsValueMust(CountsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CountsType) ValueType(ctx context.Context) attr.Value {
	return CountsValue{}
}

var _ basetypes.ObjectValuable = CountsValue{}

type CountsValue struct {
	DownloadRequested basetypes.ListValue  `tfsdk:"download_requested"`
	Downloaded        basetypes.ListValue  `tfsdk:"downloaded"`
	Failed            basetypes.ListValue  `tfsdk:"failed"`
	RebootInProgress  basetypes.ListValue  `tfsdk:"reboot_in_progress"`
	Rebooted          basetypes.ListValue  `tfsdk:"rebooted"`
	Scheduled         basetypes.ListValue  `tfsdk:"scheduled"`
	Skipped           basetypes.ListValue  `tfsdk:"skipped"`
	Total             basetypes.Int64Value `tfsdk:"total"`
	Upgraded          basetypes.ListValue  `tfsdk:"upgraded"`
	state             attr.ValueState
}

func (v CountsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["download_requested"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["downloaded"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["failed"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["reboot_in_progress"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["rebooted"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["scheduled"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["skipped"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["total"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["upgraded"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.DownloadRequested.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["download_requested"] = val

		val, err = v.Downloaded.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["downloaded"] = val

		val, err = v.Failed.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["failed"] = val

		val, err = v.RebootInProgress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["reboot_in_progress"] = val

		val, err = v.Rebooted.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rebooted"] = val

		val, err = v.Scheduled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["scheduled"] = val

		val, err = v.Skipped.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skipped"] = val

		val, err = v.Total.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["total"] = val

		val, err = v.Upgraded.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["upgraded"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CountsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CountsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CountsValue) String() string {
	return "CountsValue"
}

func (v CountsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	downloadRequestedVal, d := types.ListValue(types.StringType, v.DownloadRequested.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	downloadedVal, d := types.ListValue(types.StringType, v.Downloaded.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	failedVal, d := types.ListValue(types.StringType, v.Failed.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	rebootInProgressVal, d := types.ListValue(types.StringType, v.RebootInProgress.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	rebootedVal, d := types.ListValue(types.StringType, v.Rebooted.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	scheduledVal, d := types.ListValue(types.StringType, v.Scheduled.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	skippedVal, d := types.ListValue(types.StringType, v.Skipped.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	upgradedVal, d := types.ListValue(types.StringType, v.Upgraded.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"download_requested": basetypes.ListType{
				ElemType: types.StringType,
			},
			"downloaded": basetypes.ListType{
				ElemType: types.StringType,
			},
			"failed": basetypes.ListType{
				ElemType: types.StringType,
			},
			"reboot_in_progress": basetypes.ListType{
				ElemType: types.StringType,
			},
			"rebooted": basetypes.ListType{
				ElemType: types.StringType,
			},
			"scheduled": basetypes.ListType{
				ElemType: types.StringType,
			},
			"skipped": basetypes.ListType{
				ElemType: types.StringType,
			},
			"total": basetypes.Int64Type{},
			"upgraded": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"download_requested": basetypes.ListType{
			ElemType: types.StringType,
		},
		"downloaded": basetypes.ListType{
			ElemType: types.StringType,
		},
		"failed": basetypes.ListType{
			ElemType: types.StringType,
		},
		"reboot_in_progress": basetypes.ListType{
			ElemType: types.StringType,
		},
		"rebooted": basetypes.ListType{
			ElemType: types.StringType,
		},
		"scheduled": basetypes.ListType{
			ElemType: types.StringType,
		},
		"skipped": basetypes.ListType{
			ElemType: types.StringType,
		},
		"total": basetypes.Int64Type{},
		"upgraded": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"download_requested": downloadRequestedVal,
			"downloaded":         downloadedVal,
			"failed":             failedVal,
			"reboot_in_progress": rebootInProgressVal,
			"rebooted":           rebootedVal,
			"scheduled":          scheduledVal,
			"skipped":            skippedVal,
			"total":              v.Total,
			"upgraded":           upgradedVal,
		})

	return objVal, diags
}

func (v CountsValue) Equal(o attr.Value) bool {
	other, ok := o.(CountsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DownloadRequested.Equal(other.DownloadRequested) {
		return false
	}

	if !v.Downloaded.Equal(other.Downloaded) {
		return false
	}

	if !v.Failed.Equal(other.Failed) {
		return false
	}

	if !v.RebootInProgress.Equal(other.RebootInProgress) {
		return false
	}

	if !v.Rebooted.Equal(other.Rebooted) {
		return false
	}

	if !v.Scheduled.Equal(other.Scheduled) {
		return false
	}

	if !v.Skipped.Equal(other.Skipped) {
		return false
	}

	if !v.Total.Equal(other.Total) {
		return false
	}

	if !v.Upgraded.Equal(other.Upgraded) {
		return false
	}

	return true
}

func (v CountsValue) Type(ctx context.Context) attr.Type {
	return CountsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CountsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"download_requested": basetypes.ListType{
			ElemType: types.StringType,
		},
		"downloaded": basetypes.ListType{
			ElemType: types.StringType,
		},
		"failed": basetypes.ListType{
			ElemType: types.StringType,
		},
		"reboot_in_progress": basetypes.ListType{
			ElemType: types.StringType,
		},
		"rebooted": basetypes.ListType{
			ElemType: types.StringType,
		},
		"scheduled": basetypes.ListType{
			ElemType: types.StringType,
		},
		"skipped": basetypes.ListType{
			ElemType: types.StringType,
		},
		"total": basetypes.Int64Type{},
		"upgraded": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = UpgradePlanType{}

type UpgradePlanType struct {
	basetypes.ObjectType
}

func (t UpgradePlanType) Equal(o attr.Type) bool {
	other, ok := o.(UpgradePlanType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UpgradePlanType) String() string {
	return "UpgradePlanType"
}

func (t UpgradePlanType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return UpgradePlanValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewUpgradePlanValueNull() UpgradePlanValue {
	return UpgradePlanValue{
		state: attr.ValueStateNull,
	}
}

func NewUpgradePlanValueUnknown() UpgradePlanValue {
	return UpgradePlanValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUpgradePlanValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UpgradePlanValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UpgradePlanValue Attribute Value",
				"While creating a UpgradePlanValue value, a missing attribute value was detected. "+
					"A UpgradePlanValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UpgradePlanValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UpgradePlanValue Attribute Type",
				"While creating a UpgradePlanValue value, an invalid attribute value was detected. "+
					"A UpgradePlanValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UpgradePlanValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UpgradePlanValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UpgradePlanValue Attribute Value",
				"While creating a UpgradePlanValue value, an extra attribute value was detected. "+
					"A UpgradePlanValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UpgradePlanValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUpgradePlanValueUnknown(), diags
	}

	if diags.HasError() {
		return NewUpgradePlanValueUnknown(), diags
	}

	return UpgradePlanValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewUpgradePlanValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UpgradePlanValue {
	object, diags := NewUpgradePlanValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUpgradePlanValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UpgradePlanType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUpgradePlanValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUpgradePlanValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUpgradePlanValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUpgradePlanValueMust(UpgradePlanValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UpgradePlanType) ValueType(ctx context.Context) attr.Value {
	return UpgradePlanValue{}
}

var _ basetypes.ObjectValuable = UpgradePlanValue{}

type UpgradePlanValue struct {
	state attr.ValueState
}

func (v UpgradePlanValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UpgradePlanValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UpgradePlanValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UpgradePlanValue) String() string {
	return "UpgradePlanValue"
}

func (v UpgradePlanValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v UpgradePlanValue) Equal(o attr.Value) bool {
	other, ok := o.(UpgradePlanValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v UpgradePlanValue) Type(ctx context.Context) attr.Type {
	return UpgradePlanType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UpgradePlanValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
